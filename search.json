[{"title":"D3 选集的工作原理","url":"http://zhangqiang.work/posts/616201706/","content":"<style>\nsvg {font:10px sans-serif} \nspan.inlinespan {display:inline-block;position:relative;width:55px;}\nspan.inlinespan > svg {position:absolute;top:-17px;width:55px;height:22px} \n</style>\n\n<blockquote>\n<p>Any sufficiently advanced technology is indistinguishable from magic. – Arthur C. Clarke</p>\n</blockquote>\n<p>我曾简要介绍过 D3 <strong>选集（Selections）</strong>，不过只讲了些用来入门的细节。本文则更全面——较之介绍如何使用选集，我将诠释选集的实现原理。阅读本文可能需要花更多时间，但它可以解除所有关于<strong>数据驱动文档</strong>的魔法，帮助您掌握它。</p>\n<p>也许本文的结构乍看起来有些乱，它优先描述了选集内部的工作方式而非其设计意图，因而您可能会想，为什么需要这样的机制呢？之所以采用这种行文结构，仅仅是因为简单：在解释各部分如何协调工作之前，先将各部分一一罗列并解释清楚。及至文末，设计意图便不言自明。</p>\n<p>D3 是一个可视化库，所以本文采用了可视化的方式结合文本来解释问题。在后文的图中，左侧表示选集的结构，右侧表示数据的结构：</p>\n<svg id=\"demo\" width=\"620\" height=\"90\"/>\n\n<p>形如 <span class=\"inlinespan\"><svg id=\"thing\"/></span> 的圆角矩形用来表示各种类型的 JavaScript 对象，包括字面量对象( {foo: 16} )、原生类型( “hello” )、数组( [1, 2, 3] )及 DOM 元素，不一而足。某些特殊对象类型会着色，包括 <span class=\"inlinespan\"><svg id=\"selection\"/></span> ，<span class=\"inlinespan\"><svg id=\"array\"/></span> 及 <span class=\"inlinespan\"><svg id=\"element\"/></span> 。对象间的关系用连接线（<span class=\"inlinespan\"><svg id=\"connection\"/></span>）表示。包含数字 42 的数组示例如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">42</span>];</div></pre></td></tr></table></figure>\n<svg id=\"demo42\" width=\"620\" height=\"30\"/>\n\n<p>用来生成选集的代码会尽可能地放在图表上方。为了检测您对文本是否理解，最好的方法是打开浏览器的 JavaScript 控制台并交互式地创建选集，参与其中！</p>\n<p>开始吧。</p>\n<h1 id=\"数组的子类\"><a href=\"#数组的子类\" class=\"headerlink\" title=\"数组的子类\"></a>数组的子类</h1><p>也许您曾听说过，“选集是由 DOM 元素构成的数组”。错。选集其实是数组的子类；该子类提供了操作选集中选中元素的方法，比如设置属性和样式。同时选集也继承了原生数组的一些方法，比如 array.forEach 和 array.map 。尽管如此，通常并不需要使用原生方法，因为 D3 提供了更便利的方式，比如 selection.each 。（另有一些原生方法被覆盖以将其行为适配于选集，即 selection.filter 和 selection.sort）。</p>\n<h1 id=\"元素分组\"><a href=\"#元素分组\" class=\"headerlink\" title=\"元素分组\"></a>元素分组</h1><p>选集“并非由 DOM 元素构成的数组” 的另一个原因是，它是元素数组的数组：选集是一组数组，每个组（group）都是一个元素数组。例如 d3.select 返回的由所选元素构成的选集中，仅包含一个组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> selection = d3.select(<span class=\"string\">\"body\"</span>);</div></pre></td></tr></table></figure>\n<svg id=\"group1\" width=\"620\" height=\"30\"/>\n\n<p>尝试在 JavaScript 控制台中运行此命令，并通过 selection[0] 检查分组情况，通过 selection[0][0] 检查节点。D3 API 支持直接访问节点，使用 selection.node 即可，该方法十分常用，一会儿你就知道了。</p>\n<p>同样地，d3.selectAll 返回一个选集，它带有一个组和任意数量的元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.selectAll(<span class=\"string\">\"h2\"</span>);</div></pre></td></tr></table></figure>\n<svg id=\"group2\" width=\"620\" height=\"100\"/>\n\n<p>d3.select 和 d3.selectAll 返回的选集只包含一个组。获取包含多个组的选集的唯一方法是使用 selection.selectAll 。 例如，假设先选择表格的所有行，再选择每行中的单元格，则会为每行均获取一组同级单元格：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.selectAll(<span class=\"string\">\"tr\"</span>).selectAll(<span class=\"string\">\"td\"</span>);</div></pre></td></tr></table></figure>\n<svg id=\"group3\" width=\"620\" height=\"390\"/>\n\n<p>【本文译自 <a href=\"https://bost.ocks.org/mike/selection/\" target=\"_blank\" rel=\"external\">How Selections Work</a> 如有侵权，即刻删除。】</p>\n<script>\n$(function() {\n    var hm = document.createElement('script');\n    hm.src = '/js/drawSvg.js';\n    document.body.appendChild(hm);\n});\n</script>"},{"title":"软考——信息系统项目管理师","url":"http://zhangqiang.work/posts/523201705/","content":"<p>最近很长一段时间生活得很忙碌，当然，忙碌常常是我打发自己的借口。年初报了信息系统项目管理师考试，也于 20 号结束了，虽然并没有在这个考试上下很大功夫，但总觉得它占据了我部分生活，更确切说是生活上的心情。人总是在给自己找些事情，有事情做了，累；无事情做了，更累。尝试保持心境的平和。</p>\n<p>复习时总结的九大管理 44 个过程域的输入输出，贴在这里备忘：</p>\n<h1 id=\"整体管理\"><a href=\"#整体管理\" class=\"headerlink\" title=\"整体管理\"></a>整体管理</h1><p><img src=\"整体管理.png\" alt=\"整体管理.png\"></p>\n<h1 id=\"范围管理\"><a href=\"#范围管理\" class=\"headerlink\" title=\"范围管理\"></a>范围管理</h1><p><img src=\"范围管理.png\" alt=\"范围管理.png\"></p>\n<h1 id=\"时间管理\"><a href=\"#时间管理\" class=\"headerlink\" title=\"时间管理\"></a>时间管理</h1><p><img src=\"时间管理.png\" alt=\"时间管理.png\"></p>\n<h1 id=\"成本管理\"><a href=\"#成本管理\" class=\"headerlink\" title=\"成本管理\"></a>成本管理</h1><p><img src=\"成本管理.png\" alt=\"成本管理.png\"></p>\n<h1 id=\"质量管理\"><a href=\"#质量管理\" class=\"headerlink\" title=\"质量管理\"></a>质量管理</h1><p><img src=\"质量管理.png\" alt=\"质量管理.png\"></p>\n<h1 id=\"人力资源管理\"><a href=\"#人力资源管理\" class=\"headerlink\" title=\"人力资源管理\"></a>人力资源管理</h1><p><img src=\"人力资源管理.png\" alt=\"人力资源管理.png\"></p>\n<h1 id=\"沟通管理\"><a href=\"#沟通管理\" class=\"headerlink\" title=\"沟通管理\"></a>沟通管理</h1><p><img src=\"沟通管理.png\" alt=\"沟通管理.png\"></p>\n<h1 id=\"风险管理\"><a href=\"#风险管理\" class=\"headerlink\" title=\"风险管理\"></a>风险管理</h1><p><img src=\"风险管理.png\" alt=\"风险管理.png\"></p>\n<h1 id=\"采购管理\"><a href=\"#采购管理\" class=\"headerlink\" title=\"采购管理\"></a>采购管理</h1><p><img src=\"采购管理.png\" alt=\"采购管理.png\"></p>\n"},{"title":"《国史大纲》笔记","url":"http://zhangqiang.work/posts/825201608/","content":"<p>钱穆，字宾四，江苏无锡人，一八九五年生，一九九〇年八月逝世。1912年始为乡村小学教师，后历中学而大学，先后在燕京大学、北京大学、清华大学、西南联合大学等数校任教。1949年只身去香港，创办新亚书院，1967年起定居台湾。著有《国学概论》、《先秦诸子系年》、《周公》、《墨子》、《中国近三百年学术史》、《国史大纲》、《中国历代政治得失》、《政学私言》、《论语新解》、《庄子纂笺》、《朱子新学案》、《中国学术通义》、《中国学术思想史论丛》、《中国文学论丛》、《晚学盲言》、《师友杂忆》等约六十种书。</p>\n<hr>\n<h2 id=\"上古文化三代\"><a href=\"#上古文化三代\" class=\"headerlink\" title=\"上古文化三代\"></a>上古文化三代</h2><h3 id=\"第一章-中原华夏文化之发祥【中国史之开始虞夏时代】\"><a href=\"#第一章-中原华夏文化之发祥【中国史之开始虞夏时代】\" class=\"headerlink\" title=\"第一章 中原华夏文化之发祥【中国史之开始虞夏时代】\"></a>第一章 中原华夏文化之发祥【中国史之开始虞夏时代】</h3><h4 id=\"1-近代对上古史之探索\"><a href=\"#1-近代对上古史之探索\" class=\"headerlink\" title=\"1. 近代对上古史之探索\"></a>1. 近代对上古史之探索</h4><p><strong>史前遗物发掘</strong></p>\n<ol>\n<li>旧石器时代遗址。（1）早期旧石器时代(“北京人”与“蓝田人”);（2）中期旧石器时代;（3）晚期旧石器时代</li>\n<li>新石器时代遗址。（1）黄河中下游（仰韶“彩陶文化”、龙山“黑灰陶文化”）；（2）长江中下游；（3）其它</li>\n<li>殷墟。</li>\n</ol>\n<p><strong>传说神话审订</strong></p>\n<p>大体上研究古史，应有其相应之限度，凡及年历、人物、制度、学术等等，过细推求，往往难得真相。</p>\n<p>然古史并非不可讲，从散见各古书的传说中去找寻，仍可得一个古代中国民族活动情形之大概。此种活动情形，主要的是文化状态与地理区域。</p>\n<h4 id=\"2-中原华夏文化之发祥\"><a href=\"#2-中原华夏文化之发祥\" class=\"headerlink\" title=\"2. 中原华夏文化之发祥\"></a>2. 中原华夏文化之发祥</h4><p>唐、虞当为今山西南部之两部落。而夏人则起于今河南省中部，正是所谓中原华夏之地。</p>\n<h4 id=\"3-夏代帝王及年历\"><a href=\"#3-夏代帝王及年历\" class=\"headerlink\" title=\"3. 夏代帝王及年历\"></a>3. 夏代帝王及年历</h4><p>大体夏代年历在四百、五百年之间。大体夏代年历在四百、五百年之间。</p>\n<p><img src=\"夏代帝王系表.jpeg\" alt=\"夏代帝王系表.jpeg\"></p>\n<h4 id=\"4-虞夏大事\"><a href=\"#4-虞夏大事\" class=\"headerlink\" title=\"4. 虞夏大事\"></a>4. 虞夏大事</h4><ul>\n<li>舜、禹征三苗</li>\n<li>禹、启伐有扈</li>\n</ul>\n<h3 id=\"第二章-黄河下游之新王朝【殷商时代】\"><a href=\"#第二章-黄河下游之新王朝【殷商时代】\" class=\"headerlink\" title=\"第二章 黄河下游之新王朝【殷商时代】\"></a>第二章 黄河下游之新王朝【殷商时代】</h3><h4 id=\"1-殷代帝系及年历\"><a href=\"#1-殷代帝系及年历\" class=\"headerlink\" title=\"1. 殷代帝系及年历\"></a>1. 殷代帝系及年历</h4><p>史记载殷帝王有名字世次，无年数。大体论之，殷商一代年历，应在五百年左右。</p>\n<p><img src=\"殷代帝系.jpeg\" alt=\"殷代帝系.jpeg\"></p>\n<h4 id=\"2-殷人居地之推测\"><a href=\"#2-殷人居地之推测\" class=\"headerlink\" title=\"2. 殷人居地之推测\"></a>2. 殷人居地之推测</h4><p>殷人居地，大率似在东方。自汤以前，大体皆在今河南省大河南岸商丘之附近。</p>\n<h4 id=\"3-殷人文化之推测\"><a href=\"#3-殷人文化之推测\" class=\"headerlink\" title=\"3. 殷人文化之推测\"></a>3. 殷人文化之推测</h4><p>根据殷墟甲骨文字，知商代耕稼、种植、牧畜、建造、关于人类生事各方面之文化程度，已颇象样。根据商代传世钟鼎之多与精，更可见其时文化程度之高。</p>\n<h4 id=\"4-殷周关系\"><a href=\"#4-殷周关系\" class=\"headerlink\" title=\"4. 殷周关系\"></a>4. 殷周关系</h4><p>殷、周之关系，已显如后代中央共主与四方侯国之关系。</p>\n<h3 id=\"第三章-封建帝国之创兴【西周兴亡】\"><a href=\"#第三章-封建帝国之创兴【西周兴亡】\" class=\"headerlink\" title=\"第三章 封建帝国之创兴【西周兴亡】\"></a>第三章 封建帝国之创兴【西周兴亡】</h3><p>周人起於西方。较之夏、商似为后起。</p>\n<h4 id=\"1-西周帝系及年历\"><a href=\"#1-西周帝系及年历\" class=\"headerlink\" title=\"1. 西周帝系及年历\"></a>1. 西周帝系及年历</h4><p>西周十一世十二君，其年历大约不出三百年。</p>\n<p><img src=\"西周帝系.jpeg\" alt=\"西周帝系.jpeg\"></p>\n<h4 id=\"2-周初之封建\"><a href=\"#2-周初之封建\" class=\"headerlink\" title=\"2. 周初之封建\"></a>2. 周初之封建</h4><p>周人封建，亦由当时形势之实际需要逐步逼桚而成，同时亦是周民族对於政治组织富於一种伟大气魄之表见。</p>\n<p>1）武王灭纣以后，并不能将殷人势力彻底铲除，因此仍封纣子禄父【即武庚】于殷。其他如鲁、燕、齐诸国，始封皆在成周之南。</p>\n<p>2）武王克殷二年，天下未宁而崩。周公摄政，管叔等三监转联殷同畔，东方整个旧殷王朝的势力（三监、殷、奄、熊盈族、淮夷、徐戎），一时俱起。周公亲自东征，杀管叔。定乱，乃重定封国：</p>\n<ul>\n<li>鲁：周公子伯禽伐淮夷、徐戎，遂封於鲁。</li>\n<li>齐：封太公子丁公于齐。</li>\n<li>卫：封康叔于卫，得殷民七族。</li>\n<li>宋：封微子启于宋。</li>\n<li>晋：封唐叔于夏墟。</li>\n<li>蔡：封蔡仲于蔡</li>\n<li>东都：周公又管洛邑为东都。置殷顽民焉。</li>\n</ul>\n<p>周公摄政七年，而始归政於成王，於是周人传子之制亦因而确定。</p>\n<h4 id=\"3-西周势力之继续东展\"><a href=\"#3-西周势力之继续东展\" class=\"headerlink\" title=\"3. 西周势力之继续东展\"></a>3. 西周势力之继续东展</h4><p>西周的封建，乃是一种侵略性的武装移民与军事占领，与后世统一政府只以封建制为一种政区与政权之分割者绝然不同。周人立国，是一个坐西朝东的形势。其国力的移动，大势可分两道：</p>\n<ul>\n<li>第一道由陜西出潼关，向河、洛，达东都，经营黄河下流。此武王伐殷、周公东征之一线。（昭王南征不复）</li>\n<li>第二道由陜西出武关，向江、汉，经营南阳、南郡一带，以及淮域。此文王化行南国之一线。（穆王西征）</li>\n</ul>\n<h4 id=\"4-幽王见杀与平王东迁\"><a href=\"#4-幽王见杀与平王东迁\" class=\"headerlink\" title=\"4. 幽王见杀与平王东迁\"></a>4. 幽王见杀与平王东迁</h4><p>幽王遭犬戎之难，见杀於骊山下，似犬戎居地亦在周之东南。幽王既死，周室遂分裂。</p>\n<p>及平王东迁，以弑父嫌疑，不为正义所归队，而周室为天下共主之威信亦扫地以尽，此下遂成春秋之霸局。</p>\n<hr>\n<h2 id=\"春秋战国\"><a href=\"#春秋战国\" class=\"headerlink\" title=\"春秋战国\"></a>春秋战国</h2><h3 id=\"第四章-霸政时期（春秋始末）\"><a href=\"#第四章-霸政时期（春秋始末）\" class=\"headerlink\" title=\"第四章 霸政时期（春秋始末）\"></a>第四章 霸政时期（春秋始末）</h3><h4 id=\"1-春秋年历及分期\"><a href=\"#1-春秋年历及分期\" class=\"headerlink\" title=\"1. 春秋年历及分期\"></a>1. 春秋年历及分期</h4><p><img src=\"春秋时期周室帝系表.jpeg\" alt=\"春秋时期周室帝系表.jpeg\"></p>\n<h4 id=\"2-霸前时期之形势\"><a href=\"#2-霸前时期之形势\" class=\"headerlink\" title=\"2. 霸前时期之形势\"></a>2. 霸前时期之形势</h4><p>周室东迁 –&gt; 王命不行 –&gt; 1）列国内乱； 2）诸侯兼并 –&gt; 戎狄横行 –&gt; 齐桓、晋文之霸业</p>\n<h4 id=\"3-齐桓晋文之霸业\"><a href=\"#3-齐桓晋文之霸业\" class=\"headerlink\" title=\"3. 齐桓晋文之霸业\"></a>3. 齐桓晋文之霸业</h4><p>霸者标义，大别有四：</p>\n<ol>\n<li>尊王：当时霸者号令，即替代已衰之王权也。</li>\n<li>攘夷</li>\n<li>禁抑篡弑：凡某国遇篡弑，同盟诸国互不承认，并出兵平乱，另立新君。</li>\n<li>裁制兼并：凡在同盟，互不侵犯，有争端，请于盟主，公断。</li>\n</ol>\n<p>自有霸政，而封建残喘再得苟延。霸政可以说是变相的封建中心。其事创始于齐，赞助于宋，而完成于晋。</p>\n<p>总观当时霸政，有二大要义：</p>\n<ul>\n<li>一则为诸夏耕稼民族之城市联盟，以抵抗北方游牧部落之侵略，因此得保持城市文化，使不致沦亡于游牧之蛮族。</li>\n<li>二则诸夏和平结合以抵抗南方楚国【西方秦国。】帝国主义者之武力兼并，因此得保持封建文化，使不致即进为郡县的国家。</li>\n</ul>\n<h4 id=\"4-霸政衰微后之大夫执政\"><a href=\"#4-霸政衰微后之大夫执政\" class=\"headerlink\" title=\"4. 霸政衰微后之大夫执政\"></a>4. 霸政衰微后之大夫执政</h4><p>封建初期的国家，其先只限于一个城圈。（一国只限于一城）。</p>\n<p>以后人口渐繁殖，国家规模日扩大，不仅对旧的有吞并，对新的也亦有城筑。于是列国遂各自分封其大夫。春秋初，大夫尚无世爵，其后渐有赐氏。</p>\n<p>渐称“子”。（于是原先的侯国，俨然如一新中央，而大夫采邑则俨然成一小侯国，所以说是西周封建的继续推进。）</p>\n<p>又因当时联盟各国，会聘频仍，诸侯畏劳，常使卿大夫代行。卿大夫既有外交，往往互相援结，渐渐形成大权旁落之势，于是大夫篡位，造成此后战国之新局面。</p>\n<h4 id=\"5-春秋时期之一般文化状态\"><a href=\"#5-春秋时期之一般文化状态\" class=\"headerlink\" title=\"5. 春秋时期之一般文化状态\"></a>5. 春秋时期之一般文化状态</h4><p>古代的贵族文化，实到春秋而发展到它的最高点。</p>\n<p>当时的贵族，对古代相传的宗教均已抱有一种开明而合理的见解。因此他们对于人生，亦有一个清晰而稳健的看法。</p>\n<blockquote>\n<p>“天道远，人道迩”、“鬼神不享非礼”</p>\n</blockquote>\n<p>当时的国际间，虽则不断以兵戎相见，而大体上一般趋势，则均重和平，守信义。外交上的文雅风流，更足表显出当时一般贵族文化上之修养与了解。即在战争中，犹能不失他们重人道、讲礼貌、守信让之素养，而有时则成为一种当时独有的幽默。</p>\n<p>贵族阶级之必须崩溃，平民阶级之必须崛兴，实乃此种文化酝酿之下应有之后果。</p>\n<h3 id=\"第五章-军国斗争之新局面（战国始末）\"><a href=\"#第五章-军国斗争之新局面（战国始末）\" class=\"headerlink\" title=\"第五章 军国斗争之新局面（战国始末）\"></a>第五章 军国斗争之新局面（战国始末）</h3><h4 id=\"1-战国年历及分期\"><a href=\"#1-战国年历及分期\" class=\"headerlink\" title=\"1. 战国年历及分期\"></a>1. 战国年历及分期</h4><p>本时期的历史记载，因秦廷焚书，全部毁灭。西汉中叶司马迁为史记，已苦无凭。大略言之，本时期历史，又可分为前、后两期。</p>\n<p><strong>1）第一期是周代宗法封建国家之衰灭。</strong></p>\n<p>此承春秋晚期大夫专政之局面而来。晋分为三家，【魏、韩、赵。】齐篡于田氏，【田氏本陈公子，因乱奔齐，“田”、“陈”同音之转。】鲁则三桓强于国内，公室仅如小侯。卫势日削，自贬其号曰侯。吴灭于越，陈、蔡灭于楚，郑灭于韩、史记所谱春秋十二诸侯，能继续保持其重要地位者惟楚、秦二国而已。</p>\n<p>鲁、卫以文化维持当时宗法封建国家之传统尊严，齐、晋则以武力维持当时宗法封建国家之传统地位。 楚、秦则代表相反对之一种势力也。诸国中受封建传统文化束缚愈深者，其改进愈难。</p>\n<p>诸夏和平联盟之锁链已断，各国遂争趋于转换成一个新军国，俾可于列国斗争之新局面下自求生存。</p>\n<p><strong>2）第二期是新军国成立以后之相互斗争时期。</strong></p>\n<p>此时期又可分为四期：</p>\n<ol>\n<li>梁惠王称霸时期（梁、齐争强时期）。李克、吴起变法；桂陵、马陵之战；徐州相王。</li>\n<li>齐威、宣、湣三世继梁称霸期（齐、秦争强时期）。威王两败梁国；商鞅变法；张仪专务离间梁、楚以孤齐。齐为第一等强国，故积极的主侵略；秦次于齐，故仅在外交上用手段孤削齐势。至齐湣王灭宋，国际均势破裂，此下遂起大变局。</li>\n<li>秦昭王继齐称强期（秦、赵争强时期）。齐宣王灭燕；赵国经武灵王胡服骑射灭中山；齐湣王灭宋；乐毅联合秦、魏、韩、赵五国之师入齐；长平之战，赵为秦败，于是秦并天下之形势遂成。</li>\n<li>秦灭六国期。</li>\n</ol>\n<p><img src=\"战国时期周帝系表.jpeg\" alt=\"战国时期周帝系表.jpeg\"></p>\n<h4 id=\"2-从宗法封建到新军国之种种变迁\"><a href=\"#2-从宗法封建到新军国之种种变迁\" class=\"headerlink\" title=\"2. 从宗法封建到新军国之种种变迁\"></a>2. 从宗法封建到新军国之种种变迁</h4><p><strong>1）郡县制之推行。</strong>政府直辖下的郡县，代替了贵族世袭的采地。郡县政令受制于中央，郡县守令不世袭，视实际服务成绩为任免进退，此为郡县制与宗法封建性质绝不同之点。</p>\n<p>相随于郡县制度而起者：</p>\n<ol>\n<li>第一即为贵族世卿与游仕势力之更迭。战国游仕分析，一大学者及其弟子，如荀卿、李斯等。二庶孽公子及先世仕宦，如商鞅、乐毅等。三资产在中人以上，如吴起、吕不韦等。四贫士，如张仪、范睢、虞卿等。五贱臣下吏，如申不害、赵奢等。</li>\n<li>其次，则有军民之渐趋分治。将军与守臣之分职特派，此即军民分治之见端。</li>\n<li>又有食禄之新制度。</li>\n</ol>\n<p><strong>2）井田制之废弃。</strong>商鞅废井地而开阡陌封疆为古代贵族封建分割性之主要标帜。现在政治上已由封建变为郡县，自可打开格子线，铲除田岸围墙，化成一片。此即李悝“尽地力”之教。</p>\n<p>别有促成之原因：</p>\n<ol>\n<li>人口之繁殖</li>\n<li>耕器之进步</li>\n<li>水利工程灌溉事业之发达</li>\n<li>税收方法之改变（公田制的“助”法、“履亩而税”）</li>\n</ol>\n<p><strong>3）农民军队之兴起。</strong>贵族阶级渐次奢侈安逸，国际战争渐次扩大剧烈，农民军队之编制，遂成一种新需要。三晋与田氏以大夫篡位，旧贵族失其地位，渐次设立以军功得官之制度。吴起在楚，商鞅在秦，亦严行以军功代贵族之新法。</p>\n<p><strong>4）工商业大都市之发展。</strong>春秋时，工商皆世袭食于官，盖为贵族御用，非民间之自由营业。封建贵族渐渐崩渍，而自由经商者乃渐渐兴起。大抵东方各国，渐从商业资本转入文学游仕，始终奖励农战的国家惟有秦。</p>\n<p><strong>5）山泽禁地之解放。</strong>如捕鱼、煮盐、烧炭、采铁、铸钱、伐木，种种新生产事业，皆由农民侵入禁地而始有。</p>\n<p><strong>6）货币之使用。</strong>因商业发展而货币之使用遂兴，亦为一新形态。</p>\n<p>总之春秋以至战国，为中国史上一个变动最激剧的时期。政治方面，是由许多宗法封建的小国家，变成几个中央政权统一的新军国。社会方面，则自贵族御用工商及贵族私有的井田制下，变成后代农、工、商、兵的自由业。而更重要的，则为民间自由学术之兴起。</p>\n<h3 id=\"第六章-民间自由学术之兴起（先秦诸子）\"><a href=\"#第六章-民间自由学术之兴起（先秦诸子）\" class=\"headerlink\" title=\"第六章 民间自由学术之兴起（先秦诸子）\"></a>第六章 民间自由学术之兴起（先秦诸子）</h3><h4 id=\"1-春秋时代之贵族学\"><a href=\"#1-春秋时代之贵族学\" class=\"headerlink\" title=\"1. 春秋时代之贵族学\"></a>1. 春秋时代之贵族学</h4><p>上古学术，其详难言。据春秋而言，学术尚为贵族阶级所特有。贵族封建，立基于宗法。国家即是家族之扩大。</p>\n<p>史官随着周天子之封建与王室之衰微，而逐渐分布流散于列国，即为古代王家学术逐渐广布之第一事。</p>\n<p>一切非礼，逐渐从贵族之奢僭中产生。一方面贵族对礼文逐次铺张，一方面他们对礼文又逐次不注意，于是贵族中间逐渐有“知礼”与“不知礼”之别，遂有所谓学者开始从贵族阶级中间露眼。</p>\n<p>在贵族阶级逐渐堕落的进程中，往往知礼的有学问的比较在下位，而不知礼的无学问的却高踞上层。于是王室之学渐渐流散到民间来，成为新兴的百家。</p>\n<h4 id=\"2-儒墨两家之兴起\"><a href=\"#2-儒墨两家之兴起\" class=\"headerlink\" title=\"2. 儒墨两家之兴起\"></a>2. 儒墨两家之兴起</h4><p>1）百家的开先为儒家。儒家的创始为孔子。</p>\n<p>2）继续儒家而起者为墨家，墨家的创始人为墨子。</p>\n<p>3）以下战国学派，全逃不出儒、墨两家之范围。<br>极端右派，则为后起之法家。极端左派，则为后起之道家。法家、阴阳家、纵横家，皆属右。道家、农家、名家，皆属左。惟从另一面看，右派皆积极而向前，因其比较温和，得保持乐观故。而左派常偏于消极与倒转，因其比较激烈，易限于悲观故。</p>\n<p>（PS：首次读钱穆的书，不了解其对先秦思想的划分，此部分略感惊奇。以后可读读他的《中国思想史》，做详细了解。）</p>\n<h4 id=\"3-学术路向之转变\"><a href=\"#3-学术路向之转变\" class=\"headerlink\" title=\"3. 学术路向之转变\"></a>3. 学术路向之转变</h4><p>孔子死后，贵族阶级，堕落崩坏，益发激进，儒家思想暂转入消极的路去，如子夏、曾子等是。</p>\n<p>从此等消极状态下又转回来，重走上积极的新路，便成后来之所谓法家。法家用意，在把贵族阶级上下秩序重新建立，此仍是儒家精神。自吴起、商鞅以下，渐渐变成以术数保持禄位的不忠实态度，其人如申不害。</p>\n<p>游仕渐得势，他们不仅以术数保持禄位，不肯竭诚尽忠，他们还各结党羽，各树外援，散布在列国的政府里，为他们自身相互间谋私益。这便成所谓“纵横”之局。这一派的代表如公孙衍、张仪。</p>\n<p>墨家本该与政治绝缘，然而墨家亦依然走上接近政治的路。墨主兼爱，因主非攻。墨主非攻，乃变为为人守御。亦因墨家本属工党，善为守御之机械也。惟为人守御，与天志、兼爱之理论，相去已远。</p>\n<h4 id=\"4-士气高张\"><a href=\"#4-士气高张\" class=\"headerlink\" title=\"4. 士气高张\"></a>4. 士气高张</h4><p>游仕逐渐得势，他们的学说，亦逐渐转移。他们开始注意到自身的出处和生活问题。这已在战国中期。</p>\n<p>约略言之，可分五派：</p>\n<p><strong>一、劳作派。</strong>【墨家苦行教之嫡系】此可以许行、陈仲为代表。</p>\n<p>此派主张“君民并耕”，【尚未主张无政府。此派思想往往注意社会问题，而忽略了政治情感。】主张“不恃人而食”，【各为基本的生活劳动。】似乎是墨家精神最高之表现。【陈仲子之生活，真是近世托尔斯泰晚年所想慕也。】</p>\n<p><strong>二、不仕派。</strong>【滑头的学士派】，此可以田骈、淳于髡为代表。</p>\n<p>此派安享富贵生活，寄生在贵族卵翼之下，而盛唱其不仕之高论。【此必当时先有不仕之理论，而彼辈穷取之，如儒家田子方、段干木之徒，以及墨家大部分，殆均以不仕见高也。齐稷下先生皆不仕而议论，而淳于髡、田骈为之首。】</p>\n<p><strong>三、禄仕派。</strong>【为以法术保持禄仕之进一步活动，即纵横家也。】此可以公孙衍、张仪为代表。</p>\n<p>此派积极的惟务禄仕，“纵横”，即联络各国禄仕主义者，以外交路线互结成一势力，以期于不可倒。</p>\n<p><strong>四、义仕派。</strong>【儒家之正统。】此可以孟轲为代表。</p>\n<p>此派一面反对陈仲、许行，主张“分功易事”，承认政治的生活。【推广言之，即承认士君子礼乐的生活，亦可谓是文化的生活。此与贵族奢侈生活貌同而情异。】一面反对田骈、淳于髡，【即反对游谈寄生之生活，亦即学者之贵族生活也。】主张士“不托于诸侯”，须把官职来换俸禄。一面又反对公孙衍、张仪专以妾妇之道来谋禄位，主张以礼进退。【若义不可仕而受贵族之周济，则以不饿死为限度。】</p>\n<p><strong>五、退隐派。</strong>【亦可称玩世派，乃道家之正统。】此可以庄周为代表。【其先已有杨朱“为我”。杨朱、庄周，皆对儒、墨之牺牲自己以为社会之态度而怀疑其功效也。】</p>\n<p>此派从理论上彻底反对政治事业，此层比许行、陈仲激烈，却不一定主张刻苦的劳作，又比许行、陈仲显得温和。因为反对政治事业，所以既不愿有礼乐文化，又不愿为劳苦操作，更不愿为寄生禄仕，【此派所以虽属玩世，而终成为一种严正的学派。】只有限于冥想的生活中。【其先冥想皇古生活，进则冥想自然生活。皇古生活则以黄帝时代为寄托；自然生活则为神仙，吸风饮露。可以不入世俗，不务操劳，不事学问，而自得其精神上之最高境界。】</p>\n<h4 id=\"5-贵族养贤\"><a href=\"#5-贵族养贤\" class=\"headerlink\" title=\"5. 贵族养贤\"></a>5. 贵族养贤</h4><p>平民学者逐步得势，贵族阶级对他们亦礼逐加敬礼。于是从国君养贤进一步到公子养贤。</p>\n<p>国君养贤始如魏文侯、鲁缪公，而大盛于齐威、宣王之稷下。如齐宣王之于王斗、颜斶（chù）、燕易王之让位于子之，秦昭王之跪见张禄先生，燕昭王之筑黄金台师事郭隗。</p>\n<p>公子养贤，以孟尝，平原，信陵，春申四人为著。</p>\n<h4 id=\"6-平民学者间之反动思想\"><a href=\"#6-平民学者间之反动思想\" class=\"headerlink\" title=\"6. 平民学者间之反动思想\"></a>6. 平民学者间之反动思想</h4><p>从此激而为反游仕、反文学之思想，则为战国晚年学术之特徵。其著者有三家：一老子，二荀卿，三韩非。</p>\n<ul>\n<li>老子的理论，其要者，反尚智，反好动，反游仕食客。主张在上者无治，在下者归耕。</li>\n<li>荀子则主礼治。礼为人伦，荀子则要把他的新人伦观来重定社会秩序，主去世袭之贵族而以才智为等级。荀子分人为四等：一大儒；二小儒；三众人；四奸人。主以圣为师，以王制为是非之封界，主定学术于一尊。</li>\n<li>韩非主法治，他是一个褊狭的国家主义者，主张一阶级的权益而谋富强。他抱有强烈的阶级观念，彻底主张贵族阶级统治者之私利。（战国除韩非外，尚有屈原，亦为代表贵族意识的学者。）</li>\n</ul>\n<p>战国学术思想之转变，从孔子、墨子到荀卿、韩非，恰恰是贵族阶级逐步堕落，平民学者逐步高张的一段反影、一幅写照。</p>\n<hr>\n<h2 id=\"秦汉\"><a href=\"#秦汉\" class=\"headerlink\" title=\"秦汉\"></a>秦汉</h2><h3 id=\"第七章-大一统政府之创建（秦代兴亡及汉室初起）\"><a href=\"#第七章-大一统政府之创建（秦代兴亡及汉室初起）\" class=\"headerlink\" title=\"第七章  大一统政府之创建（秦代兴亡及汉室初起）\"></a>第七章  大一统政府之创建（秦代兴亡及汉室初起）</h3><h4 id=\"1-秦汉帝系及年历\"><a href=\"#1-秦汉帝系及年历\" class=\"headerlink\" title=\"1. 秦汉帝系及年历\"></a>1. 秦汉帝系及年历</h4><p>秦自统一称帝至亡，凡三君，十五年。</p>\n<p><img src=\"秦帝系表.jpeg\" alt=\"秦帝系表.jpeg\"></p>\n<p>汉自高帝至平帝凡十一君，一百一十一年。王莽自摄政至建新朝迄亡，共十八年。</p>\n<p><img src=\"西汉帝系.jpeg\" alt=\"西汉帝系.jpeg\"></p>\n<h4 id=\"2-国家民族之传成\"><a href=\"#2-国家民族之传成\" class=\"headerlink\" title=\"2. 国家民族之传成\"></a>2. 国家民族之传成</h4><p>秦人统一，此期间有极关重要者四事：</p>\n<ol>\n<li>为中国版图之确立。【秦并六国，分建四十二郡，造成此下二千年中国疆域之大轮廊。】</li>\n<li>为中国民族之抟成。【春秋时代华、夷杂处之局，逐渐消融，而成“车同轨，书同文，行同伦”之社会。】</li>\n<li>为中国政治制度之创建。【封建制破弃，郡县制成立，平民、贵族两阶级对立之消融。】</li>\n<li>为中国学术思想之奠定。“大同观”、“平等观”、“现实观”</li>\n</ol>\n<h4 id=\"3-第一次统一政府之出现及其覆灭\"><a href=\"#3-第一次统一政府之出现及其覆灭\" class=\"headerlink\" title=\"3. 第一次统一政府之出现及其覆灭\"></a>3. 第一次统一政府之出现及其覆灭</h4><p>秦并六国，中国史第一次走上全国大统一的路。此不专因于秦国地势之险塞及其兵力之强盛，而最要的远是当时一般意向所促成。</p>\n<p>秦政府对统一事业，亦大有努力，举其要者，如废封建行郡县。统整各地制度文化风俗。开拓边境，防御外寇。</p>\n<p>秦代政治的失败，最主要的在其役使民力之逾量。</p>\n<p>秦之统一与其失败，只是贵族封建转移到平民统一中间之一个过渡。</p>\n<h4 id=\"4-平民政府之产生\"><a href=\"#4-平民政府之产生\" class=\"headerlink\" title=\"4. 平民政府之产生\"></a>4. 平民政府之产生</h4><p>秦灭六国， 二世而亡，此乃古代贵族封建势力之逐步崩溃，而秦亡为其最后之一幕。直至汉兴，始为中国史上平民政权之初创。直到景帝削平吴、楚七国之乱，平民政府之统一事业始告完成。</p>\n<p>平民政府有其必须完成之两大任务，首先要完成统一，其次为完成文治。汉政府之实际统一，始于景帝。汉政府文治之蒸，则始于武帝。</p>\n<h3 id=\"第八章-统一政府文治之演进（由汉武帝到王莽）\"><a href=\"#第八章-统一政府文治之演进（由汉武帝到王莽）\" class=\"headerlink\" title=\"第八章　统一政府文治之演进（由汉武帝到王莽）\"></a>第八章　统一政府文治之演进（由汉武帝到王莽）</h3><h4 id=\"1-西汉初年之社会\"><a href=\"#1-西汉初年之社会\" class=\"headerlink\" title=\"1. 西汉初年之社会\"></a>1. 西汉初年之社会</h4><p><strong>（一）农民与奴婢</strong></p>\n<p>封建时代的农民，对其上层统冶者，约有如下几种负担：</p>\n<ul>\n<li>一曰税。此即地租。农民耕地，在政治观念上，系属于其地封君之所有，故农民对其封君每年应纳额定之租税。</li>\n<li>二曰役。因土地所有权的观念，转移到农民的身分，耕地者对其所耕地之封君有臣属之关系。因此每年于农隙，又须对其封君为额定的几天劳役。</li>\n<li>三曰赋。遇封君贵族对外有战事，农民须对其封君贡献车牛，或劳力。</li>\n<li>四曰贡。此出农民情感上之自动，如逢年节，向其封君献彘、兔、鸡、鹅或丝、布之类。</li>\n</ul>\n<p>就汉初情形言，农民对政府负担大体如次：</p>\n<ul>\n<li>一、田租。</li>\n<li>二、算赋。</li>\n<li>三、更戍。</li>\n</ul>\n<p><strong>（二）商贾与任侠</strong></p>\n<p>以钱币买奴力以逐利长产，经营货殖者为商贾。以意气情谊收匿亡命共为奸利，甘触刑辟而市权势者则为任侠。任侠与商贾，正分攫了往者贵族阶级之二势。</p>\n<h4 id=\"2-西汉初年的政府\"><a href=\"#2-西汉初年的政府\" class=\"headerlink\" title=\"2. 西汉初年的政府\"></a>2. 西汉初年的政府</h4><p>汉高得天下，大封同姓及功臣，并明约“非刘姓不得王，非有功不得<strong>侯</strong>”。所谓有功，大体上只指军功而言。此为政府的最上层。其次的官僚，则大半由<strong>郎</strong>、<strong>吏</strong>出身。</p>\n<p>郎官来历，不出下列数途：</p>\n<ul>\n<li>一、荫任。苏武、韦玄成</li>\n<li>二、赀选。张释之、司马相如</li>\n<li>三、特殊技能。卫绾以戏车为郎，荀彘以御见侍中</li>\n</ul>\n<p>吏的来历，亦无一客观标准，大体仍多为富人所得。</p>\n<h4 id=\"3-西汉初年的士人与学术\"><a href=\"#3-西汉初年的士人与学术\" class=\"headerlink\" title=\"3. 西汉初年的士人与学术\"></a>3. 西汉初年的士人与学术</h4><p>要论汉初学术，必推溯及于先秦。秦代焚书，最主要者为六国史记，其次为诗、书古文，而百家言非其所重。</p>\n<p>汉兴，学统未尝中断。</p>\n<h4 id=\"4-中央政府文治思想之开始\"><a href=\"#4-中央政府文治思想之开始\" class=\"headerlink\" title=\"4. 中央政府文治思想之开始\"></a>4. 中央政府文治思想之开始</h4><p>西汉中央政府之文治思想，最先已由贾谊发其端。</p>\n<p>先秦诸子注意教育问题者莫如儒。故苟主幼小必教，则儒业必兴。</p>\n<h4 id=\"5-汉武一朝之复古更化\"><a href=\"#5-汉武一朝之复古更化\" class=\"headerlink\" title=\"5. 汉武一朝之复古更化\"></a>5. 汉武一朝之复古更化</h4><p>武帝英年即位，【只十七岁。】即锐意革新，谋兴礼乐。其事虽经一度挫折，终于走上复古更化的路。</p>\n<p>武帝一朝政治上重要改革，举其要者，第一是设立五经博士。第二是为博士设立弟子员。第三是郡国长官察举属吏的制度。第四是禁止官吏兼营商业并不断裁抑兼并。第五是开始打破封侯拜相之惯例，而宰相遂不为一阶级所独占。</p>\n<h4 id=\"6-士人政府之出现\"><a href=\"#6-士人政府之出现\" class=\"headerlink\" title=\"6. 士人政府之出现\"></a>6. 士人政府之出现</h4><p>汉政府自武帝后，渐渐从宗室、军人、商人之组合，【汉制虽禁商人入仕，然以赀选，富人其先皆商人也。】转变成士人参政之新局面。</p>\n<h4 id=\"7-汉儒之政治思想\"><a href=\"#7-汉儒之政治思想\" class=\"headerlink\" title=\"7. 汉儒之政治思想\"></a>7. 汉儒之政治思想</h4><p>汉儒论政，有两要点。</p>\n<ul>\n<li>一为变法和让贤论。</li>\n<li>二为礼乐和教化论。</li>\n</ul>\n<h4 id=\"8-王莽受禅与变法\"><a href=\"#8-王莽受禅与变法\" class=\"headerlink\" title=\"8. 王莽受禅与变法\"></a>8. 王莽受禅与变法</h4><p>王莽受禅，一面循着汉儒政治理论之自然趋势， 一面自有其外戚的地位及王莽个人之名誉为凭借。</p>\n<p>王莽政治失败，约有数端：</p>\n<ul>\n<li>一、失之太骤，无次第推行之计划。</li>\n<li>二、奉行不得其人，无如近世之政治集团来拥护其理想。</li>\n<li>三、多迂执不通情实处。【复古倾向太浓厚。莽之得国，多本齐学，有太涉荒诞者。莽之新政，多本鲁学，有太过迂阔者。】</li>\n</ul>\n<p>王莽的政治，完全是一种书生的政冶。王莽的失败，变法禅贤的政治理论，从此消失，渐变为帝王万世一统的思想。【政治只求保王室之安全，亦绝少注意到一般的平民生活。这不是王莽个人的失败，是中国史演进过程中的一个大失败。</p>\n<h3 id=\"第九章-统一政府之堕落（东汉兴亡）\"><a href=\"#第九章-统一政府之堕落（东汉兴亡）\" class=\"headerlink\" title=\"第九章　统一政府之堕落（东汉兴亡）\"></a>第九章　统一政府之堕落（东汉兴亡）</h3><h4 id=\"1-东汉诸帝及年历\"><a href=\"#1-东汉诸帝及年历\" class=\"headerlink\" title=\"1. 东汉诸帝及年历\"></a>1. 东汉诸帝及年历</h4><p><img src=\"东汉诸帝及年历.jpeg\" alt=\"东汉诸帝及年历.jpeg\"></p>\n<h4 id=\"2-东汉之王室\"><a href=\"#2-东汉之王室\" class=\"headerlink\" title=\"2. 东汉之王室\"></a>2. 东汉之王室</h4><p>所谓统一政府之逐渐堕落，可分两部言之：一王室，二政府。</p>\n<p>王室又可分三部言之：一王室自身，二外戚，三宦官。</p>\n<h4 id=\"3-东汉之外戚与宦官\"><a href=\"#3-东汉之外戚与宦官\" class=\"headerlink\" title=\"3. 东汉之外戚与宦官\"></a>3. 东汉之外戚与宦官</h4><p>因东汉诸帝多童年即位、夭折，及绝嗣，【绝嗣外立，多择童年。】遂多母后临朝，【外立者四帝：安、质、桓、灵，临朝者六后：窦、邓、阎、梁、窦、何。】而外戚、宦官藉之用事。</p>\n<h4 id=\"4-外戚参加王室之由来\"><a href=\"#4-外戚参加王室之由来\" class=\"headerlink\" title=\"4. 外戚参加王室之由来\"></a>4. 外戚参加王室之由来</h4><h4 id=\"5-宦官参加王室之由来\"><a href=\"#5-宦官参加王室之由来\" class=\"headerlink\" title=\"5. 宦官参加王室之由来\"></a>5. 宦官参加王室之由来</h4><h3 id=\"第十章-士族之新地位（东汉门第之兴起）\"><a href=\"#第十章-士族之新地位（东汉门第之兴起）\" class=\"headerlink\" title=\"第十章　士族之新地位（东汉门第之兴起）\"></a>第十章　士族之新地位（东汉门第之兴起）</h3><h4 id=\"1-士族政治势力之逐步膨胀\"><a href=\"#1-士族政治势力之逐步膨胀\" class=\"headerlink\" title=\"1. 士族政治势力之逐步膨胀\"></a>1. 士族政治势力之逐步膨胀</h4><h4 id=\"2-东汉之察举与征辟制度\"><a href=\"#2-东汉之察举与征辟制度\" class=\"headerlink\" title=\"2. 东汉之察举与征辟制度\"></a>2. 东汉之察举与征辟制度</h4><h4 id=\"3-太学清议\"><a href=\"#3-太学清议\" class=\"headerlink\" title=\"3. 太学清议\"></a>3. 太学清议</h4><h4 id=\"4-党锢之狱\"><a href=\"#4-党锢之狱\" class=\"headerlink\" title=\"4. 党锢之狱\"></a>4. 党锢之狱</h4><h4 id=\"5-门第之造成\"><a href=\"#5-门第之造成\" class=\"headerlink\" title=\"5. 门第之造成\"></a>5. 门第之造成</h4><h4 id=\"6-东汉士族之风尚\"><a href=\"#6-东汉士族之风尚\" class=\"headerlink\" title=\"6. 东汉士族之风尚\"></a>6. 东汉士族之风尚</h4><h3 id=\"第十一章-统一政府之对外（秦汉国力与对外形势）\"><a href=\"#第十一章-统一政府之对外（秦汉国力与对外形势）\" class=\"headerlink\" title=\"第十一章　统一政府之对外（秦汉国力与对外形势）\"></a>第十一章　统一政府之对外（秦汉国力与对外形势）</h3><h4 id=\"1-两汉国力之比较\"><a href=\"#1-两汉国力之比较\" class=\"headerlink\" title=\"1. 两汉国力之比较\"></a>1. 两汉国力之比较</h4><h4 id=\"2-西汉与匈奴\"><a href=\"#2-西汉与匈奴\" class=\"headerlink\" title=\"2. 西汉与匈奴\"></a>2. 西汉与匈奴</h4><h4 id=\"3-东汉与西羌\"><a href=\"#3-东汉与西羌\" class=\"headerlink\" title=\"3. 东汉与西羌\"></a>3. 东汉与西羌</h4>"},{"title":"Awesome JavaScript","url":"http://zhangqiang.work/posts/722201607/","content":"<p>持续更新个人接触过的优秀 JavaScript 框架、类库及软件。一些框架同时包含了多种特性，因此分类时只粗略地依据其最核心的功能。</p>\n<h2 id=\"1-包管理工具\"><a href=\"#1-包管理工具\" class=\"headerlink\" title=\"1. 包管理工具\"></a>1. 包管理工具</h2><h3 id=\"1-1-Bower\"><a href=\"#1-1-Bower\" class=\"headerlink\" title=\"1.1. Bower\"></a>1.1. <a href=\"https://bower.io\" target=\"_blank\" rel=\"external\">Bower</a></h3><p>一个针对 Web 开发的包管理器。该工具主要用来帮助用户轻松安装 CSS、JavaScript、图像等相关包，并管理这些包之间的依赖。Bower 既可以管理基于本地资源的包，也可以管理基于 git 系统的包。</p>\n<h3 id=\"1-2-npm\"><a href=\"#1-2-npm\" class=\"headerlink\" title=\"1.2. npm\"></a>1.2. <a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"external\">npm</a></h3><p>JavaScript 包管理工具，常用在 Node.js 中。</p>\n<h2 id=\"2-构建打包工具\"><a href=\"#2-构建打包工具\" class=\"headerlink\" title=\"2. 构建打包工具\"></a>2. 构建打包工具</h2><h3 id=\"2-1-webpack\"><a href=\"#2-1-webpack\" class=\"headerlink\" title=\"2.1 webpack\"></a>2.1 <a href=\"https://webpack.github.io\" target=\"_blank\" rel=\"external\">webpack</a></h3><p>一个模块绑定器，主要目的是在浏览器上绑定 JavaScript 文件。很不错，个人非常推荐在新项目中尝试。</p>\n<h3 id=\"2-2-Grunt\"><a href=\"#2-2-Grunt\" class=\"headerlink\" title=\"2.2. Grunt\"></a>2.2. <a href=\"http://www.gruntjs.net\" target=\"_blank\" rel=\"external\">Grunt</a></h3><p>自动化工具，执行压缩、编译、单元测试、linting 等任务，均采用插件的形式，因此理论上你可以扩展任何功能。</p>\n<h3 id=\"2-3-Gulp\"><a href=\"#2-3-Gulp\" class=\"headerlink\" title=\"2.3. Gulp\"></a>2.3. <a href=\"http://gulpjs.com\" target=\"_blank\" rel=\"external\">Gulp</a></h3><p>和 Grunt 差不多，只是它利用 Node.js 流的威力减少频繁的 IO 操作。构建速度更快，刚出现的时候因为插件没有 Grunt 多，因此不推荐，现在它的插件也已经相当丰富了，个人首推的自动化工具。</p>\n<h2 id=\"3-模块化加载\"><a href=\"#3-模块化加载\" class=\"headerlink\" title=\"3. 模块化加载\"></a>3. 模块化加载</h2><h3 id=\"3-1-RequireJS\"><a href=\"#3-1-RequireJS\" class=\"headerlink\" title=\"3.1. RequireJS\"></a>3.1. <a href=\"http://requirejs.org\" target=\"_blank\" rel=\"external\">RequireJS</a></h3><p>老牌模块化加载工具，理念还是很不错的，如果关注 JS 模块化的话，这个框架很值得研究。然而实际使用中会觉得它还是太复杂了，而且造成的 JS 源文件碎片化问题解决起来很麻烦。新项目建议直接使用 webpack 做模块绑定。</p>\n<h3 id=\"3-2-SeaJS\"><a href=\"#3-2-SeaJS\" class=\"headerlink\" title=\"3.2. SeaJS\"></a>3.2. SeaJS</h3><p>在推广上强调 CMD 规范，以区别 RequireJS 的 AMD 规范。事实上现阶段的 RequireJS 涵盖了 SeaJS 的功能。个人感觉 SeaJS 最大的优势是其作为国产类库，文档、社区使用起来更方便。</p>\n<h2 id=\"4-模版\"><a href=\"#4-模版\" class=\"headerlink\" title=\"4. 模版\"></a>4. 模版</h2><p>模版的功能其实半斤八两，主要看项目特点、渲染性能及个人倾向。</p>\n<h3 id=\"4-1-swig\"><a href=\"#4-1-swig\" class=\"headerlink\" title=\"4.1. swig\"></a>4.1. <a href=\"http://paularmstrong.github.io/swig\" target=\"_blank\" rel=\"external\">swig</a></h3><p>这个博客目前使用的模版。Node.js 或客户端环境均可使用。</p>\n<h3 id=\"4-2-Jade-Pug\"><a href=\"#4-2-Jade-Pug\" class=\"headerlink\" title=\"4.2. Jade(Pug)\"></a>4.2. <a href=\"http://jade-lang.com\" target=\"_blank\" rel=\"external\">Jade(Pug)</a></h3><p>我最喜欢在 Node.js 环境中用它做服务端渲染。改名叫 Pug 了。它的语法我很难评论，有人爱有人恨，我起初也看着别扭，慢慢地感觉写起来挺舒服。</p>\n<h3 id=\"4-3-mustache-js\"><a href=\"#4-3-mustache-js\" class=\"headerlink\" title=\"4.3. mustache.js\"></a>4.3. <a href=\"https://github.com/janl/mustache.js\" target=\"_blank\" rel=\"external\">mustache.js</a></h3><p>非常小巧实用的模版引擎。</p>\n<h3 id=\"4-4-EJS\"><a href=\"#4-4-EJS\" class=\"headerlink\" title=\"4.4. EJS\"></a>4.4. <a href=\"http://ejs.co\" target=\"_blank\" rel=\"external\">EJS</a></h3><p>EJS， effective JS，也是个人用得比较多的模版，没什么特别要说的，性能、功能都 OK 。</p>\n<h2 id=\"5-实用工具类\"><a href=\"#5-实用工具类\" class=\"headerlink\" title=\"5. 实用工具类\"></a>5. 实用工具类</h2><h3 id=\"5-1-Sugar\"><a href=\"#5-1-Sugar\" class=\"headerlink\" title=\"5.1. Sugar\"></a>5.1. <a href=\"http://sugarjs.com\" target=\"_blank\" rel=\"external\">Sugar</a></h3><p>扩展原生对象的一个类库。其实就是对 <code>String</code>、<code>Array</code>、<code>RegExp</code> 等原生对象的方法做了扩展。这种直接扩展原生对象的方式已经不再被推荐，个人并不建议使用这个类库，除非你很清楚你的项目特点并在使用它时知道你在做些什么。</p>\n<h3 id=\"5-2-underscore\"><a href=\"#5-2-underscore\" class=\"headerlink\" title=\"5.2. underscore\"></a>5.2. <a href=\"http://underscorejs.org\" target=\"_blank\" rel=\"external\">underscore</a></h3><p>一个非常实用的 JavaScript 类库，采用函数式编程风格。遗憾的是一些常用的类库(如 jQuery)、框架中包含了该类库的部分功能，因此它在服务端 JS 中使用的更多。</p>\n<h3 id=\"5-3-lodash\"><a href=\"#5-3-lodash\" class=\"headerlink\" title=\"5.3. lodash\"></a>5.3. <a href=\"https://lodash.com\" target=\"_blank\" rel=\"external\">lodash</a></h3><p>一个实用的 JavaScript 工具类库。个人只在 Node.js 环境使用过，但它显然也支持浏览器端。</p>\n<h3 id=\"5-4-async\"><a href=\"#5-4-async\" class=\"headerlink\" title=\"5.4. async\"></a>5.4. <a href=\"http://caolan.github.io/async/\" target=\"_blank\" rel=\"external\">async</a></h3><p>主要提供编写异步 JavaScript 的工具函数，顺带提供了些操作集合的方法等。简单实用。</p>\n<h3 id=\"5-5-q\"><a href=\"#5-5-q\" class=\"headerlink\" title=\"5.5. q\"></a>5.5. <a href=\"http://documentup.com/kriskowal/q\" target=\"_blank\" rel=\"external\">q</a></h3><p>实现了 Promises 模式的类库，功能很强大，对模式的实现也很全面。</p>\n<h3 id=\"5-6-bluebird\"><a href=\"#5-6-bluebird\" class=\"headerlink\" title=\"5.6. bluebird\"></a>5.6. <a href=\"http://bluebirdjs.com/docs/getting-started.html\" target=\"_blank\" rel=\"external\">bluebird</a></h3><p>另一个实现了 Promises 模式的类库。性能很不错。我已从使用 <code>q</code> 转向了使用 <code>bluebird</code>。</p>\n<h3 id=\"5-7-when-js\"><a href=\"#5-7-when-js\" class=\"headerlink\" title=\"5.7. when.js\"></a>5.7. <a href=\"https://github.com/cujojs/when\" target=\"_blank\" rel=\"external\">when.js</a></h3><p>只实现了 Promises/A+ 模式。如果上面两个库显得有些大时，可以考虑使用这个（当然随着时间发展，它也可能变得很大）。另外你可以用它来充当 ES 6 Promises 模式的兼容性实现，让低版本的浏览器支持 ES 6 的这一特性。</p>\n<h3 id=\"5-8-webcomponents-js\"><a href=\"#5-8-webcomponents-js\" class=\"headerlink\" title=\"5.8. webcomponents.js\"></a>5.8. <a href=\"http://webcomponents.org/polyfills/\" target=\"_blank\" rel=\"external\">webcomponents.js</a></h3><p>用来支持 Web Components 规范的一套兼容方案。像 HTML 导入、Shadow DOM 等技术还是很新的，支持它们的浏览器很少，该类库提供了兼容方案，但也只限于 IE10+ 等，过于古老的浏览器实在别指望用 Web Components API .</p>\n<h2 id=\"6-测试\"><a href=\"#6-测试\" class=\"headerlink\" title=\"6. 测试\"></a>6. 测试</h2><h3 id=\"6-1-jasmine\"><a href=\"#6-1-jasmine\" class=\"headerlink\" title=\"6.1. jasmine\"></a>6.1. <a href=\"http://jasmine.github.io\" target=\"_blank\" rel=\"external\">jasmine</a></h3><p>测试框架用得不深入，jasmine 算是使用比较多的一个。在使用 AngularJS 做很好的业务代码分享前，真不知道前端 JS 代码怎么测。而且页面需求变化频率太高，维护测试代码的成本真的很高。</p>\n<h3 id=\"6-2-Mocha\"><a href=\"#6-2-Mocha\" class=\"headerlink\" title=\"6.2. Mocha\"></a>6.2. <a href=\"http://mochajs.org\" target=\"_blank\" rel=\"external\">Mocha</a></h3><p>很简略地在 Node.js 下用过，用来测几个“显然”没什么错误的核心函数。研究文档时感觉它挺不错的样子。有机会地话再深入学习吧。</p>\n<h2 id=\"7-UI-相关\"><a href=\"#7-UI-相关\" class=\"headerlink\" title=\"7. UI 相关\"></a>7. UI 相关</h2><h3 id=\"7-1-jQuery-插件\"><a href=\"#7-1-jQuery-插件\" class=\"headerlink\" title=\"7.1. jQuery 插件\"></a>7.1. jQuery 插件</h3><p>用过的 jQuery 插件太多了，不再罗列。自己也写过一些插件。另外，jQuery UI 真的不怎么样。使用 jQuery 插件开发界面的最大痛苦是，如果没有人懂得或愿意去阅读、修改下载下来的插件源码，用不了多长时间你的项目就会充斥着各种版本的 jQuery 库。</p>\n<p>其实下面有很多款框架、类库都是 jQuery 插件。</p>\n<h3 id=\"7-2-Bootstrap\"><a href=\"#7-2-Bootstrap\" class=\"headerlink\" title=\"7.2. Bootstrap\"></a>7.2. <a href=\"http://getbootstrap.com\" target=\"_blank\" rel=\"external\">Bootstrap</a></h3><p>目前最火的 mobile-first 响应式框架，没什么好说的，烂大街了。</p>\n<h3 id=\"7-3-Semantic-UI\"><a href=\"#7-3-Semantic-UI\" class=\"headerlink\" title=\"7.3. Semantic UI\"></a>7.3. <a href=\"http://semantic-ui.com\" target=\"_blank\" rel=\"external\">Semantic UI</a></h3><p>官方 Demo 挺漂亮的，可自己搭配它的组件时，远没有用 Bootstrap 好看，总觉得太浮夸。比较值得学习的是它的 CSS 设计思路，还有在写 jQuery 插件时的编码规范。</p>\n<h3 id=\"7-4-Foundation\"><a href=\"#7-4-Foundation\" class=\"headerlink\" title=\"7.4. Foundation\"></a>7.4. <a href=\"http://foundation.zurb.com\" target=\"_blank\" rel=\"external\">Foundation</a></h3><p>非常好用的老牌响应式前端框架，而且它一直保持着良好的更新速度，顺应时代的发展。不知道为什么在国内没那么火。</p>\n<h3 id=\"7-5-ExtJS\"><a href=\"#7-5-ExtJS\" class=\"headerlink\" title=\"7.5. ExtJS\"></a>7.5. <a href=\"https://www.sencha.com/products/extjs/#overview\" target=\"_blank\" rel=\"external\">ExtJS</a></h3><p>UI 组件非常丰富，可以做企业应用、各种复杂的后台管理界面。学习曲线漫长，源文件特别大。有一定经验的前端开发人员用起来还是比较快捷的，毕竟示例代码非常丰富。如果整个团队中没有一个 JavaScript 大牛，不建议使用，出个 Bug 你有可能一天都找不到原因。ExtJS 是一个完整的前端解决方案，用了它几乎不再需要任何其它的框架。</p>\n<p>另外，它收费，很贵。用熟了之后开发速度是很惊人的。但是，如果需要频繁做各种自定义页面效果，非常难、非常繁琐、非常耗时、非常容易出问题。</p>\n<h3 id=\"7-3-reveal-js\"><a href=\"#7-3-reveal-js\" class=\"headerlink\" title=\"7.3. reveal.js\"></a>7.3. <a href=\"http://lab.hakim.se/reveal-js/#/\" target=\"_blank\" rel=\"external\">reveal.js</a></h3><p>一个非常帅气的幻灯片框架，功能非常强大，可以用来做 Web 端的讲演稿。</p>\n<h2 id=\"8-Web-框架\"><a href=\"#8-Web-框架\" class=\"headerlink\" title=\"8. Web 框架\"></a>8. Web 框架</h2><p>该分类同时也包含各类 MVC/MVP/MVVM 框架，各类用来做应用架构、整合的框架。</p>\n<h3 id=\"8-1-Express\"><a href=\"#8-1-Express\" class=\"headerlink\" title=\"8.1. Express\"></a>8.1. <a href=\"http://expressjs.com\" target=\"_blank\" rel=\"external\">Express</a></h3><p>我心目中 Node.js 平台下最好用的 Web 框架，没有之一。能和它媲美的只有 <a href=\"http://koajs.com\" target=\"_blank\" rel=\"external\">Koa</a> 了，虽然 Koa 的理念更好一些，不过我个人更喜欢整合好的开箱即用的 Express ，毕竟它已经足够轻量级了。而且，我也会比较保守地选择更简单易懂的 Express 。</p>\n<h3 id=\"8-2-Ember-js\"><a href=\"#8-2-Ember-js\" class=\"headerlink\" title=\"8.2. Ember.js\"></a>8.2. <a href=\"http://emberjs.com\" target=\"_blank\" rel=\"external\">Ember.js</a></h3><p>相比 AngularJS ，我还是更看好这个框架的。</p>\n<h2 id=\"0-其它\"><a href=\"#0-其它\" class=\"headerlink\" title=\"0. 其它\"></a>0. 其它</h2>"},{"title":"《檀香刑》：血腥的音律","url":"http://zhangqiang.work/posts/719201607/","content":"<p>莫言常说自己是个“讲故事”的人。若是单从《檀香刑》来看，莫言的功力主要在“讲”，而“故事”本身委实平常。《檀香刑》讲得是“以 1900 年德国人在山东修建胶济铁路、袁世凯镇压山东义和团运动、八国联军攻陷北京、慈禧仓皇出逃为历史背景”的一场农民运动。笔墨的重点正如书名，是酷刑。</p>\n<p>这本书大约是 12 年底在西安买的。当时草草地翻阅了前面几章，并未细细品读。之后回到济南才有机会慢慢读。时隔一年多来写这篇读后感，静坐回想全书，反而更清楚此书真正给我留下印象之处为何——</p>\n<p>凌迟钱雄飞。</p>\n<p>我能够回想起的书中酷刑有三：腰斩、凌迟与檀香刑。初读腰斩便觉惊讶，而以凌迟最令人惊艳，檀香刑却被衬得有些平淡。会对凌迟的描写留下最深的印象并不稀奇。尤记得读这一章后，我选择放下书本，做了些别的事情（至于做了什么倒不记得了）以回复懑愤心怀。作者对整个凌迟过程的描写细致入微，使人仿佛听得到侩子手刀刀切入肌肉时的滋滋声。其行文紧凑、咄咄逼人，直把读者逼得快要窒息。我完全不知道如何形容这种感受，只有惊叹莫言笔力深厚的份，同时感喟自己却笨拙到连赞美这些文字的词藻都寻不出一二。</p>\n<blockquote>\n<p>他将手腕一抖，小刀子银光闪烁，那片扎在刀尖上的肉，便如一粒弹丸，嗖地飞起，飞到很高处，然后下落，如一粒沉重的鸟屎，啪唧一声，落在了一个黑脸士兵的头上。那士兵怪叫一声，脑袋上仿佛落上了一块砖头，身体摇晃不止。</p>\n<p>按照行里的说法，这第一片肉是谢天。</p>\n</blockquote>\n<p>又如：</p>\n<blockquote>\n<p>除了开始时的两刀，他发出了几声若有若无的呻吟之外，往后他就不出声息了。他抬头看看这个英武青年的脸。只见他头发直竖，双目圆睁，黑眼珠发蓝，白眼珠发红，鼻孔炸开，牙关紧咬，腮帮子上鼓起两条小老鼠般的肌肉。这副狰狞的面孔，着实让他暗暗地吃惊。他的捏着刀子的手，不由地酸麻起来。按照规矩，如果凌迟的是男犯，旋完了胸脯肉之后，接下来就应该旋去裆中之物。这地方要求三刀割尽，大小不必与其它部位的肉片大小一致。</p>\n</blockquote>\n<p>又如：</p>\n<blockquote>\n<p>在这关键的时刻，祖师爷的神灵保佑着他生出了灵感。他将小刀子叼在嘴里，双手提起一桶水，猛地泼到了钱的脸上。钱哑口了。趁着这机会，他伸手捏住了钱的喉咙，往死里捏，钱的脸憋成了猪肝颜色，那条紫色的舌头吐出唇外。赵甲一只手捏着钱的喉咙不敢松动，另一只手从嘴里拿下刀子，刀尖一抖，就将钱的舌头割了下来。这是个临时加上的节目，士兵队里，起了一片喧哗，仿佛潮水漫过了沙滩。</p>\n</blockquote>\n<p>令人可怕的是我在读这章时不断涌入脑海的画面感，那种少有的因为读文字而产生的完整的画面感。所有过程历历在目。最为可怕的是，读过这本书之后的某个时间，我在一些影像史料中看到了清朝凌迟的老照片，那感觉，竟和我阅读《檀香刑》时想象的画面惊人的一致。</p>\n<p>当然，若是此书只依赖写酷刑，便没了意味：</p>\n<blockquote>\n<p>师傅说他执刑数十年，杀人数千，才悟出一个道理：所有的人，都是两面兽，一面是仁义道德、三纲五常；一面是男盗女娼、嗜血纵欲。面对着被刀脔割着的美人身体，前来观刑的无论是正人君子还是节妇淑女，都被邪恶的趣味激动着。凌迟美女，是人间最惨烈凄美的表演。师傅说，观赏这表演的，其实比我们执刀的还要凶狠…她的身体已经皮肉无存，但她的脸还丝毫无损。只剩下最后的一刀了。师傅的心中一阵酸楚，剜了她一块心头肉。那块肉鲜红如枣，挑在刀尖上宛如宝石。</p>\n</blockquote>\n<p>又如：</p>\n<blockquote>\n<p>钱的双耳寂寞地躺在地上，宛如两扇灰白的贝壳。赵甲想起师傅说过，当年在菜市口凌迟那个绝代名妓时，切下她的玲珑的左耳，真是感到爱不释手，那耳垂上还挂着一只金耳环，环上镶嵌着一粒耀眼的珍珠。师傅说法律决不允许他把这只美丽的耳朵掖进自己的腰包，师傅只好把它无限惋惜地扔在地上。</p>\n<p>一群如痴如醉的观众，犹如汹涌的潮水，突破了监刑队的密集防线，扑了上来。疯狂的人群吓跑了吃人肉的凶禽和猛兽。他们要抢那只耳朵，也许是为了那只挂在耳垂上的金耳环。师傅见势不好，风快地旋下妓女的另外一只耳朵，用力地、夸张地甩到极远地方。疯狂的人群立刻分流。师傅真是聪明过人啊！</p>\n</blockquote>\n<p>从结构上看，《檀香刑》更是华美到近乎炫技——全篇分凤头、猪肚、豹尾三部。鲜见有作者敢如此直接地架构自己的文章，而莫言确实也用文笔支撑起了这样的架构。不过，在我看来，猪肚部稍显啰嗦，至少在“故事”上，猪肚部的推进太过缓慢，几乎无悬念，除了引入戊戌六君子的事件，大多内容只是对凤头里故事的深入阐述，情节推进感并不强烈。当然，莫言用他犀利的文字填补了故事情节薄弱的问题，因而读得时候未必觉出，只是过后回想，会生出这么一种感受。</p>\n<p>另外，《檀香刑》在叙事上采用多视角叙事，尽管比传统的第三人称叙事处理起来麻烦些，倒不算什么新奇的手法。莫言也完成的很好，几个主要人物刻画得比较饱满。</p>\n"},{"title":"《幸福的小诗》、《择日而生》","url":"http://zhangqiang.work/posts/627201606/","content":"<p>这篇文，用来收录两首在西安写的小诗，避免遗失。</p>\n<h2 id=\"幸福的小诗\"><a href=\"#幸福的小诗\" class=\"headerlink\" title=\"幸福的小诗\"></a>幸福的小诗</h2><p>我的幸福<br>只是一个小小的魔方<br>里面 是你的心事</p>\n<p>当我想解开它<br>开始 是智慧<br>后来 是习惯</p>\n<p>仿佛智慧很简单<br>像是最开始<br>习惯了便忘记了最初的幸福</p>\n<p>最初 本像这首简单的小诗<br>幸福得像甜蜜的歌词<br>没有韵律<br>没有朦胧的后现代</p>\n<p>我的幸福的小诗<br>只是一个小小的魔方<br>复原了又打乱的魔方</p>\n<p>开始 有你<br>后来 有你真好</p>\n<p>2013.5.5 西安</p>\n<h2 id=\"择日而生\"><a href=\"#择日而生\" class=\"headerlink\" title=\"择日而生\"></a>择日而生</h2><p>我 在这里<br>为什么<br>为了什么<br>难道要葬身在他乡的世界末日</p>\n<p>轻浮的风还在笑<br>印着那赤裸的<br>红色的<br>血色的<br>唇<br>祭奠那一双双一双双手的离逝</p>\n<p>无非是醒时的梦<br>镌刻了不可名状的形</p>\n<p>愤懑的荒草会否扯碎那只和平的蟹子<br>后来<br>梦中的羊群抬起月光下的蹄子</p>\n<p>闷<br>有一点吧<br>毕竟我还在这里</p>\n<p>2012.10.13  西安</p>\n"},{"title":"(转) 如何为不同年龄的孩子进行性教育","url":"http://zhangqiang.work/posts/624201606/","content":"<p>孩子的性教育，其实并不是给孩子上一堂课。孩子的性教育是一个连续动态的过程，性教育的内容会随着孩子年龄的增加和理解能力的增强而变化 。在日常生活中，为孩子正确解答性相关问题，根据年龄传递正确两性知识便是家庭性教育的重要部分。 这篇长文希望与大家分享一下澳洲对于如何为不同年龄年龄的孩子进行性教育的相关信息。</p>\n<p><img src=\"/images/others/sex.jpg\" alt=\"sex\"></p>\n<p><strong>家庭性教育需要注意的基本方式和方法</strong></p>\n<p>孩子的性教育应该及早进行，并且在日常生活中潜移默化的进行。</p>\n<p>与学步，学说话一样，幼儿在很早便会开始学习认识自己的身体部位。当孩子指着自己的，或者绘本上的某个性器官问是什么，家长告诉孩子正确的名字，这便是最原始的性教育。其实，在最早期的性教育，家长传递的最重要信息是：愿意与孩子坦诚的，自然的谈论性知识，从而避免孩子对性或者性行为产生害怕或者羞愧等负面感受。</p>\n<p>为孩子传递性或者性行为相关信息时，我们首先应该了解孩子已经懂了哪些以及有多少理解能力。比如通过反问或者提问的方式，观察孩子的理解能力和了解程度。另外，孩子的性教育不仅仅是传递新的知识，我们还应该注意为孩子纠正一些不正确的性知识。比如，如果孩子说小宝宝是从垃圾堆里捡来的，那么对这样的认知，需要及时的给予纠正。</p>\n<p>与孩子讨论性知识时，我们应该尽量注意选择简单并且符合孩子年龄的正确词汇，避免使用代称，或者自己编造的名称。当孩子问的一些问题，我们一时答不上来，或者不知道怎么答才最合适的时候，我们可以坦诚的告诉孩子现在还不知道答案，但是会去查一下，然后再告诉，而不是慌张掩饰跳过或者传递不正确的知识。</p>\n<p>当孩子向我们提出性相关问题时，我们应当及时作出鼓励和肯定，从而更好的促进家庭性教育的进行。另外，我们自己的心理上也可能需要一定的准备。比如，与孩子谈论性知识的时候，觉得不适应或者尴尬等心理感受是十分正常的，我们需要一个自我适应和探索的过程。平时多多注意和思考，摸索出一个自己觉得舒适的方式来与孩子谈论性知识十分关键。比如，有些家长觉得借助绘本可以很好的帮助理解和缓解尴尬感受。</p>\n<p><strong>如何为不同年龄的孩子进行性教育</strong></p>\n<p><code>0-2岁</code></p>\n<p>【虽然宝宝还很小，但是我们可以尝试使用正确的词汇为宝宝介绍身体部位】</p>\n<p>在日常生活中，比如洗澡时，穿衣时，使用正确的词汇为孩子介绍身体部位。比如：外阴，阴道，乳房，乳头，阴茎，阴囊，睾丸。为孩子讲解身体部位时，应尽量避免使用代称或者自己编撰的词汇。</p>\n<p><code>2-3岁</code></p>\n<p>【孩子开始慢慢注意到男女性别的差异了】</p>\n<p>2-3岁的孩子会对自己和其他孩子的身体部位十分好奇，也开始慢慢注意到男女差别。</p>\n<p>我们可以为孩子介绍身体部位以及每个身体部位的功能。介绍身体部位时也可以借助相关绘本，从而更好的帮助孩子辨认身体部位和男女的差别。比如告诉孩子：男宝宝的是阴茎，女宝宝的是外阴。</p>\n<p><code>4-5岁</code></p>\n<p>【常常询问小宝宝是哪里来的】</p>\n<p>这个年纪的孩子能够听懂：一个精子（类似一颗很小的种子）和一个卵子（类似一颗很小的蛋）结合了，然后慢慢长大，就成了一个小宝宝；小宝宝需要在妈妈身体里一个叫子宫的地方生长。</p>\n<p>如果孩子问：我是从哪里来的；家长可以尝试先反问：你觉得呢？这个反问可以帮助家长了解孩子的理解程度，以及他们真正关心的和想问的问题是什么。</p>\n<p>为孩子解答时应该尽量简单，比如：</p>\n<p>问：小宝宝是哪里来的？答：小宝宝在他们妈妈的身体里长大，养育小宝宝的地方叫子宫。</p>\n<p>问：小宝宝是怎么生出来的？答：小宝宝在他们妈妈的子宫里长大成熟之后，就会从他们妈妈的身体里钻出来，钻出来的地方叫阴道。</p>\n<p><code>6-8岁</code></p>\n<p>【这个年纪的孩子会希望了解小宝宝是怎么产生的】</p>\n<p>如果孩子问：小宝宝是怎么进入妈妈的子宫里生长的？我们仍然可以尝试先反问孩子他们是怎么认为的，这样我们可以知道孩子已经懂了多少。</p>\n<p>我们回答时，仍然应该尽量简单，比如：要造一个小宝宝，需要男人提供的精子与女人提供的卵子结合在一起。我们觉得讲这些不太适应或者不知道怎么表述更加贴切，那么通过与孩子一起阅读的相关书本来传递性知识。另外，其实我们不需要总是等待孩子问我们了，再尝试去回答。我们其实也可以主动问孩子。比如，你知道小宝宝是怎么产生的吗？小宝宝是怎么样进入到他们妈妈的身体里生长的吗？</p>\n<p><a href=\"http://weibo.com/ttarticle/p/show?id=2309403989527801793079\" target=\"_blank\" rel=\"external\">- 原文链接点这里 -</a></p>\n"},{"title":"《文学理论教程》学习笔记","url":"http://zhangqiang.work/posts/620201606/","content":"<p>常常有这样一种困惑：读了一本书，觉得写得不错，却说不出好在哪里。于是决定系统地学一学文学知识。开始看宝哥推荐的第一本专业书。学校的教材通常是很枯燥的，好在接受过多年的填鸭教育，倒也习惯这本书的编排方式及书写风格。做一做笔记，希望能有所收获。</p>\n<p>【阅读时间 2016年6月20日 - 6月29日】</p>\n<hr>\n<h2 id=\"导论\"><a href=\"#导论\" class=\"headerlink\" title=\"导论\"></a>导论</h2><h3 id=\"1-文学理论的性质和形态\"><a href=\"#1-文学理论的性质和形态\" class=\"headerlink\" title=\"1. 文学理论的性质和形态\"></a>1. 文学理论的性质和形态</h3><p><strong>文艺学：</strong> 研究文学及其规律的学科。三个分支：</p>\n<ul>\n<li>文学理论</li>\n<li>文学批评</li>\n<li>文学史</li>\n</ul>\n<p><strong>文学理论</strong>侧重于研究文学中带一般性的普遍的规律，力图指导、制约其它分支的研究，但它本身又必须建立在对特殊的具体的作品、作家和文学现的研究基础上。其<strong>任务</strong>一般包含五个方面：</p>\n<ul>\n<li>文学活动论</li>\n<li>文学活动本质论</li>\n<li>文学创作论</li>\n<li>文学作品构成论</li>\n<li>文学接受论</li>\n</ul>\n<p>文学理论把握的是<strong>四要素</strong>构成的整体活动及其流动过程和反馈过程：</p>\n<ul>\n<li>世界</li>\n<li>读者</li>\n<li>作家</li>\n<li>作品</li>\n</ul>\n<p>文学理论研究的认识客体：<strong>文学活动</strong>。它在意向上可理解为两个过程：</p>\n<ul>\n<li>文学创作 –&gt; 文学作品 –&gt; 文学接受</li>\n<li>文学创作 –&gt; 艺术价值 –&gt; 文学消费</li>\n</ul>\n<p>文学理论的<strong>基本形态</strong>是：</p>\n<ul>\n<li>文学哲学</li>\n<li>文学社会学</li>\n<li>文学心理学</li>\n<li>文学符号学</li>\n<li>文学价值学</li>\n<li>文学信息学</li>\n<li>文学文化学</li>\n</ul>\n<h3 id=\"2-文学理论建设\"><a href=\"#2-文学理论建设\" class=\"headerlink\" title=\"2. 文学理论建设\"></a>2. 文学理论建设</h3><p>马克思主义文论的五个基本观念：</p>\n<ol>\n<li><strong>文学活动论</strong> 人的活动是人的本质力量的“对象化”；文学艺术是人的精神性生活活动，也是人的本质力量的对象化；文学是“人学”。 </li>\n<li><strong>文学反映论</strong> 文学作为意识形态是社会存在的反映。</li>\n<li><strong>艺术生产论</strong> 艺术生产指实际的艺术创作过程；只有产品进入资本运作过程中，作家的劳动才是艺术生产。</li>\n<li><strong>文学审美意识形态论</strong> 文学是上层建筑中的一种社会意识形态；特殊性的一面：文学的审美特征。</li>\n<li><strong>艺术交往论</strong></li>\n</ol>\n<h2 id=\"文学活动\"><a href=\"#文学活动\" class=\"headerlink\" title=\"文学活动\"></a>文学活动</h2><p><strong>文学活动</strong>是人所从事的文学创作、接受、批评等活动的总称。</p>\n<p><strong>文学活动的发生</strong>：</p>\n<ol>\n<li>巫术发生说（英国人类学家弗雷泽，《金枝》）；</li>\n<li>宗教发生说；</li>\n<li>游戏发生说（德国哲学家康德）；</li>\n<li>劳动说。</li>\n</ol>\n<h3 id=\"3-文学活动的构成\"><a href=\"#3-文学活动的构成\" class=\"headerlink\" title=\"3. 文学活动的构成\"></a>3. 文学活动的构成</h3><h4 id=\"3-1-世界\"><a href=\"#3-1-世界\" class=\"headerlink\" title=\"3.1. 世界\"></a>3.1. 世界</h4><p>文学活动所反映的客观世界（包括自然万物与社会的历史与现实）、主观世界（人的思想情感宗教信仰）。<br><code>文艺摹仿说</code> 文艺起源于人对宇宙事物或世界的摹仿。文艺摹仿说起初是在人对动物行为的摹仿上来立论的。</p>\n<h4 id=\"3-2-作者\"><a href=\"#3-2-作者\" class=\"headerlink\" title=\"3.2. 作者\"></a>3.2. 作者</h4><p><strong>1）中国</strong><br>文学作品是由作者创造的思想：</p>\n<ul>\n<li>《尚书·尧典》中的“诗言志”</li>\n<li>《毛诗序》中的“诗者，志之所之也，在心为志，发言为诗”</li>\n<li>《荀子·乐论》中的“夫乐者，乐也，人情之所必不免也” </li>\n<li>白居易《与元九书》：诗可“补察时政”，“泄导人情”；“感伤诗”是“有事物牵于外，情理动于内，随感遇而形于叹咏者。”  </li>\n</ul>\n<p><strong>2）西方</strong><br><code>表现论</code> 文学强调文学与作者的联系，进而强调作品表现功能。与 <code>模仿论</code> 有三个<strong>区别</strong>：</p>\n<ol>\n<li>在文学本质论上突出作者的决定作用。模仿论认定文学是世界的反映，表现论认定文学是作者心灵的表现；</li>\n<li>表现论强调作者对作品意义的生成作用，模仿论更强调了解作品所描写的世界和写作背景；</li>\n<li>表现论将文学创作同科学研究等活动对立起来，模仿论强调文学创作应遵循的客观规律。</li>\n</ol>\n<blockquote>\n<p>“一个艺术家表现的是情感，但并不是像一个大发牢骚的政治家或是像一个正在大哭或大笑的儿童所表现出来的情感。艺术家将那些正常人看来混乱不整和隐蔽的现实变成了可见的形式，这就是将主观领域客观化的过程。” —— 苏珊·朗格</p>\n</blockquote>\n<h4 id=\"3-3-作品\"><a href=\"#3-3-作品\" class=\"headerlink\" title=\"3.3. 作品\"></a>3.3. 作品</h4><p>作品与现实的差异体现了艺术描写的长处：可以超越事物的本真形态，去创造更具有普遍性的、更深层的意蕴。这便引出<strong>作品与形式的关系</strong>问题：</p>\n<ul>\n<li><code>俄国形式主义</code> 认为：文学的本质在于文学的形式，文学研究的对象是作品的形式价值，是“文学性”。提出 <code>陌生化</code> 概念，强调作品语言与现实之间的距离，认为文学创作的过程就是通过“扭曲”的语言使现实生活变得陌生化的过程。</li>\n<li><code>英美新批评</code> 也强调文学作品的本体地位。兰塞姆提出了 <code>文学本体论</code> ，认为文学活动的本体在于文学作品而不是外在的世界或作者。作为本体的作品，仅仅指作品形式（隐喻、复义、语境、反讽等语言学或修辞学因素）。</li>\n<li><code>结构主义</code> 对作品进行整体的模式研究，追踪作品的“深层结构”；注重二元对立（共时与历时/横组合关系与纵组合关系/ 语言与言语/代码与信息/能指与所指/秩序与序列等）的分析方法。</li>\n</ul>\n<h4 id=\"3-4-读者\"><a href=\"#3-4-读者\" class=\"headerlink\" title=\"3.4. 读者\"></a>3.4. 读者</h4><p>读者再创造：读者在自己的生活经验、文化修养基本上，使作品在头脑中具体化的活动。</p>\n<p><code>接受美学</code> 创始人姚斯认为：</p>\n<blockquote>\n<p>“一部文学作品并不是一个自身独立、向每一时代的每一读者均提供同样的观点的客体。它不是一尊纪念碑，形而上学地展示其超时代的本质。它更多地像一部管弦乐谱，在其演奏中不断获得读者新的反响，使文本从词的物质形态中解放出来，成为一种当代的存在。”  </p>\n</blockquote>\n<p>伊瑟尔提出 <code>隐含的读者</code> 概念，开启由接受研究向效应研究的内在转变：作家在从事创作的时候，都已设定了阅读对象，这些对象需要用作品中的空白结构去召唤。</p>\n<h3 id=\"4-文学活动的审美意识形态性质\"><a href=\"#4-文学活动的审美意识形态性质\" class=\"headerlink\" title=\"4. 文学活动的审美意识形态性质\"></a>4. 文学活动的审美意识形态性质</h3><p><strong>广义文学</strong>是指一切口头或书面语言行为和作品，包括今天的文学以及政治、哲学、历史、宗教等一般文化形态。<strong>狭义文学</strong>才是指今日通行的文学，即包含情感、虚构和想象等综合因素的语言艺术行为和作品，如诗歌、小说、散文、剧本等文类。</p>\n<h4 id=\"4-1-文学的含义\"><a href=\"#4-1-文学的含义\" class=\"headerlink\" title=\"4.1. 文学的含义\"></a>4.1. 文学的含义</h4><p><strong>文化含义</strong><br>在中国魏晋以前和西方18世纪之前，文学通常被作为一般文化形态即广义文学看待。<br>魏晋前，文学泛指一切文章；<br>“文学”一词最早出现在《论语》：文学、德行、言语、政事为 <code>孔门四科</code> ；</p>\n<p><strong>审美含义</strong><br>文学的审美含义指具有审美属性的语言行为及其作品，包括诗、散文、小说、剧本等。<br>狭义文学从广义文学分离、独立出来。<br>魏晋时期，宋文帝 <code>四学</code> ：儒学、玄学、史学、文学，文史正式分家。</p>\n<p><strong>通行含义</strong><br>文学是一门艺术，是主要表现人类审美属性的语言艺术，包括诗歌、小说、散文、剧本等文类。</p>\n<h4 id=\"4-2-文学的审美意识形态\"><a href=\"#4-2-文学的审美意识形态\" class=\"headerlink\" title=\"4.2. 文学的审美意识形态\"></a>4.2. 文学的审美意识形态</h4><p><strong>1）文学作为一般意识形态</strong></p>\n<p>社会结构由两个基本层面构成：</p>\n<ul>\n<li><strong>经济基础</strong>是与一定的物质生产力相适应的、由社会关系的总和构成的、社会赖以生存和发展的现实物质基础。</li>\n<li><strong>上层建筑</strong>是由经济基础影响和制约的各种制度及情感、信念、幻想、思想方式和世界观的总和。包括两个层面：一是政治、法律制度；二是社会意识形态（哲学、宗教、艺术等）。</li>\n</ul>\n<p>文学作为意识形态，最终决定于社会的经济基础，同时又与其是间接的有距离的。</p>\n<p><strong>2）文学作为审美意识形态</strong></p>\n<p><strong>审美意识形态</strong>指与现实社会生活密切缠绕的审美表现领域，其集中形态是文学、音乐、戏剧、绘画、雕塑等艺术活动。文学作为审美意识形态，看起来只是一次远离社会生活的个体审美事件，但归根到底总是与某种思想、观念、意识联系在一起的。文学的审美表现过程与意识形态相互浸染、彼此渗透的状况。</p>\n<p>文学的审美意识形态属性的表现：</p>\n<ol>\n<li>无功利与功利。文学直接地是无功利的，但间接地或内在地又隐伏着某种功利性(interestedness)；<br>作为再现现实社会生活的话语结构，文学把审美无功利性仅仅当做实现其再现社会生活这一功利目的的特殊手段；</li>\n<li>形象与理性。形象（这里指艺术形象）是由文学的文本结构所呈现的富于意义的审美感性形态，它是文学的特有存在方式；理性是由概念、判断和推理等所构成的思维过程，与形象方式相对；形象成为文学的直接存在方式，形象又依赖于理性的力量；艺术形象本身蕴含着某种理性；理性使艺术形象服务于特定时代的人类生活；</li>\n<li>情感与认识。文学不仅表达主观情感评价，而且也表达客观理智认识；文学作为审美意识形态，必然包含认识因素；</li>\n</ol>\n<h4 id=\"4-3-文学的话语蕴藉属性\"><a href=\"#4-3-文学的话语蕴藉属性\" class=\"headerlink\" title=\"4.3. 文学的话语蕴藉属性\"></a>4.3. 文学的话语蕴藉属性</h4><p>瑞士语言学家索绪尔：语言区分为语言系统（langue，或译语言、语言结构）和言语（parole）两种成分，前者指社会普遍性语法系统，后者指个人的实际语言行为。</p>\n<p>法家思想家福柯：话语指语言结构与言语结合而形成的更丰富和复杂的具体社会形态，是指与社会权力关系相互缠绕的具体言语方式。</p>\n<p><strong>文学是一种话语</strong>。话语是特定社会语境中人与人之间从事沟通的具体言语行为，即一定的说话人与受话人之间在特定社会语境中通过文本而展开的沟通活动，包括说话人、受话人、文本、沟通、语境等要素。</p>\n<p>文学作为话语，具有<strong>“蕴藉”</strong>特点。“蕴”原意是积聚、收藏，引申而为含义深奥；“藉”原义是草垫，有依托之义，引申而为含蓄。文学以一定的话语形态去蕴含多重复杂意义，或把多重复杂意义蕴含在一定的话语形态之中。话语蕴藉指文学活动的蕴蓄深厚而又余味深长的语言与意义状况；文学作为话语蕴藉：1. 整个文学活动带有话语蕴藉属性。2. 被创造出来以供阅读的特定文本带有话语蕴藉属性；</p>\n<p>文学的话语蕴藉常体现在两种文本修辞形态中：</p>\n<ul>\n<li><strong>含蓄。</strong>在有限的话语中隐含或蕴蓄仿佛无限的意味，使读者从有限中体味无限。含蓄突出表达上的“小”中蓄“大”；</li>\n<li><strong>含混。</strong>看似单义而确定的话语蕴蓄多重不确定意义，令读者回味无穷。含混偏重阐释上的“一”中生“多”。</li>\n</ul>\n<p><strong>文学的定义：文学是一种语言艺术，是话语蕴藉中的审美意识形态。</strong></p>\n<h2 id=\"文学创造\"><a href=\"#文学创造\" class=\"headerlink\" title=\"文学创造\"></a>文学创造</h2><h3 id=\"5-创造的主体与客体\"><a href=\"#5-创造的主体与客体\" class=\"headerlink\" title=\"5. 创造的主体与客体\"></a>5. 创造的主体与客体</h3><p><strong>1）客体</strong></p>\n<p><code>客体即“自然”说</code> 认为文学的客体是独立于人之外的自然。最初确立这种观念的是古希腊人，集中体现在“艺术摹仿自然”的艺术观中，代表人物德谟克利特、亚里斯多德等。在中国主要体现在《易经》的“象天法地”：“古者包牺氏之王天下也，仰则观象于天，俯则观发于地”。该学说有一定的真理性，但其“自然”是指自然界还是社会生活还不定。</p>\n<p><code>客体即“情感”说</code> 认为文学是人的内心世界的表现，文学客体即人的心灵。主要盛行于18世纪的启蒙主义、感伤主义和19世纪浪漫主义思潮。代表人物：华兹华斯、雪莱等。</p>\n<p><code>客体即“原始意象”说</code> 弗洛伊德把有原欲所形成的“个体无意识”确定为艺术表现的客体。瑞士心理学家荣格在此基础上提出了“集体无意识”的概念，并退而广之认为人类文化包括文学都是“集体无意识”即“原始意象”的呈现。这样，他把艺术的客体归结为“原始意象”。</p>\n<blockquote>\n<p><strong>原始意象</strong> 是“人类远古的深层集体无意识”，是自远古人类在生活中形成的、并且世代遗传下来的深层心理经验，是一种亘古绵延、无处不在、四处渗透的最深远、最古老、最普遍的人类思想，即人类精神本体。</p>\n</blockquote>\n<p><strong>社会生活是文学创造的客体和惟一源泉。</strong></p>\n<p><strong>2）主体</strong></p>\n<p>文学创造的主体是作家、诗人。</p>\n<p>文学创造的主体的种种解释：</p>\n<p><code>主体即“模仿者”与“创造者”</code> 代表人物：赫拉克利特、德谟克里特、柏拉图、亚里士多德、阿尔伯蒂、达·芬奇、锡德尼、狄德罗 ，这一学说本身含有轻视主体创造性的色彩。</p>\n<p><code>主体即“旁观者”</code> 这一说法指出了艺术家在创作中的非功利心理状态，有一定道理，但走向了极端。</p>\n<blockquote>\n<p>“生活就像一场体育竞赛，有些人充当角力士，还有些人成为调停者，而最好的位置却是旁观者。”  —— 毕达哥拉斯</p>\n</blockquote>\n<p><code>主体即“移情者”</code> 代表人物：费舍尔父子、立普斯、伏尔盖特(J.Volket) </p>\n<blockquote>\n<p>人们在对周围世界进行审美观照时，不是主观地被动感受，而是自我意识、自我感情以至整个人格的主动移入；而通过“移入”使对象人情化，达到物我同一，“非我”的对象成为“自我”的象征，自我从对象中看到自己，获得自我的欣赏，从而产生美感。审美主体包括艺术家就是移情者。 —— 立普斯</p>\n</blockquote>\n<p><code>主体即“集体人”</code> 荣格认为，艺术的真正本体是原始意象，只有超个体、属于全人类的“集体人”才能瞥见它。这个“集体人”是一个体现着整个人类集体无意识的精神生活的人。</p>\n<p><strong>文学创造的主体是艺术生产活动中的艺术生产者，是美的体验者、评价者和创造者，是具体的社会人。</strong></p>\n<h3 id=\"6-创造过程\"><a href=\"#6-创造过程\" class=\"headerlink\" title=\"6. 创造过程\"></a>6. 创造过程</h3><p>文学创造，是一种旨在创造新的意识形态话语系统的艺术生产活动。</p>\n<h4 id=\"6-1-发生阶段\"><a href=\"#6-1-发生阶段\" class=\"headerlink\" title=\"6.1. 发生阶段\"></a>6.1. 发生阶段</h4><p>分为三个环节：</p>\n<ol>\n<li>材料储备<br>文学材料是指作家有生以来从社会生活中有意接受或无意获得，因而具有主体性的一切生动、丰富但却相对粗糙的刺激或信息。</li>\n<li>艺术发现<br>作家被内在积累的材料所引发，并与主体当前由于某种“关注”而形成的心理趋向、优势兴奋中心相联系，突然间向外在事物、事件、现象的投射。</li>\n<li>创作动机<br>驱使作家投入文学创造活动的一股内在动力，对整个创作过程起支配作用的或隐或显的意图（或意念）。</li>\n</ol>\n<h4 id=\"6-2-构思阶段\"><a href=\"#6-2-构思阶段\" class=\"headerlink\" title=\"6.2. 构思阶段\"></a>6.2. 构思阶段</h4><p><strong>艺术构思</strong>是作家在材料积累和艺术发现的基础上，在某种创作动机的驱动下，通过回忆、想像、情感等心理活动，以各种艺术构思方式，孕育出完整的、呼之欲出的形象序列和中心意念的艺术思维过程。</p>\n<p>艺术构思的<strong>心理机制</strong>：</p>\n<ul>\n<li>回忆与沉思。回忆：积极地和有意义地从记忆中提取信息；<br>沉思：在寂静和孤独中对心中的某个形象或某种意念的深沉思索。</li>\n<li>想像与联想。想像：把过去经验的记忆和先前形成的心中之象在某种新刺激下重新合成一个新结构的过程。联想：由此形象出发，瞬间涉及彼形象，在延展中所思索的形象不断变化的心理活动过程。</li>\n<li>灵感与直觉。灵感：创造性思维过程中认识发生飞跃的心理现象，其外在形态是对问题突如其来的顿悟。直觉：省略了推理过程而对事物的底蕴或本质作出的直接了解和揭示。</li>\n<li>理智与感情。理智：作家心理中有意识的、理性的认知。感情：分为情绪和情感，前者指由有机体生物需要是否获得满足而产生的生理与心理反应，后者指作家对外在事物或现象的态度、评价及其体验。</li>\n<li>意识与无意识。意识：作家以清晰的理智有意地调动、分析和综合材料，使之成为有机的能表达意义的整体作品的心理能力。无意识：指潜伏于作家意识之下的、有活力的，但却因受到某种压抑而未进入意识的一些观念和心理能力。</li>\n</ul>\n<p><strong>构思方式</strong>是作家在艺术构思中塑造形象，发展、完善意念，并建构作品整体的具体方式。</p>\n<p>几种构思方式：</p>\n<ul>\n<li>综合。围绕某种中心意念，以心智的功能加工、改造许多旧材料，使之糅合成一个能够体现自己意图的完整的有机的艺术形象的构思过程。</li>\n<li>突出和简化。</li>\n<li>变形与陌生化。变形：作家在构思中极大地调动想像力与创造力，以违反常规事理创造形象的方式。陌生化：以作者或人物似乎都未见过此事物，以陌生的眼光描写，以消解“套板反应”，使读者产生某种新奇感的构思方式 。</li>\n</ul>\n<h4 id=\"6-3-物化阶段\"><a href=\"#6-3-物化阶段\" class=\"headerlink\" title=\"6.3. 物化阶段\"></a>6.3. 物化阶段</h4><p><strong>物化阶段</strong>是作家将在构思成熟的形象和意念，转换为语言、文字等符号，并固定在纸张上，使其成为物质性的文本，成为可以流通和消费的意识形态话语系统的阶段。</p>\n<p><strong>1. “形之于心”到“形之于手”</strong><br>含义：作家把心中经过艺术构思已初步成熟的“形象”(包括意念)，转化为语言、文字等符号，再用“手”写出来，落到纸张上。<br>常见问题：1) 创作意图有时不适应人物性格发展逻辑；2) 作家创作动机的中途转换。</p>\n<p><strong>2. 语词提炼与技巧运用</strong></p>\n<ul>\n<li>语词提炼<br>含义：寻找最准确的语言、文字把艺术构思中已初步成熟的形象、意念准确、鲜明而生动地呈现出来。范围：形象和意念的物化、语调的选择、结构的妥帖、风格的和谐。</li>\n<li>技巧运用<br>含义：巧妙采用各种写作手法，例如肖像、行动、心理的描写，顺叙、倒叙、插叙的安排，烘托、对比的运用。运用原则：为物化心象的内在物理（事物本质、规律的内在规定性）服务；为作家通过心象所要表达的中心意念服务。</li>\n</ul>\n<p><strong>3. 即兴与推敲</strong></p>\n<ul>\n<li>即兴<br>含义：作家因受某一外在刺激或内在冲动的作用，兴会来临，在文字操作过程中迅速地创造出某作品的状况。产生：需要足够的材料储备和情感积累；要有气氛和契机；作家综合心力的集中爆发，长久酝酿的产物。和作家所禀受的天赋、气质等先天因素以及后天所掌握的本领、技巧有关。</li>\n<li>推敲<br>含义：作家在语言文字操作过程中反复选择单词、调动语序，以求准确、妥帖地把形象或意念具体化的操作手段。范围：词句的精选，细节的提炼，人物的安排，章节的转换，意境的合成等。</li>\n</ul>\n<h3 id=\"7-创造原则\"><a href=\"#7-创造原则\" class=\"headerlink\" title=\"7. 创造原则\"></a>7. 创造原则</h3><p>文学作为认识活动，以内在尺度创造艺术真实，要义是求“真”，体现为“历史理性”。作为审美活动，文学创作情感地评价对象，核心是尚“善”，体现为“人文关怀”。最终，文学创造还要按照美的规律进行形式创造，为情感评价所把握的艺术真实“造形”，使之成为艺术文本，境界是呈“美”，体现为“文体升华”。</p>\n<h4 id=\"7-1-艺术真实\"><a href=\"#7-1-艺术真实\" class=\"headerlink\" title=\"7.1. 艺术真实\"></a>7.1. 艺术真实</h4><p>艺术真实的主要特征：</p>\n<ol>\n<li>与生活真实不同，艺术真实以假定性情境表现对社会生活内蕴的认识和感悟；</li>\n<li>与科学真实不同，艺术真实对客体世界的反映具有主观性和诗艺性。</li>\n</ol>\n<p><strong>艺术概括</strong>指作家以主体的审美价值追求能动介入方式，对富有特征的事物给予独特艺术处理，创造具有鲜明的独特个性，体现着一定审美价值取向的艺术形象的方法。</p>\n<p>艺术概括的规律：对富有特征的具体事物的观照和描述中，实现“个别”与“一般”的统一。</p>\n<p><code>类型化</code> 主张最早可以追溯到古罗马饿贺拉斯，他以不同年龄的人各有自己的性格特点为例，强调文学应该描绘同类人的共性。后来的 <code>批判现实主义</code> 也强调这一创作方法，它与技术概括的主要区别是前者把“心从感官那里抽开来”，“飞腾到普遍性相”，后者“把整个心沉没在感官里”，“沉没到个别事例里去。”</p>\n<p><code>自然主义</code> 作为一种文艺思潮出现在19世纪后半叶，代表人物是法国作家龚古尔兄弟和左拉，他们强调纯客观地再现生活真实，主张作家应该像医生那样对人生作直接的观察和精确的解剖。</p>\n<h4 id=\"7-2-情感评价\"><a href=\"#7-2-情感评价\" class=\"headerlink\" title=\"7.2. 情感评价\"></a>7.2. 情感评价</h4><p>文学创造作为一种审美活动是对社会生活的情感把握。情感评价是文学创造的本质属性。</p>\n<h4 id=\"7-3-形式创造\"><a href=\"#7-3-形式创造\" class=\"headerlink\" title=\"7.3. 形式创造\"></a>7.3. 形式创造</h4><p>文学的精神价值的理想：历史理性、人文关怀和文体升华三者之间保持张力和平衡。文学的形式和内容是两个实体，活在一起。艺术的形式与内容不可分割。形式创造是建立在形式与内容关系基础上的互动过程。</p>\n<ul>\n<li>重内容轻形式。传统文论：“文以载道”，“言之有物”；西欧古典文论：<code>再现说</code> 、<code>表现说</code></li>\n<li>形式主义。 <code>俄国形式主义</code> 、 <code>捷克与法国的结构主义</code> 、 <code>英美“新批评”派</code></li>\n</ul>\n<p><strong>形式美</strong>是美学的一个重要范畴。英国批评家克莱夫·贝尔提出 <code>有意味的形式</code> ，指出作品的各部分、各素质之间的独特方式的排列、组合起来的“形式”是“有意味”的，它主宰着作品，能够唤起人们的审美情感。</p>\n<h2 id=\"文学作品\"><a href=\"#文学作品\" class=\"headerlink\" title=\"文学作品\"></a>文学作品</h2><h3 id=\"8-划分方式\"><a href=\"#8-划分方式\" class=\"headerlink\" title=\"8. 划分方式\"></a>8. 划分方式</h3><h4 id=\"8-1-类型\"><a href=\"#8-1-类型\" class=\"headerlink\" title=\"8.1. 类型\"></a>8.1. 类型</h4><p>文学作品的<strong>类型</strong>是指文学作品反映现实的方式。</p>\n<p><strong>1）现实型文学</strong>是一种侧重以写实的方式再现客观现实的文学形态。基本特征是：</p>\n<ul>\n<li>再现性：对外在客观现实状况作如实刻画或模拟；</li>\n<li>逼真性：以写实的方法，按生活中各种事物的本来面目进行精细逼真的描绘。</li>\n</ul>\n<p><strong>2）理想型文学</strong>是一种侧重以直接抒情的方式表现主观理想的文学形态。它的特征是：</p>\n<ul>\n<li>表现性：把内在主观世界状况以形象呈现出来；</li>\n<li>虚幻性：运用夸张、变形、虚构的方法，不求外表的真实，遵循情感的逻辑，追求情感的真实 。如神话、传说、历史故事、民间传奇。</li>\n</ul>\n<p><strong>3）象征形文学</strong>是一种侧重以暗示的方式寄寓审美意蕴的文学形态。基本特征是：</p>\n<ul>\n<li>暗示性：词语寄寓某种超出本义的内涵；暗示是象征型文学寄寓意蕴的方式；</li>\n<li>朦胧性：词语含有多层不确定的意义。</li>\n</ul>\n<h4 id=\"8-2-体裁\"><a href=\"#8-2-体裁\" class=\"headerlink\" title=\"8.2. 体裁\"></a>8.2. 体裁</h4><p>文学作品的<strong>体裁</strong>是指文学作品话语系统的结构形态。</p>\n<ul>\n<li><strong>诗</strong><br>一种语词凝练、结构跳跃、富有节奏和韵律、高度集中地反映生活和表达思想感情的文学体裁。可分为抒情诗和叙事诗，格律诗与自由诗等，它基本特征是：凝练性、跳跃性、节奏和韵律性。</li>\n<li><strong>小说</strong><br>一种侧重刻画人物形象、叙述故事情节的文学样式。可分为：长篇、中篇与短篇小说，文言小说与白话小说。其基本特征是：深入细致的人物刻画；完整复杂的情节叙述；具体充分的环境描写。</li>\n<li><strong>剧本</strong><br>一种侧重以人物台词为手段、集中反映矛盾冲突的文学体裁。可分为悲剧、喜剧、正剧，还可分为独幕剧和多幕剧。其基本特征是：浓缩地反映现实生活；集中地表现矛盾冲突 ； 以人物台词推进戏剧动作。</li>\n<li><strong>散文与报告文学</strong><br>广义的散文是包括诗歌以外的一切文学作品。文学意义上的散文是与诗歌、小说、剧本等并列的一种文学样式，包括抒情散文、叙事散文、杂文、游记等。文学散文是一种题材广泛、结构灵活、注重抒写真实感受、境遇的文学体裁。主要特征是： 题材广泛多样；结构自由灵活；抒写真实感受。<br>报告文学是一种在真人真事基础上塑造艺术形象，及时反映现实生活的文学体裁。它的基本特征是：及时性；纪实性；文学性。</li>\n</ul>\n<h3 id=\"9-文学作品的文本层次\"><a href=\"#9-文学作品的文本层次\" class=\"headerlink\" title=\"9. 文学作品的文本层次\"></a>9. 文学作品的文本层次</h3><p><strong>文本</strong>是由作者写成而有待于阅读的单个文学作品本身。文本具有由表及里的多层次审美结构。</p>\n<blockquote>\n<p>“夫象者，出意者也。言者，明象者也。尽意莫若象，尽象莫若言。言生于象，故可寻言以观象；象生于意，故可寻象以观意。意以象尽，象以言著。”  —— 《周易略例》王弼</p>\n</blockquote>\n<h4 id=\"9-1-文学言语层面\"><a href=\"#9-1-文学言语层面\" class=\"headerlink\" title=\"9.1. 文学言语层面\"></a>9.1. 文学言语层面</h4><p>文学言语指文学文本首先呈现于读者面前、供其阅读的具体言语系统。特点：</p>\n<ul>\n<li>文学言语是内指性的。普通言语是外指性的，即指向语言符号以外的现实世界，必须符合现实生活的逻辑；而文学言语指向文本中的艺术世界。</li>\n<li>文学言语具有心理蕴含性。</li>\n<li>文学言语具有阻拒性。阻拒性话语可能不符合语法，打破了某些语言的常规，甚至还不易被人所理解，但却能引起人们的注意和兴趣，从而获得较强的审美效果。阻拒性言语不能滥用。</li>\n</ul>\n<h4 id=\"9-2-文学形象层面\"><a href=\"#9-2-文学形象层面\" class=\"headerlink\" title=\"9.2. 文学形象层面\"></a>9.2. 文学形象层面</h4><p>文学形象是读者经过想像和联想而在头脑中唤起的具体可感的动人的生活图景。特征：</p>\n<ul>\n<li>文学形象是主观与客观的统一；</li>\n<li>文学形象是假定与真实的统一；</li>\n<li>文学形象是个别与一般的统一；</li>\n<li>文学形象是确定性与不确定性的统一。</li>\n</ul>\n<h4 id=\"9-3-文学意蕴层面\"><a href=\"#9-3-文学意蕴层面\" class=\"headerlink\" title=\"9.3. 文学意蕴层面\"></a>9.3. 文学意蕴层面</h4><p>文学意蕴层面是指文本所蕴含的思想、感情等各种内容，属于文本结构的纵深层次。</p>\n<ul>\n<li>历史内容层。形象本身包含一定的历史内容(如《水浒传》)或暗示了一定的历史内容。</li>\n<li>哲学意味层。</li>\n<li>审美意蕴层。文学作品也可以意蕴单纯，甚至仅有审美意蕴。</li>\n</ul>\n<h3 id=\"10-文学形象的理想形态\"><a href=\"#10-文学形象的理想形态\" class=\"headerlink\" title=\"10. 文学形象的理想形态\"></a>10. 文学形象的理想形态</h3><p>文学形象的高级形态通常有三种：文学典型、文学意境和文学意象。</p>\n<h4 id=\"10-1-文学典型\"><a href=\"#10-1-文学典型\" class=\"headerlink\" title=\"10.1. 文学典型\"></a>10.1. 文学典型</h4><p><strong>典型</strong>是文学言语系统中显出特征的富于魅力的性格。它在叙事性作品中，又称<strong>典型人物</strong>或<strong>典型性格</strong>。</p>\n<p>典型基本上是西方文论创立的一个概念，<strong>发展</strong>经历了三个阶段：</p>\n<ol>\n<li>17世纪以前：类型说</li>\n<li>18世纪以后：个性典型观</li>\n<li>19世纪80年代末：马克思主义典型观</li>\n</ol>\n<p>文学典型的<strong>美学特征</strong>：</p>\n<ol>\n<li>文学典型的特征性。<br>“特征”的概念是由德国艺术史家希尔特提出来的。我们把作家抓住生活中最富有特征性的东西，加已艺术强化、生发的过程，叫做“特征化”。</li>\n<li>文学典型的艺术魅力。<br>艺术魅力一般表现为吸引力、感染力、和震撼力；而它实质上是由文学典型的真实性、新颖性、诚挚性、和蕴藉性造成的。</li>\n</ol>\n<h4 id=\"10-2-文学意境\"><a href=\"#10-2-文学意境\" class=\"headerlink\" title=\"10.2. 文学意境\"></a>10.2. 文学意境</h4><p>意境是我国古典文论独创的一个概念。它是我国诗学、画论、书论的中心范畴，是华夏抒情文学审美理想的集中体现。<strong>意境</strong>是指抒情性作品中呈现的那种情景交融、虚实相生的形象系统及其诱发和开拓的审美想像空间。</p>\n<ul>\n<li>两大因素：情与景</li>\n<li>一个空间：审美想象（即“境”，分为实境与虚境。）</li>\n</ul>\n<p>文学意境的<strong>特征</strong>：</p>\n<ol>\n<li>表现特征：情景交融</li>\n<li>结构特征：虚实相生</li>\n<li>审美特征：韵味无穷</li>\n</ol>\n<p>古典文论对意境的<strong>分类</strong>：</p>\n<blockquote>\n<p>“花鸟缠绵，云雷奋发，弦泉幽咽，雪月空明，诗不出此四境。” —— [清]刘熙载</p>\n</blockquote>\n<p>花鸟缠绵，是一种明丽鲜艳的美；<br>云雷奋发，是一种热烈崇高的美；<br>弦泉幽咽，是一种悲凉凄清的美；<br>雪月空明，是一种和平静穆的美。</p>\n<blockquote>\n<p>“有有我之境，有无我之境。……有我之境，以我观物，故物皆著我之色彩。无我之境，<br>以物观物，故不知何者为我，何者为物。” —— 王国维</p>\n</blockquote>\n<p>有我之境，是指那种感情比较直露、倾向比较鲜明的意境；<br>无我之境，是指那种情感比较含蓄、不动声色的意境画面。</p>\n<h4 id=\"10-2-文学意象\"><a href=\"#10-2-文学意象\" class=\"headerlink\" title=\"10.2. 文学意象\"></a>10.2. 文学意象</h4><p><strong>意象</strong>是中国首创的一个审美范畴。它的最早源头可归朔到《周易·系辞》：</p>\n<blockquote>\n<p>“子曰：书不尽言，言不尽意。然则圣人之意，其不可见乎？子曰：圣人立象以尽意。” </p>\n</blockquote>\n<p>意象的古义是用来表达某种抽象的观念和哲理的艺术形象。意象作为一个概念，最早出现在汉代王充的《论衡·乱龙》里面。</p>\n<p>审美意象的<strong>基本特征</strong>：</p>\n<ol>\n<li>本质特征是哲理性</li>\n<li>表现特征是象征性</li>\n<li>形象特征是荒诞性</li>\n<li>思维特征是抽象思维的直接参与</li>\n<li>鉴赏特征是求解性与多义性</li>\n</ol>\n<blockquote>\n<p>“象征一般是直接呈现于感性关照的一种现成的外在事物，对这种事物并不直接就它本身来看，而是就它所暗示的一种范围较广泛普遍的意义来看。” —— 黑格尔</p>\n</blockquote>\n<p>审美意象的<strong>分类</strong>：</p>\n<ul>\n<li>寓言式意象：通过一则故事直示一种哲理或观念，而这正是这则故事的主旨；</li>\n<li>符号式意象：不具有情节性的整体意象和单个意象。</li>\n</ul>\n<h3 id=\"11-叙事性作品\"><a href=\"#11-叙事性作品\" class=\"headerlink\" title=\"11. 叙事性作品\"></a>11. 叙事性作品</h3><h4 id=\"11-1-叙事界定\"><a href=\"#11-1-叙事界定\" class=\"headerlink\" title=\"11.1. 叙事界定\"></a>11.1. 叙事界定</h4><p>文学的<strong>叙事</strong>是用话语虚构社会生活事件的过程。</p>\n<p>文学叙事的<strong>基本特征</strong>：</p>\n<ol>\n<li>叙事的内容是社会生活事件过程。与抒情性作品不同，叙事文学讲故事，描述人的行为及其造成的后果，其认识价值就在于显示了社会生活的发展变化过程及其意义；</li>\n<li>叙事是话语的虚构。文学叙事不同于日常叙述语言，在于它具有内指性。叙事作为话语的虚构而同客观的现实之间产生距离。</li>\n</ol>\n<p>叙事与审美意识形态本质：</p>\n<ul>\n<li>叙事的内容来看，任何叙事都是对现实世界的某种解释，必然带有时代、民族等意识形态的印记；</li>\n<li>从叙事方式来看，一定的叙事写作方式形成一定的写作风格，而种种风格背后的制约要素之一就是审美意识形态。</li>\n</ul>\n<p>叙事的<strong>构成</strong>：</p>\n<ul>\n<li>叙述内容：构成一段叙述话语主题的故事内容，即被讲述的故事，包括事件、人物、场景等；</li>\n<li>叙述话语：叙事作品中讲述故事的语句；</li>\n<li>叙述动作：产生出叙述话语的“叙述”活动本身。</li>\n</ul>\n<h4 id=\"11-2-叙述内容\"><a href=\"#11-2-叙述内容\" class=\"headerlink\" title=\"11.2. 叙述内容\"></a>11.2. 叙述内容</h4><p><strong>1）故事</strong></p>\n<p>故事是叙述内容的基本成分。</p>\n<ol>\n<li><strong>事件。</strong>事件由所叙述的人物行为及其后果构成；作品中的事件可分为若干层次，整个事件由不同层次的小事件构筑而成。任何事件在作品中都承担着一定的作用：推动情节的事件；塑造形象的事件。</li>\n<li><strong>情节。</strong>情节是按照因果逻辑组织起来的一系列事件。而且要求在事件的发展中表现出人物行为的矛盾冲突，由此揭示人物命运的变化过程。</li>\n<li><strong>人物。</strong>人物是事件、情节发生的动因。人物的二重性特点：行动元与角色。行动元是情节的动因，决定人物“做什么”，如《西厢记》为代表的才子佳人小说中都是有追求者、被追求者、促进者、反对者、竞争与破坏者这几种类型的行动元。角色是形象的基础，表现出人物“怎样做”。人格特征构成的人物自身的同一性和独立性我们称之为“角色”。</li>\n<li><strong>场景。</strong>叙述内容中具体描写的人物行为与环境组合成为场景。</li>\n</ol>\n<p><strong>2）结构</strong></p>\n<p>结构是叙述内容的存在形态。叙事作品的结构是指作品各个成分或单元之间关系的整体形态。</p>\n<ol>\n<li>表层结构。历时性向度：根据叙述的前后顺序研究句子与句子、事件与事件之间的关系。以句法关系表示故事结构关系，将叙述内容简化为叙述句。</li>\n<li>深层结构。共时性向度：研究内容各个要素与故事之外的文化背景之间的关系。深层结构存在的根据是相信具体的叙述话语同产生这些话语的整个文化背景之间存在着超出话语字面的内在意义关系。</li>\n</ol>\n<p><strong>3）行动</strong></p>\n<p>行动是推动事件进展的直接原因，因而是叙述内容实现的根本途径。</p>\n<ul>\n<li>一般行动逻辑的基本形式是三段式序列：可能性 -&gt; 变为现实 -&gt; 取得结果 。</li>\n<li>行动序列的典型复合形式：首尾接续式；中间包含式；左右并连式（同一事件序列变换成两个平行序列）。</li>\n</ul>\n<h4 id=\"11-3-叙述话语\"><a href=\"#11-3-叙述话语\" class=\"headerlink\" title=\"11.3. 叙述话语\"></a>11.3. 叙述话语</h4><p>两个时间概念：</p>\n<ul>\n<li><strong>故事时间</strong>：故事发生的自然时间状态；是故事内容中虚构的事件之间的前后关系。</li>\n<li><strong>文本时间</strong>（也称<strong>叙事时间</strong>）：故事内容在叙事文本中具体呈现出来的时间状态。是作者对故事内容进行创作加工后提供给读者的文本秩序。</li>\n</ul>\n<p>文本时间和故事时间之间的关系：</p>\n<ol>\n<li><strong>时序。</strong>顺时序：顺叙；逆时序：倒叙、插叙。</li>\n<li><strong>时距。</strong>也称叙述的步速，是故事时间长度与文本时间长度相互比较对照所形成的时间关系。</li>\n<li><strong>频率。</strong>指一个事件在故事中出现的次数与该事件在文本中的叙述的次数。</li>\n</ol>\n<p><strong>视角</strong>是作品中对故事内容进行观察和讲述的角度。</p>\n<ol>\n<li><strong>第三人称叙述。</strong>传统作品全知叙述，特点是无视角限制。现代作品中有一类，作者放弃第三人称无所不在的自由，退缩到一个固定焦点上（接近于第一人称叙述），如沃尔夫的《达罗卫夫人》。</li>\n<li><strong>第一人称叙述。</strong>叙述者同时又是故事中的一个角色，内在式焦点叙述。焦点位置不尽相同：叙述者为主人公，如鲁迅《狂人日记》，这类作品中叙述视角限制最大；叙述者为旁观者，如普希金《驿站长》，接近第三人称叙述的自由。</li>\n<li><strong>第二人称叙述。</strong>角色以“你”的称谓出现，是第三人称叙述的一种变体，叙述者仍处在旁观者的位置。叙述的接受者同时是故事中的一个角色，从而使读者与叙述接受者二者距离拉大，形成一种反常的阅读经验。</li>\n</ol>\n<h4 id=\"11-4-叙述动作\"><a href=\"#11-4-叙述动作\" class=\"headerlink\" title=\"11.4. 叙述动作\"></a>11.4. 叙述动作</h4><p><strong>叙述者与作者</strong>：叙述者不是作者，而是作者创作出来的第一个形象，故事总是被叙述者叙述出来的。</p>\n<p><strong>叙述者与声音</strong>：</p>\n<ul>\n<li>叙述者的声音从故事的幕后被直接推到前台，成为被关注的对象；</li>\n<li>“独白”式叙述。故事人物的声音由叙述者控制，作为直接引语或间接引语表达。</li>\n<li>“复调”式叙述。叙述者的声音与主人公的声音之间存在着矛盾。在同一叙事中并行着两个或更多的声音。</li>\n</ul>\n<p><strong>叙述者与接受者</strong>：作者在作为叙述者讲述故事时，心目中必然要有一个潜在的叙述接受者。</p>\n<h3 id=\"12-抒情性作品\"><a href=\"#12-抒情性作品\" class=\"headerlink\" title=\"12. 抒情性作品\"></a>12. 抒情性作品</h3><h4 id=\"12-1-抒情界定\"><a href=\"#12-1-抒情界定\" class=\"headerlink\" title=\"12.1. 抒情界定\"></a>12.1. 抒情界定</h4><p><strong>抒情</strong>由古希腊文中的七弦琴（lyre）一词演变而来。抒情写意是中国传统文学的最突出的特征之一。<br><strong>抒情性作品</strong>是指以表现作者个人主观情感为主、偏重审美价值的一类文学作品，与叙事性作品相对。抒情性作品的主要体裁是抒情诗，常见的还有抒情散文、散文诗。</p>\n<p>抒情作为一种主观表现，并不脱离现实，而是对现实生活的反映与评价。抒情也是对现实的一种意识中的改造：“化景物为情思”。</p>\n<p>抒情中的自我与社会的联系最突出地体现为，与一定社会意识形态的联系。 </p>\n<p>抒情与宣泄：</p>\n<ul>\n<li>文学抒情是一种审美表现，需要适度的意识控制与思维参与，需要创造有序的话语组织形式，与普通情感宣泄不同；</li>\n<li>抒情主体把自己的内心体验作为对象来表现，既是情感的释放，又是情感的构造；</li>\n<li>创造具有审美价值的文学作品，构造适合情感表现的感性形式。</li>\n</ul>\n<h4 id=\"12-2-抒情性作品的构成\"><a href=\"#12-2-抒情性作品的构成\" class=\"headerlink\" title=\"12.2. 抒情性作品的构成\"></a>12.2. 抒情性作品的构成</h4><p><strong>抒情内容</strong>是指文本所表现出来的某种特定的情感过程和意义。<strong>抒情话语</strong>是一种表现性话语，它具有象征性地表现情感的功能，通过类似音乐的声音组织和富有意蕴的画面组织来体现难以言传的主观感受过程。</p>\n<ul>\n<li>抒情话语和抒情内容是一种直接融合的关系；</li>\n<li>抒情话语与普通话语不同，突出声音层和画面层的象征功能。</li>\n</ul>\n<p>抒情性作品可分为三个主要的<strong>结构要素</strong>：声音、画面和情感经验。</p>\n<p><strong>1）声与情</strong></p>\n<ul>\n<li>诗与乐；</li>\n<li>声调与情调；</li>\n<li>平仄关系、押韵、格律；</li>\n<li>节奏与情感运动形式</li>\n</ul>\n<p><strong>2）景与情</strong></p>\n<ul>\n<li>诗与画相通<blockquote>\n<p>“诗是有声画，画是无声诗”。<br>“诗中有画，画中有诗。”</p>\n<p>“诗是时间性的语言艺术， 画是空间性的造型艺术。” —— 莱辛</p>\n</blockquote>\n</li>\n<li>情景关系<br>情与景是中国传统诗学中的一对重要概念。情景相生、情景交融谓有意境，是中国古典抒情诗所追求的最高境界。<blockquote>\n<p>“情景名为二，而实不可离。神于诗者，妙合无垠。” —— 王夫之</p>\n</blockquote>\n</li>\n<li>真与幻<br>诗的真实，在于主观感受的真实，情感逻辑的真实。 </li>\n</ul>\n<h4 id=\"12-3-抒情方式\"><a href=\"#12-3-抒情方式\" class=\"headerlink\" title=\"12.3. 抒情方式\"></a>12.3. 抒情方式</h4><p>抒情话语的<strong>修辞方式</strong>：</p>\n<p><strong>1）比喻与象征</strong><br>比喻是借他物（喻体）来表现某物（喻本）的修辞方法。分为：</p>\n<ul>\n<li>明喻。表明喻体与喻本的相类关系，一般用“若”、“如”、“像”等喻词。</li>\n<li>隐喻。表明喻体与喻本的相合关系，不用喻词。</li>\n<li>借喻。既无喻本又无喻词，只有喻体。</li>\n</ul>\n<p>另：</p>\n<ul>\n<li>博喻。以多物类比一物。</li>\n<li>约喻。用一个比喻体来比喻几个本体的修辞格。</li>\n</ul>\n<p>象征是以具体事物（形象）间接表现思想感情。象征形象由于反复使用，渐渐带上相对稳定的象征意义。</p>\n<p><strong>2）倒装与歧义</strong><br>倒装是诗句在语法上的错置，常常体现为惯常词序的颠倒。<br>歧义是一句诗中并存两种或更多的语法结构，包含多重意义。</p>\n<p><strong>3）夸张与对比</strong><br>夸张是运用想象与变形，夸大事物的某些特征。<br>对比是把在感觉特征或寓意上相反的词句组合在一起，形成对照，强化抒情话语的表现力。</p>\n<p><strong>4）借代与用典</strong><br>借代是有关系的事物之间的相互替换。或者是用一物代替另一物。<br>用典又叫“用事”，就是在诗词中借用故事来造句表义。典故可分神话典故、历史典故和文学典故三类。</p>\n<p><strong>抒情角色</strong>：</p>\n<ul>\n<li>第一人称的抒情方式；</li>\n<li>代言的抒情方式。</li>\n</ul>\n<h3 id=\"13-文学风格\"><a href=\"#13-文学风格\" class=\"headerlink\" title=\"13. 文学风格\"></a>13. 文学风格</h3><h4 id=\"13-1-风格的诸种观念和理论\"><a href=\"#13-1-风格的诸种观念和理论\" class=\"headerlink\" title=\"13.1. 风格的诸种观念和理论\"></a>13.1. 风格的诸种观念和理论</h4><ol>\n<li>风格是独特的言语形式。<br>风格”一词最初属于修辞学的概念，强调作品中语言的修辞特色。亚里士多德认为，修辞的高明就是风格。</li>\n<li>风格是作家的创作个性在作品中的自然流露。</li>\n<li>风格是主体与对象、内容与形式相契合时呈现的特色。<blockquote>\n<p>“夫情动而言形，理发而文见，盖沿隐以至显，因内而符外者也。” —— 《文心雕龙》刘勰</p>\n</blockquote>\n</li>\n<li>风格是读者辨认出的一个格调。<blockquote>\n<p>“作诗譬如江南诸郡造酒，皆以曲米为料，酿成则醇味如一。善饮者历历尝之曰：‘此南京酒也，此苏州酒也，此镇江酒也，此金华酒也。’其美虽同，尝之各有甄别，何哉？做手不同故尔。” —— 《四溟诗话》谢榛</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"13-2-风格的定义和内涵\"><a href=\"#13-2-风格的定义和内涵\" class=\"headerlink\" title=\"13.2. 风格的定义和内涵\"></a>13.2. 风格的定义和内涵</h4><p>文学风格是指作家的创作个性在文学作品的有机整体中通过言语结构所显示出来的、能引起读者持久审美享受的艺术独创性。此定义的要点是：</p>\n<ol>\n<li>创作个性是风格形成的内存根据；</li>\n<li>主体与对象、内容与形式的统一是风格存在的基本条件；</li>\n<li>文体和语言组织是风格呈现的外部特征。</li>\n</ol>\n<h4 id=\"13-3-文学风格的类型与价值\"><a href=\"#13-3-文学风格的类型与价值\" class=\"headerlink\" title=\"13.3. 文学风格的类型与价值\"></a>13.3. 文学风格的类型与价值</h4><p><strong>1）类型</strong></p>\n<p>黑格尔按审美理想区分：</p>\n<ul>\n<li>严峻的风格</li>\n<li>理想的风格</li>\n<li>愉快的风格</li>\n</ul>\n<p>威克纳格从文体的角度区分：</p>\n<ul>\n<li>智力的风格</li>\n<li>想象的风格</li>\n<li>情感的风格</li>\n</ul>\n<p>我国古代风格分类理论：</p>\n<ul>\n<li>简分法：刚柔二分（后也用“豪放”、“婉约”等分类法）<blockquote>\n<p>“其得于阳与刚之美者，则其文如霆，如电，如长风之出谷，如崇山峻崖，如决大川，如奔骐骥；其光也，如杲日，如火，如金镠铁；其于人也，如冯高视远，如君而朝万众，如鼓万勇士而战之。其得于阴与柔之美者，则其文如升初日，如清风，如云，如霞，如烟，如幽林曲涧，如沦，如漾，如珠玉之辉，如鸿鹄之鸣而入廖廓；其于人也，漻乎其如叹，邈乎其如有思，暖乎其如喜，愀乎其如悲。观其文，讽其音，则为文者之性情形状举以殊焉。”  ——《复鲁絜非书》姚鼐</p>\n</blockquote>\n</li>\n<li>繁分法<blockquote>\n<p>若总其归途，则数穷八体：一曰典雅，二曰远奥，三曰精约，四曰显附，五曰繁缛，六曰壮丽，七曰新奇，八曰轻靡。 —— 《文心雕龙·体性》刘勰</p>\n<p>雄浑、冲淡、纤秾、沉著、高古、典雅、洗炼、劲健、绮丽、自然、含蓄、豪放、精神、缜密、疏野、清奇、委屈、实境、悲慨、形容、超诣、飘逸、旷达、流动。 —— 《二十四诗品》司空图</p>\n</blockquote>\n</li>\n</ul>\n<p>现代著名学者陈望道在《修辞学发凡》中提出四组八种：</p>\n<ul>\n<li>简约、繁丰；</li>\n<li>刚健、柔婉；</li>\n<li>平淡，绚烂；</li>\n<li>谨严、疏放。</li>\n</ul>\n<p><strong>2）文学风格的审美价值</strong></p>\n<ul>\n<li>不同的文学风格有不同的审美价值；</li>\n<li>风格的审美价值可以超越时代，但它在多大程度上得到实现，却往往又受到时代的价值取向的影响和制约。</li>\n</ul>\n<h4 id=\"13-4-文学风格与文化\"><a href=\"#13-4-文学风格与文化\" class=\"headerlink\" title=\"13.4. 文学风格与文化\"></a>13.4. 文学风格与文化</h4><ol>\n<li>文学风格与时代文化<br>时代风格主要是指从历史和社会高度把握的、只属于这个时代而不属于其他时代的文学的总体特征。如先秦散文感情激越富有论辩， <code>建安风骨</code> 则是建安文学的时代风格。</li>\n<li>文学风格与民族文化<blockquote>\n<p>“意大利语的柔和和甜蜜在不知不觉中渗入到意大利作家的资质中去。在我看来，词藻的华丽、隐喻的运用、风格的庄严，通常标志着西班牙作家的特点。对于英国人来说，他们更讲究作品的力量、活力和雄浑，他们爱讽喻和明喻甚于一切。法国人则具有明彻、严密和优雅的风格。” —— 《论史诗》伏尔泰</p>\n</blockquote>\n</li>\n<li>文学风格与地域文化<blockquote>\n<p>“荆楚之地，僻处南方，故老子之书，其说杳冥而深远。及庄、列之徒承之，其旨远，其义隐，其为文也，纵而后反，寓实于虚，肆以荒唐谲怪之词，渊乎其有思，茫乎其不可测矣。屈乎之文，音涉哀思，矢耿介，慕灵修，芳草美人，托词喻物，志行芳洁，符于二《南》之比兴。而叙事记游，遗尘超物，荒唐谲怪，复与庄、列相同。” —— 《南北文学不同论》刘师培</p>\n</blockquote>\n</li>\n<li>文学风格与流派文化<br>初唐因唐太宗和大臣们对齐梁文风的爱好，形成 <code>宫体诗派</code> 。盛唐出现 <code>山水田园诗派</code> 和 <code>边塞诗派</code> 。中唐白居易提倡“新乐府”运动，形成 <code>新乐府派</code> 。宋诗形成 <code>婉约派</code> 和 <code>豪放派</code> 。现代仅诗歌领域：郭沫若为代表的 <code>创造社诗派</code> ；汪静之、应修人的 <code>湖畔诗派</code>；徐志摩为代表的 <code>新月诗派</code>；戴望舒、卞之琳为代表的 <code>现代派</code> ；胡风为代表的 <code>七月诗派</code>；冯至为代表的 <code>校园诗派</code> 等。</li>\n</ol>\n<h2 id=\"文学消费和接受\"><a href=\"#文学消费和接受\" class=\"headerlink\" title=\"文学消费和接受\"></a>文学消费和接受</h2><h3 id=\"14-文学消费与接受的性质\"><a href=\"#14-文学消费与接受的性质\" class=\"headerlink\" title=\"14. 文学消费与接受的性质\"></a>14. 文学消费与接受的性质</h3><p><strong>广义的文学消费</strong>是指人们用文学作品来满足自己的精神需求的过程，也即文学阅读或文学欣赏。<br><strong>狭义的文学消费</strong>是指在商品经济充分发展、印刷出版等传播媒介得到广泛运用的条件下，在文学成为一种特殊的商品以来，人们对它的消费、欣赏和阅读。</p>\n<p><strong>高雅文学（纯文学）</strong>是一种典雅、正统、精制、纯粹的具有较高思想艺术价值的文学类型。高雅文学主要服务于社会上文化修养较高的阶层。其特点有：内容和题材充实、深广；主题或意蕴富于深度；艺术形式上具有探索性和独创性；鲜明的个性风格；诉诸读者以严肃的思考、体验和想象，具有巨大的艺术感染力。又称为“纯文学”、“严肃文学”、“精英文学”。<br><strong>大众文学（俗文学）</strong>是于高雅文学相对而言的一种浅近、通俗、平易、流行的文学类型。其特点是：思想内容的浅易，艺术形式的简明，富有消遣娱乐功能。在商业社会，又称为消费文学，往往具有明显的赢利性和较高的商业价值。</p>\n<h4 id=\"14-1-文学消费与一般消费\"><a href=\"#14-1-文学消费与一般消费\" class=\"headerlink\" title=\"14.1. 文学消费与一般消费\"></a>14.1. 文学消费与一般消费</h4><p><strong>1）文学生产、传播与消费</strong></p>\n<p>基本含义：</p>\n<ul>\n<li>狭义的<strong>文学生产</strong>指以作家内在心理意象形式存在的观念形态的文本创造和出版家通过一定的物质载体将作家观念形态的文学文本变为文学读物的物态化生产。</li>\n<li><strong>文学传播</strong>兼指文学作品的出版与流通，是文学生产者借助于一定的物质媒介和传播方式赋予文学信息以物质载体，从而将文学信息或文学作品传递给文学接受者的过程。</li>\n<li><strong>文学消费</strong>主要指读者的阅读。</li>\n</ul>\n<p>文学传播活动及其变迁：</p>\n<ol>\n<li>口头传播：作家、职业说书人；</li>\n<li>书籍传播：从手抄本到机械印刷品；</li>\n<li>视听传播及电子网络传播：广播、电影、电视、网络；</li>\n<li>大众传播：使用印刷媒介(书籍、报纸、杂志)和电子媒介(广播、电影、电视以及电脑网络等)大量收集、复制和传播信息。具有大范围播布、传递迅速和单向扩散或互动交流等特点。 </li>\n</ol>\n<p>文学消费与文学生产之间的互动关系：</p>\n<ul>\n<li>文学生产规定着文学消费；</li>\n<li>文学消费反作用于文学消费。</li>\n</ul>\n<blockquote>\n<p>“生产直接是消费，消费直接是生产。每一方直接是对方。可是同时在两者之间存在着一种中介运动。生产中介着消费，它创造出消费的材料，没有生产，消费就没有对象。但是消费也中介着生产，因为正是消费替产品创造了主体，产品对这个主体才是产品。产品在消费中才得到最后完成。“ —— 马克思</p>\n</blockquote>\n<p><strong>2）文学消费的二重性</strong></p>\n<p>文学消费作为一般的商品消费：</p>\n<ul>\n<li>文化工业的出现和文化流通市场的形成，文学生产者与文学消费者发生分离；</li>\n<li>文学作品进入商品流通领域，遵循价值规律；</li>\n<li>文学作为物态化的劳动产品，会有物质耗损；</li>\n<li>文化生产受社会消费心理影响。</li>\n</ul>\n<p>文学消费作为特殊精神产品的消费：</p>\n<ul>\n<li>文学产品主要满足人们的精神生活需要；</li>\n<li>文学产品中作家的创造性劳动难以作定量评估；</li>\n<li>优秀的文学产品具有超时代性；</li>\n<li>文学产品的消费具有再创造的性质，需要消费者的积极参与。</li>\n</ul>\n<p><strong>3）文学消费与文学的审美意识形态性</strong></p>\n<p>文学生产者通过文学作品传达的意识形态性，在文学的阅读过程中，影响消费者。</p>\n<p>文学消费对意识形态的三种反应模式：</p>\n<ol>\n<li>文学消费直接为现行体制和社会结构服务，传播和再生产着现行政治、经济制度所需要的意识形态；</li>\n<li>文学消费为批判现行政治和经济制度服务，传播着批判现行制度不合理性的意识形态观念；</li>\n<li>声称文学消费与政治无关，声称文学远离现行的政治、经济制度或超越主流的意识形态观念，即所谓非意识形态化。</li>\n</ol>\n<p>文学消费作为意识形态消费的特殊性：不是以概念形式的意识形态观念直接灌输给消费者，而是寓思想观念于艺术形式的结构和艺术娱乐的效果之中。</p>\n<p><strong>4）文学消费与文学接受</strong></p>\n<p>两者的区别：</p>\n<ol>\n<li>文学消费具有物质消费和精神消费二重性，而文学接受则纯属一种精神文学范围内的活动。</li>\n<li>文学消费既包括阅读行为，也包含未阅读活动的消费行为；而文学接受则一定是一种阅读或欣赏的精神活动。</li>\n<li>文学消费和文学接受的主客观条件不同。文学消费要求消费者具备必要的文化知识、阅读能力及消费心理等主观条件，必要的经济能力、闲暇时间和适当的空间等客观条件；文学接受的主观条件除阅读能力外，更关注接受者的个性、气质、性别、年龄、职业、经历、人生观、文化修养、审美趣味、艺术经验、期待视野及阅读心境等，客观条件则主要指接受的对象（文本）以及接受者所处的历史时代背景等。</li>\n<li>文学消费研究具有综合的多视角的特点，而文学接受研究则偏于审美经验或艺术心理这一独特视角。</li>\n</ol>\n<p>文学消费是初级状态、低层次的文学接受，文学接受是高级状态、高层次的文学消费。二者共同指向的核心均为文学欣赏或审美鉴赏这个文学阅读活动的最高层次。</p>\n<h4 id=\"14-2-文学接受的文化属性\"><a href=\"#14-2-文学接受的文化属性\" class=\"headerlink\" title=\"14.2. 文学接受的文化属性\"></a>14.2. 文学接受的文化属性</h4><p><strong>1）文学接受是一种审美活动。</strong></p>\n<blockquote>\n<p>“民间故事书的使命是使一个农民在作完艰苦的日间劳动，在晚上拖着疲乏的身子回来的时候，得到快乐、振奋和慰藉，使他忘却自己的劳累，把他的硗瘠田地变成馥郁的花园……使一个手工业者的作坊和一个疲惫不堪的学徒的寒伧的楼顶小屋变成一个诗的世界和黄金的宫殿，而把他的矫健情人形容成美丽的公主。” —— 《德国的民间故事书》恩格斯</p>\n</blockquote>\n<p><strong>2）文学接受是一种认识活动。</strong></p>\n<p><strong>3）文学接受是一种文化价值阐释活动。</strong></p>\n<p>文学作品的文化阐释价值是多方面的：</p>\n<ul>\n<li>民俗学价值（表层价值）</li>\n<li>社会学、历史学、政治学价值</li>\n<li>宗教价值（深层价值）</li>\n<li>哲学价值（最为重要）</li>\n</ul>\n<p><strong>4）文学接受是一种交流活动。</strong></p>\n<h3 id=\"15-文学接受过程\"><a href=\"#15-文学接受过程\" class=\"headerlink\" title=\"15. 文学接受过程\"></a>15. 文学接受过程</h3><h4 id=\"15-1-文学接受的发生\"><a href=\"#15-1-文学接受的发生\" class=\"headerlink\" title=\"15.1. 文学接受的发生\"></a>15.1. 文学接受的发生</h4><p>文学接受从总体上说，发生于读者对本文的阅读，但这种发生，又是读者在特定阅读经验期待视野的基础上，在特定接受动机的支配下，在特定接受心境的影响下展开的。</p>\n<p><strong>1）期待视野</strong></p>\n<p>在文学阅读之先及阅读过程中，作为接受主体的读者，基于个人和社会的复杂原因，心理上往往会有一个既成的结构图式。读者的这种据以阅读本文的既成心理图式叫做<strong>阅读经验期待视野</strong>，简称<strong>期待视野</strong>。</p>\n<p>阅读经验期待视野的层次：</p>\n<ul>\n<li>文体期待</li>\n<li>形象期待</li>\n<li>意蕴期待</li>\n</ul>\n<p>阅读经验期待视野的形成因素：</p>\n<ul>\n<li>由生活实践和文化教养形成的世界观与人生观，即读者在长期的社会生活中形成的审美趣味、情感倾向、人生追求、政治态度等；</li>\n<li>一定的文学艺术素养，即读者对各种文学体裁、文学发展史、文学发展现状、文学自身的技巧、手法、创作规律、艺术特征的熟悉和了解。</li>\n<li>特定的生理机制，即读者的性别、年龄、气质类型等。</li>\n</ul>\n<p>阅读经验期待视野的类型：</p>\n<ul>\n<li>个人性期待视野（一般读者）</li>\n<li>集体性期待视野（专门从事研究和批评的特殊读者）</li>\n</ul>\n<p><strong>2）接受动机</strong></p>\n<ul>\n<li>审美动机</li>\n<li>求知动机</li>\n<li>受教动机</li>\n<li>批评动机</li>\n<li>借鉴动机</li>\n</ul>\n<p><strong>3）接受心境</strong></p>\n<p>在现实生活中，人们总是处于一定的情绪状态，在文学阅读活动开始时，这种生活中的情绪状态不可能截然中断，会伴随读者进入阅读过程，影响阅读效果。读者的这种影响阅读的情绪状态，叫<strong>接受心境</strong>。</p>\n<p><strong>3）从隐含的读者到读者阅读</strong></p>\n<p>伊瑟尔提出的<strong>隐含读者</strong>，指相对于现实读者而言的，作家本人设定的能够把文本加以具体化的预想读者。是作家预想出来的他的作品问世之后，可能出现的或应该出现的读者。</p>\n<ul>\n<li>作家的创作动机会决定文本中隐含的读者。</li>\n<li>作家赋予文本的思想内涵会决定隐含的读者。</li>\n<li>作家的选材及文体特点也会决定隐含的读者。</li>\n</ul>\n<h4 id=\"15-2-文学接受的发展\"><a href=\"#15-2-文学接受的发展\" class=\"headerlink\" title=\"15.2. 文学接受的发展\"></a>15.2. 文学接受的发展</h4><p>文学接受的发展是指文学作品的具体阅读阶段。读者以自己的期待视野为基础，对作品中的文本符号进行富于个性色彩的解读与填空、交流与对话。这是文学作品由“第一文本”转化为“第二文本”并由现实的读者实现文学接受的过程。</p>\n<ul>\n<li>第一文本：文学作品完成之后，还没有和读者发生关系之前</li>\n<li>第二文本：经由阅读之后，文学作品摆脱孤立的“自在”存在状态，成为“自为”的存在</li>\n</ul>\n<p><strong>1）填空、对话与兴味</strong></p>\n<p>西方（填空、对话）</p>\n<ul>\n<li>英加登：文学作品最终完成依靠读者去“填空”。</li>\n<li>伊瑟尔：文学文本只是一个不确定性的“召唤结构”，它召唤读者在其可能范围进行再创造。</li>\n<li>伽达默尔：作品意义在读者与文本的“对话”中生成。文学作品的意义是开放的，不确定的，处于无限的对话之中。</li>\n</ul>\n<p>中国古代文论（兴味）</p>\n<ul>\n<li>孔子：“诗可以兴”</li>\n<li>钟嵘：“使味之者无极，闻之者动心”</li>\n</ul>\n<p><strong>2）还原与异变</strong></p>\n<p>完全的还原是不可能的，读者阅读的“第二文本”总是“第一文本”的种种异变。</p>\n<p>读者的期待视野导致异变：</p>\n<ul>\n<li>某些政治观念会导致异变；</li>\n<li>某些预定文化观念会导致异变；</li>\n<li>文化视野会导致异变；</li>\n<li>个人经验会导致异变；</li>\n<li>文学欣赏能力会导致异变。</li>\n</ul>\n<p><strong>3）理解与误解</strong></p>\n<p><strong>前理解</strong>指读者由于期待视野存在而对于作品先入为主的看法。前理解与作者的创作动机、作品的意蕴以及作品的艺术价值之间构成对话，相应者为正解，相悖者为误解。</p>\n<p>误解分为：</p>\n<ul>\n<li>正误，指读者的理解虽与作者的创作本意有所抵牾，但作品客观上显示了读者理解的内涵。</li>\n<li>反误，指读者穿凿附会的认知与评价，包括对作品非艺术视角的歪曲等。（如历朝的文字狱）</li>\n</ul>\n<p><strong>4）期待遇挫与艺术魅力</strong></p>\n<p>当一部作品中的人物性格、情节发展、意境指向等等，与读者期待视野中的预先测定完全一致时，即是<strong>顺向相应</strong>。与之相反，那些真正富于创新意义与艺术魅力的作品，在阅读过程中，常常会伴随期待指向的<strong>遇挫</strong>。由于文本内涵完全超出了读者的期待视野，令人难以介入期间，称之为“完全遇挫”（某些 <code>先锋诗</code>、 <code>意识流</code> 小说）。</p>\n<h4 id=\"15-3-文学接受的高潮\"><a href=\"#15-3-文学接受的高潮\" class=\"headerlink\" title=\"15.3. 文学接受的高潮\"></a>15.3. 文学接受的高潮</h4><p>在文学接受活动中，读者与作者或作品中的人物之间，会产生思想与情感的<strong>共鸣</strong>；读者会借助于文本符号的导引，进入一个自由广阔的想像空间，使情感得以<strong>净化</strong>；会通过对文本的感悟与理解，进入一种诗情幻化的哲学境界，<strong>领悟</strong>到人生的真谛和宇宙的奥妙，感受到“余音绕梁”的<strong>延留</strong>魅力。</p>\n<h3 id=\"16-文学批评\"><a href=\"#16-文学批评\" class=\"headerlink\" title=\"16. 文学批评\"></a>16. 文学批评</h3><h4 id=\"16-1-文学批评的价值取向\"><a href=\"#16-1-文学批评的价值取向\" class=\"headerlink\" title=\"16.1. 文学批评的价值取向\"></a>16.1. 文学批评的价值取向</h4><p><strong>文学批评</strong>是对以文学作品为中心兼及一切文学活动和文学现象的理性分析、评价和判断。</p>\n<p><strong>1）文学批评与文学的生产和接受</strong></p>\n<ul>\n<li>文学批评的主要对象是作品，与文学创造密切相关</li>\n<li>文学批评是文学接受过程中偏重理论要求的一部分         </li>\n<li>文学批评兼及各种文学现象，包括对其本身的评价与判断，即“批评的批评”</li>\n</ul>\n<p><strong>2）文学批评作为意识形态评价</strong></p>\n<p>文学批评虽然着手于文学作品的解析，但却必须着眼于它的意识形态归属，以求确立某种批评者所遵奉和维护的那种意识形态的主导性或权威性。这在文学思潮、运动和文学论争中体现的尤为明显。因而从实质上讲，文学批评是在一定的社会历史条件下与一定的意识形态息息相关的意识形态评价方式，它通过批评话语对意识形态产生巨大的影响。</p>\n<h4 id=\"16-2-文学批评的模式\"><a href=\"#16-2-文学批评的模式\" class=\"headerlink\" title=\"16.2. 文学批评的模式\"></a>16.2. 文学批评的模式</h4><p>传统批评模式出现在20世纪之前，包括：</p>\n<p><strong>（一）伦理道德批评</strong><br>伦理道德批评是以一定的道德意识及其由之而形成的伦理关系作为规范来评价作品，以善、恶为基本范畴来决定对批评对象的取舍。这种批评着重于对文学作品的道德意识性质和品位的评价，实现作品的伦理价值及道德教化作用。伦理道德批评具有历史的久远性，无论是在中国还是西方，都是兴起最早而又影响深远的一种批评形态。</p>\n<ul>\n<li>传统：孔子：“诗三百，一言以蔽之，曰：思无邪。” 柏拉图：“作品须对我们有益；须只模仿好人的言语，并且遵守我们原来替保卫者们设计教育时所定的规范。”</li>\n<li>近代：文艺复兴的人道主义、宋明理学</li>\n<li>现代：欧文·白璧德和保尔·摩尔《伦理学原理》</li>\n</ul>\n<p><strong>（二）社会历史批评</strong><br>强调文学与社会生活的关系，认为文学是再现生活并为一定的社会历史环境所形成的，因而文学作品的主要价值在于它的社会认识功用和历史意义；其基本的原则是：分析、理解和评价作品，必须将作品产生的时代背景、历史条件以及作家的生活经历等与作品联系起来考察。是产生较早、影响较的的一种批评形态。</p>\n<ul>\n<li>孟子：“知人论世”说。</li>\n<li>丹纳：《〈英国文学史〉序言》 “如果一部文学作品内容丰富，并且人们知道如何去解释它，那么我们在这部作品里所找到的，会是一种人的心理，时常也就是一个时代的心理，有时更是一个种族的心理。从这方面看来，一首伟大的诗，一部优美的小说，一个高尚人物的忏悔录，要比许多历史家和他们的历史著作对我们更有教益。”因而一个作家应该去“表达整个民族和整个时代的生存方式。” </li>\n</ul>\n<p><strong>（三）审美批评</strong><br>也是古已有之，但在中国魏晋以后，西方文艺复兴以后，才独立于社会批评。审美批评着眼于文学作品的美的构成及其审美价值，着重强调作品的“畅神”“移情”效果和娱乐、愉悦作用，把文学作品看成是在真善美基础上又超越了真善因而是超功利的一种审美对象；审美批评往往联系作品对读者产生的美感程度的强弱和久暂就品评其高下得失，具有赏析式评价的性质。</p>\n<ul>\n<li>中国赏鉴式的“品”、“悟”，追求“滋味”、“妙悟”、“空灵”、“神韵”</li>\n<li>西方各审美批评流派的众说纷纭</li>\n<li>中西审美批评模式的共同特点：情感性评价，着眼于作品以什么样的情感并在多大程度上得到了成功的的表现和引起读者的心灵震荡与情感激动；体验与超越矛盾统一的批评，具有超功利性；一种形式或形象的直觉批评。</li>\n</ul>\n<p>现代批评模式出现在20世纪后，包括：</p>\n<p><strong>（四）心理学批评</strong><br>心理学批评主要是指运用现代心理学的成果来对作家的创作心理以及作品人物的心理进行分析，从而探求作品的真实意图以获得其真实价值。它立足于从作品人物的心理分析中进而找出作者创作的心理机制、意识和无意识，再转而对作品为什么要用这样的形式技巧、语言符号作出解释。</p>\n<blockquote>\n<p>“它们都主张对真实内容进行分析。这种真实内容往往隐藏在本文的后面，因而心理学家并非只从表面上去看本文，而是要看透它。从心理学角度看，文学只是一组符号，如果阅读正确的话，它可以显示出第二组符号；而第二组符号可以依次展示出控制文学‘制造‘的心理活动。” —— 《心理学和文学》约翰·马勒</p>\n</blockquote>\n<p><code>弗洛伊德精神分析</code> 学派：着重从艺术作品的分析中论证作家的潜意识、本能欲望如何成为创作动机，并就文学的效果和特点所产生的影响作出心理学解释。</p>\n<ul>\n<li>本我、自我、超我的三分心理结构</li>\n<li>文学创作是本能冲动 “升华”的结果；</li>\n</ul>\n<p>格式塔心理学派的 <code>完形心理学</code> ：着重于艺术或文学作品的整体完形结构的评价，其理论依据是图形和背景、邻近原则、类似原则、良好完形原则和闭合原则等原则。他们认为：</p>\n<ul>\n<li>整体不等于部分的总和</li>\n<li>整体是先于部分而决定各个部分的性质和意义的</li>\n<li>分析作品必须深入到作品的整体完形结构中</li>\n</ul>\n<p><strong>（五）语言学批评</strong><br>语言批评从总体上说，是诸多批评流派文学批评中涉及文学语言的分析的一种概括。认为文学作品是一个独立自足的整体，是一种有组织的符号结构，意义只需要从文本去寻求而无需借助于外部因素加以说明。语言的语境、语义、能指性、信息作用是构成形象的、形成结构的极其重要的因素，因而探求作品的意图必须通过对本文的语言分析。</p>\n<ul>\n<li><code>俄国形式主义</code> ：什克洛夫斯基、罗曼·雅各布森</li>\n<li><code>英美新批评</code> ：艾略特、理查兹、燕卜荪、兰塞姆</li>\n<li><code>法国结构主义</code> ：罗兰·巴特、列维－斯特劳斯</li>\n</ul>\n<p>三派从广义上讲都可以叫做 <code>形式主义</code> 或 <code>结构主义</code> ，实质上都是主要运用语言学来研究和批评文学，关心的是语言结构及其结构中的能指性、转换性、象征性。</p>\n<p>中国古代文学批评集中地表现为讲究语言表现的张力：</p>\n<ul>\n<li>“得象忘言”、“意在言外”、“言有尽而意无穷”</li>\n<li>“以少总多”、“篇无余句，句无余字”</li>\n<li>推敲</li>\n</ul>\n<p><strong>（六）文化批评</strong><br>20世纪50年代英国的文化研究引发而产生。</p>\n<ul>\n<li>威廉姆斯：伯明翰文化研究中心  </li>\n<li>霍加特</li>\n</ul>\n<p>20世纪90年代，文化批评在中国兴起。市场经济兴起发展，带来了文化与文学的巨大变化，高雅文学的式微与通俗读物、通俗视听作品等的迅速兴盛，形成了鲜明的对比，从而使文学批评的视野不能再局限于文学正统的狭小圈子，必须面对现实。</p>\n<h4 id=\"16-3-文学批评的实践\"><a href=\"#16-3-文学批评的实践\" class=\"headerlink\" title=\"16.3. 文学批评的实践\"></a>16.3. 文学批评的实践</h4><p>“批评五要”（原则）：</p>\n<ol>\n<li>了解对象</li>\n<li>选点切入</li>\n<li>确定要旨</li>\n<li>布局安排</li>\n<li>力求创见</li>\n</ol>\n<p>主要批评文体：论文、点评、诗论诗体、随笔、序跋、评传体等。</p>\n<p><img src=\"/images/books/wenxuelilun.jpg\" alt=\"wenxuelilun\"></p>\n"},{"title":"白夜行：从容不迫的罪恶","url":"http://zhangqiang.work/posts/615201606/","content":"<blockquote>\n<p>“我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。我从来没有太阳，所以不怕失去。”</p>\n</blockquote>\n<p>合上书本，心中不由自主地想：这样的一本小说，是如何被构思出来的。</p>\n<p>作为一本推理小说，首先令我关注的是案件。全书中引入了大量案件，如开篇当铺老板死亡的一系列案子、江利子的案子、今枝的案子。可以很明显地感觉到，开篇的一系列案件是作者精心设计过的，预留了诸多伏笔，而且作者很巧妙的揭示了这些伏笔，但又不说破它。换句话说，东野圭吾并没有把他的读者当作傻瓜，他留给了读者足够的思考空间。</p>\n<p>推开故事发展、人物性格刻画的需求，单看各个案子的话，会觉得中间的所有案件几乎都索然无味，也明显缺乏设计。不过作者是个很懂得写作技巧的人，他用这一个个简单的案件将故事推进的同时，刻画了男女主角的性格特点，同时东野圭吾又让男女主角的故事在两条平行线中发展，仅仅通过些许暗示让两者产生关联。有趣的是，这“些许暗示”又被故意表露得如此明显。让读者心领神会，而后又带着淡淡地期待一直阅读下去。</p>\n<p>全书最令我欣赏的是其结构。若是我来构思一篇侦探推理小说，一定会绞尽脑汁设计一个精妙的犯罪手法，然后引导读者寻找凶手。而东野圭吾几乎在一开始便把凶手告诉了你。随着剧情的推进，你会一步步确信自己的猜测：“没错，凶手就是他”。作者及早地告诉了读者凶手，却隐去了犯罪动机及部分犯罪手法，类比其《嫌疑人x的献身》，后者则是一开始便告诉读者凶手及犯罪动机，隐去了犯罪手法。这正是东野圭吾写作方式的高明之处。真实的案件中，很有可能调查了成百上千人后，凶手偏偏是最后出现的路人甲。而在文学作品中若如此处理，显然会引来读者的谩骂。文学作品中的凶手，必然是作品行文中刻画过的人物。如果你尝试去构思用文字描述一起犯罪并把凶手隐藏到最后，就会发现很难做到。</p>\n<p>东野圭吾很好地把难点转移了。案件不必设计得极其精妙，推理逻辑也不必追求完美无缺，依然可以很好的将悬念留到最后。</p>\n<p>另一个巧妙之处便是对主角的处理。全书读下来就会发现，其实对主角——尤其是男主角桐原亮司——的正面描写很少。而看似相爱的男女主角更是仿若生活在两个世界。他们之间没有对话，貌似没有共同的故事。作者在推理小说中引入了两人稍显“虐心”的感情故事，更是将推理小说的写作难点完美的转移出去。仿佛全书的主旨得到了升华，会让人觉得这是一本探讨了人性善恶的书，是一本有思想深度的书。然而类比一些描写人性的纯文学作品就会发现，《白夜行》顶多只能算是一部还不错的推理小说，其文学性尚且差得远。</p>\n<p>我不热衷于讨论桐原亮司与唐泽雪穗的感情话题。这是作者为全书最大的留白。也许作者也犹疑如何定位两人的感情，于是只留暗示，不明确写作两人的感情。无论他们是相爱、相怜还是相互利用，都是解释得通的。就连假若“他们相爱，完全有条件在一起，却又不这么做”都是合情合理的。像“唐泽雪穗究竟喜欢谁”这样的话题，可以从诸多不同角度说出合理的解释。</p>\n<p>来谈几个细节。</p>\n<p>当我读到这段话的时候，我是带着一种被科普的心态的：</p>\n<blockquote>\n<p>人的肌肤拥有绝佳的记忆力。听说，一个人的肌肤会记住所承受过紫外线的量。所以，晒黑的肌肤就算白了回来，等到年纪大了，伤害依然会出现，黑斑就是这样来的。</p>\n</blockquote>\n<p>但等到全书读完，我才明白这段话的妙处。它正是对雪穗人生境遇的描写。雪穗的童年创伤正是晒黑的肌肤，必然在年纪大了时生出黑斑。</p>\n<p>还有开篇当铺老板死亡时，引发了老刑警笹垣怀疑的“松开的皮带”。作者用了不少笔墨来强调这事，到了最后解答案情时却懒得呼应它。</p>\n<p>再比如一处细节描写。当雪穗的母亲煤气中毒时，雪穗去找管理员田川并告诉他自己没带钥匙：</p>\n<blockquote>\n<p>田川敏夫看着西本雪穗苗条的背影走在草草铺设的小巷里。雪穗没有背小学生书包，只是提着红色塑料制手提书包。<br>每动一下，她身上便传出叮当作响的铃声。田川对于那是什么铃铛感到好奇，用心去看，但从外表看不出来。</p>\n</blockquote>\n<p>而后来雪穗与其家教正晴的对话：</p>\n<blockquote>\n<p>“好旧的钥匙圈啊。”正晴说。<br>“是呀。这个，那时候也串了家里的钥匙。可是偏偏就在那一天，我放在家里忘了带。”说着，她把钥匙放回口袋。<br>钥匙圈上的小铃铛发出了叮当的声响。 </p>\n</blockquote>\n<p>最后谈谈我对本书的价值观。</p>\n<p>不论出于什么样的家庭背景或有过什么样的童年创伤，雪穗从骨子里已然是一个“坏人”。我只想向自己确认，这种美丽的罪恶，是否就应该被大众从容地原谅？假若为这本书写个前传，桐原亮司的父亲也是因为童年创伤，承受了命运的不公呢？</p>\n<p><img src=\"/images/books/baiyexing.jpg\" alt=\"baiyexing\"></p>\n"},{"title":"(转) 0-3 岁宝宝 27 项生活自理能力养成法","url":"http://zhangqiang.work/posts/319201603/","content":"<p>自理能力，是指凭自己的能力能够独立完成的事项。请不要小看0～3岁的幼儿，虽然他们年龄不大，但也会主动表现出照顾自己的情形，比如伸手去扶奶瓶、自己拿汤匙进食、喝水、主动表达尿布湿了或想上厕所等。</p>\n<p>当幼儿表现出一定的自理意愿时，如果父母能适时加以协助、引导，就能使幼儿更好、更快地培养出良好的生活自理能力。有研究表明，凡是生活自理能力比较强的幼儿，将更有信心面对种种挑战。因此，为了让孩子在未来的生活和学习中有着更好的表现，就从现在开始培养27项自理能力吧！</p>\n<h2 id=\"Part1-0～3个月\"><a href=\"#Part1-0～3个月\" class=\"headerlink\" title=\"Part1 0～3个月\"></a>Part1 0～3个月</h2><h3 id=\"能力1：吸吮\"><a href=\"#能力1：吸吮\" class=\"headerlink\" title=\"能力1：吸吮\"></a>能力1：吸吮</h3><p>对宝宝而言，吸吮能力是一项必备的技能，他们正是通过吸吮反射来摄取维持生存所必需的养分。如果吸吮能力不佳，不仅营养摄取受到限制，原始口腔欲望也无法得到满足，还可能对情绪发展及行为发展造成障碍，并且影响日后的吞咽、咀嚼与说话能力。</p>\n<p><strong>准备工作：安静的环境</strong></p>\n<p>新生儿6个星期之前混合喂养，最容易引起乳头错觉，要么孩子拒绝乳头，要么因为衔乳姿势不正确，导致乳头皲裂，给妈妈带来痛苦。即使需要也应该让孩子先吸吮妈妈的乳头，再吃奶瓶，让宝宝知道，必须通过努力吸吮才能吃到奶。因为吸吮奶嘴比吸吮乳头省力，一旦习惯奶嘴，就不太愿意费力吸乳头。更因为吸吮奶嘴和吸吮乳头是两种截然不同的技巧。</p>\n<p>让宝宝有正确的衔乳姿势，做到她的脸完全对准乳头、身体完全侧过来，做到她的嘴含住大部分的乳晕、下颏紧贴着乳房、下方的乳晕含的比上方多（因为乳汁是依靠婴儿下颌挤压乳晕而泌出的）下嘴唇完全翻过来贴在下颏。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>让宝宝横躺在你怀里，整个身体对着你的身体，脸对着你的乳房。注意宝宝不应该扭转头和脖子来找奶头，他的头应该枕在你的前臂或者肘窝里，你的前臂托住他的背，你的手托住他的屁股或者腿。</li>\n<li>用另外一只手握住乳房，拇指在上方，另外四只手指头捧住下方，形成一个C字。注意手指头要离开乳晕一段距离。</li>\n<li>用乳头逗引宝宝的下唇，或者，如果宝宝的脸转向另一边，轻轻地划过他的脸颊，觅食的本能会令宝宝转头向你。再次逗引他的下唇，轻声鼓励宝宝张大嘴。等到宝宝嘴张的最大时，迅速地搂紧他，让他来含住乳房。乳头应该长驱直入他的嘴里，压在他舌头上方，乳晕也至少应含入1英寸（2.5厘米）。他的鼻尖应该碰到你的乳房。即使你们贴得很近，他也不会呼吸困难；婴儿的鼻子向上翘，鼻孔冲外，因此他们吃母乳时可以顺畅呼吸。他的下巴也应碰到你的乳房，他的嘴唇应该呈外翻形状。你可能要试几次才成功，如果宝宝不耐烦，暂时停下来，待到宝宝平静下来再试。</li>\n<li>宝宝不仅要含住你的乳头，更重要的是，要含住大部分的乳晕，你的乳头应该完全越过宝宝的牙床。仅仅吸吮乳头不仅不会使宝宝吃到奶，而且会引起乳头皲裂。正确的姿势有助于宝宝挤压乳晕下的输奶管，以获取大量乳汁。一旦发现宝宝的衔乳方式不对，应该用小手指伸进宝宝下唇和乳房之间，断开衔接，重新来。</li>\n<li>注意宝宝应该吸吮你的乳房，而不是他的舌头或下唇。如果发现宝宝的下唇窝在嘴里，可以用手轻轻拨弄他的下巴和嘴，将下唇释放出来。宝宝吸吮的，应该是你的乳晕，这样才能有效地刺激乳腺分泌乳汁。</li>\n</ol>\n<h2 id=\"Part2-4～6个月\"><a href=\"#Part2-4～6个月\" class=\"headerlink\" title=\"Part2 4～6个月\"></a>Part2 4～6个月</h2><h3 id=\"能力2：伸手抓握奶瓶\"><a href=\"#能力2：伸手抓握奶瓶\" class=\"headerlink\" title=\"能力2：伸手抓握奶瓶\"></a>能力2：伸手抓握奶瓶</h3><p>请不要小看宝宝伸手抓握奶瓶的意义，在生理上，这不仅表示他已具有“吸吮”与“双手可碰在一起”的能力，在心理上更有助于培养注意力。当宝宝会伸手帮忙拿奶瓶时，可说是正式踏出自我照顾的第一步。</p>\n<p><strong>准备工作：奶瓶、安静的环境</strong></p>\n<p>每当宝宝要喝奶时，不要急着把奶瓶塞在宝宝口中，可先拿着奶瓶让他看几秒，同时对他说：“喝奶的时间到啦，看，这就是你的奶瓶。”然后慢慢将奶瓶移到宝宝的脸边，让他可以感觉到，此时只要宝宝出现看奶瓶的动作，就可以开始喂食。</p>\n<p><strong>培养建议</strong></p>\n<p>刚一开始，宝宝可能无法抓住奶瓶，此时妈妈可帮他把手放在奶瓶上，为日后自己扶住奶瓶做好准备。奶瓶要有温温的感觉，宝宝才会喜欢把手放上去。在喂食时不要把宝宝的双手挡住，这样他才能将一只手或双手放在奶瓶上。</p>\n<p>如果宝宝能够把手放到奶瓶上，就可以进行下一步的练习。大人只握住奶瓶底部，留下中间位置让宝宝去抓握，再视状况调整奶瓶角度。有时宝宝拒绝去抓握奶瓶，表示还存在依赖心理，父母可适时帮忙扶住奶瓶，让宝宝有被支持的感觉。</p>\n<p>如果宝宝一直不喜欢抓握奶瓶，则可以给奶瓶套上一些不同材质的东西，如小袜子或运动用的护手圈，吸引宝宝想要触摸的欲望，同时增加不同的触觉体验。</p>\n<h3 id=\"能力3：接受用汤匙喂食\"><a href=\"#能力3：接受用汤匙喂食\" class=\"headerlink\" title=\"能力3：接受用汤匙喂食\"></a>能力3：接受用汤匙喂食</h3><p>相比天生的吸吮能力来说，吞咽能力必须依靠后天的学习而获得。吞咽能力不仅影响到营养摄取及口腔发育，也关系到肠胃道消化功能和说话能力。因此，在宝宝能够添加辅食时（一般从4个月大起），就可开始练习用汤匙喂食。</p>\n<p><strong>准备工作：婴儿专用餐具、果泥、安静的环境</strong></p>\n<p>父母与宝宝面对面，让盛有果泥的汤匙出现在宝宝的视线内（可靠近宝宝唇边），同时发出一些声音，以嗅觉、视觉与味觉吸引宝宝的注意。然后，父母做出张开嘴巴吞入食物的动作（表情可以夸张一点），激发宝宝模仿的兴趣。</p>\n<p>在喂食时，先将汤匙平放在宝宝舌头上轻轻按一下，再把汤匙拿出，此时应鼓励宝宝做出合唇动作，以利用上唇把食物从汤匙上抿下来。刚开始宝宝可能会用舌头推出汤匙或去吸汤匙中的食物，父母一定要有耐心，陪着宝宝多多练习。</p>\n<p><strong>培养建议</strong></p>\n<p>如果宝宝无法顺利使用汤匙进食，父母可利用玩偶玩喂食游戏，用夸张的表情和声音示范吞入食物的动作，让宝宝因感觉有趣而愿意尝试。如果宝宝的口腔感觉过于敏感，可在喂食前先按摩其双颊及唇边肌肉。如果宝宝的合唇动作不佳，在进食时可用食指与中指轻压其上下唇，以帮助合唇。</p>\n<h2 id=\"Part3-7～12个月\"><a href=\"#Part3-7～12个月\" class=\"headerlink\" title=\"Part3 7～12个月\"></a>Part3 7～12个月</h2><h3 id=\"能力4：自己拿住奶瓶进食\"><a href=\"#能力4：自己拿住奶瓶进食\" class=\"headerlink\" title=\"能力4：自己拿住奶瓶进食\"></a>能力4：自己拿住奶瓶进食</h3><p>原本只是像配角一样扶住奶瓶的宝宝，现在已经能够像主角一样，依靠自己的力量拿住奶瓶，甚至能主动调整奶瓶的倾斜度。当然，即便宝宝已经具有自己拿奶瓶的能力，但是在宝宝喝奶时，大人最好仍陪在旁边，以避免发生呛奶等意外。</p>\n<p><strong>培养建议</strong></p>\n<p>如果宝宝还不能自己拿奶瓶，黄绮虹医师建议父母采取如下措施：</p>\n<ol>\n<li>在喂食时，父母先帮忙扶着奶瓶，顺势拉着宝宝的手扶住奶瓶，再慢慢移动自己的手至奶瓶底部。</li>\n<li>注意宝宝的喝奶姿势，避免呛奶或感染中耳炎。可在宝宝头上或上背部放一个枕头或软垫，使宝宝头部保持直立。</li>\n<li>可以考虑使用比较轻的奶瓶，以便宝宝更好地抓握。如果宝宝的手臂控制力不佳，则建议改用带有握把的奶瓶。</li>\n</ol>\n<h3 id=\"能力5：吞咽糊状辅食\"><a href=\"#能力5：吞咽糊状辅食\" class=\"headerlink\" title=\"能力5：吞咽糊状辅食\"></a>能力5：吞咽糊状辅食</h3><p>经过一段时间的汤匙喂食，相信大多数宝宝已经能够用舌头移动食物，并可吞下比较黏稠的食品。此时可以给宝宝提供煮得烂一点的粥、捣碎的香蕉、梨子等黏稠度较高的食物，鼓励宝宝的唇、舌做出主动进食的动作，甚至可把食物从不同方向的嘴角送入，让宝宝用舌头练习“舔”的动作。</p>\n<p><strong>培养建议</strong></p>\n<p>假如宝宝的吞咽动作一直不熟练，黄绮虹医师建议采取如下措施：</p>\n<ol>\n<li>如果宝宝一直吐着舌头将食物顶出，可用小而浅的汤匙向下轻压其舌头的中间部分，并以手指帮宝宝把下唇轻轻合上，让他吞下食物。</li>\n<li>如果宝宝的舌头移动有困难，可用手指或压舌板在宝宝的口腔内朝各边轻推，帮助宝宝练习移动舌头。</li>\n<li>大人使用舌头做出夸张的动作，并且故意让宝宝看到，激发其模仿的兴趣。</li>\n<li>可鼓励宝宝吃手与玩具，请放心，1岁之内吃手可以帮助口腔动作有更好的发展，不必担忧因此而养成坏习惯。</li>\n</ol>\n<h3 id=\"能力6：自己拿食物吃\"><a href=\"#能力6：自己拿食物吃\" class=\"headerlink\" title=\"能力6：自己拿食物吃\"></a>能力6：自己拿食物吃</h3><p>随着宝宝大小肌肉的发展及手眼协调能力的日益成熟，他自己已经能够拿着固体食物送入口中，这表示宝宝开始学习用牙龈咬固体食物。此时不需要牙齿，只是利用舌头把食物顶到嘴巴上方，再通过腭部做出上下咬合的动作，这一连串的动作有助于日后发展出比较成熟的咀嚼动作。</p>\n<p><strong>培养建议</strong></p>\n<p>为了让宝宝尽快拥有自己拿食物吃的能力，黄绮虹医师提醒父母注意以下几点：</p>\n<ol>\n<li>可以多提供一些半固体的食物，如小面包、起司片、凝胶状食物、煮得较烂的红萝卜条或切成条状的香蕉等，这些食物不需要真正的咬合即可溶化，能让宝宝轻松获得使用牙龈咬食物的乐趣。</li>\n<li>不要提供坚硬、小碎块的食物，如花生、糖果、爆米花等，以免呛到宝宝。另外，在宝宝躺着、哭闹及移动时，不要让宝宝单独进食。</li>\n<li>为了让宝宝的能力有更好的发展，不要怕孩子吃得一团糟。另外，还要留出足够的时间让宝宝去咬、吞，千万不要催促。</li>\n</ol>\n<h3 id=\"能力7：拉下头上的帽子\"><a href=\"#能力7：拉下头上的帽子\" class=\"headerlink\" title=\"能力7：拉下头上的帽子\"></a>能力7：拉下头上的帽子</h3><p>在练习穿衣服之前，“脱”是一个很重要的动作，当宝宝能主动拉下帽子时，就表示他有了主动参与的意愿，不再一直处于被动状态。请试着在宝宝头上戴上帽子，并抱着他照镜子，指着帽子说：“宝宝戴帽子。”然后示范把帽子拿开，并说：“宝宝摘帽子。”再帮宝宝戴上帽子，引导他自行拉下帽子。只要宝宝出现了拉扯动作，就算具备了该项能力。</p>\n<h2 id=\"Part4-13～18个月\"><a href=\"#Part4-13～18个月\" class=\"headerlink\" title=\"Part4 13～18个月\"></a>Part4 13～18个月</h2><h3 id=\"能力8：用学习杯喝水\"><a href=\"#能力8：用学习杯喝水\" class=\"headerlink\" title=\"能力8：用学习杯喝水\"></a>能力8：用学习杯喝水</h3><p>虽然吸吮是一种天生的反射动作，但是如果练习机会不足，依然可能出现障碍，特别是不足34周的早产生儿，更容易因肌肉张力不足而缺乏良好的吸吮能力。所以，在从吸吮奶嘴过渡到用杯子喝水时，更有必要让宝宝多多练习。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>市面上有许多采用不同设计的学习杯，可挑选有趣、鲜艳的样式，以吸引宝宝的学习兴趣。</li>\n<li>由于拿杯子需要使用到腕力，可挑选有把手的杯子，以方便宝宝抓握。</li>\n<li>喝水需要抿嘴、吞咽，如果宝宝在1岁之后还是经常流口水，则表示其嘴巴闭合功能较差，需要多练习抿嘴动作，父母平时可跟宝宝玩嘴巴游戏，如发“呣”“啊”等声音，以练习张嘴、闭嘴的动作。</li>\n<li>要增加嘴部肌肉的张力，可让宝宝玩吹乒乓球的游戏，或是多咀嚼一些比较硬的食物。</li>\n</ol>\n<h3 id=\"能力9：用吸管喝水\"><a href=\"#能力9：用吸管喝水\" class=\"headerlink\" title=\"能力9：用吸管喝水\"></a>能力9：用吸管喝水</h3><p>从用学习杯过渡到用吸管喝水，又是宝宝吸吮能力的一大进步。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>刚开始可用较细的吸管来练习，因为细、短的吸管更容易让宝宝的口腔肌肉发力，等到熟练之后，再换用长一点、粗一点的吸管。</li>\n<li>“吹”的动作比较容易学习，但“吸”的动作则相对困难一些。父母可用软包装的饮料帮助宝宝练习，当宝宝无法顺利做出“吸”的动作时，可稍微挤一下饮料盒，这样饮料就被挤到宝宝口中，让宝宝感受到“吸”的作用。</li>\n</ol>\n<p>口腔能力攸关其日后的构音，实在有必要多练习！</p>\n<h3 id=\"能力10：自行使用汤匙或叉子\"><a href=\"#能力10：自行使用汤匙或叉子\" class=\"headerlink\" title=\"能力10：自行使用汤匙或叉子\"></a>能力10：自行使用汤匙或叉子</h3><p>随着宝宝的小肌肉发展越来越好，可以放手让他练习自行使用汤匙或叉子进食。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可以先提供握柄比较粗、短的汤匙，以方便宝宝抓握。刚开始不必纠正宝宝的握姿，只要能够做出握汤匙的动作即可。随着宝宝的手腕动作越来越灵活，其抓握动作也会逐渐规范起来。</li>\n<li>在使用汤匙时，请注意让其他餐具保持稳定，因为宝宝刚使用汤匙时，从碗中舀起食物的动作更像“戳”，稍不留意就容易把碗打翻。因此，不妨使用防滑垫或底部加有止滑垫的餐具。</li>\n<li>为了让宝宝顺利用汤匙舀起食物，可先从泥状或糊状食物开始练习。如果要使用叉子，可将食物切成容易叉取的小块。</li>\n</ol>\n<h3 id=\"能力11：咀嚼半固体食物\"><a href=\"#能力11：咀嚼半固体食物\" class=\"headerlink\" title=\"能力11：咀嚼半固体食物\"></a>能力11：咀嚼半固体食物</h3><p>随着咀嚼能力的提升，宝宝的进食种类也随之增加，这样不但能够获取更加丰富而均衡的营养，还能丰富口腔经验，加速口腔肌肉发育，对日后的语言学习大有帮助。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可先让宝宝自行拿取入口即可溶化的食物，如牙饼，让他慢慢摸索吃东西的方法。</li>\n<li>逐渐提供小块、较软的食物让宝宝尝试，即便宝宝拒绝尝试，也不要很快放弃该食物，可以试着变换其他的拿取方式，只要宝宝愿意尝试，即使用手抓着吃也没关系。</li>\n<li>提供多样化食物，鼓励宝宝积极尝试，以丰富咀嚼经验，比如含有纤维质的食物。只要宝宝能吃上几口，就要及时给予鼓励，这样宝宝对于吃东西就有了良好的感受，进而愿意继续尝试。</li>\n</ol>\n<h3 id=\"能力12：表示尿湿了或已经排便\"><a href=\"#能力12：表示尿湿了或已经排便\" class=\"headerlink\" title=\"能力12：表示尿湿了或已经排便\"></a>能力12：表示尿湿了或已经排便</h3><p>在对宝宝进行如厕训练之前，最重要的就是他能够明确表达自己的生理状况，知道什么是尿尿或便便，并主动告诉父母。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>父母应尽量掌握宝宝的排泄状况，可通过宝宝的动作（如双脚交叉、扭动）、表情（涨红的脸）来加以判断，把握其排泄规律，准确预测需要换尿布的时间，并在适当时机先询问宝宝：“你是不是尿尿了？”让他理解尿尿与便便的意思是什么。</li>\n<li>在比较准确地掌握宝宝的排便规律之后，慢慢把更换尿布的时间提前，引导宝宝直接在坐便器上解决大小便，为日后的如厕训练预做准备。</li>\n</ol>\n<h3 id=\"能力13：用毛巾擦嘴\"><a href=\"#能力13：用毛巾擦嘴\" class=\"headerlink\" title=\"能力13：用毛巾擦嘴\"></a>能力13：用毛巾擦嘴</h3><p>养成良好的卫生习惯，是宝宝需要建立的生活规范之一。在吃完东西后，可引导宝宝主动用毛巾擦嘴，逐渐养成保持自身清洁的好习惯。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>进食前可在宝宝身边准备一条小方巾，以方便随时使用。</li>\n<li>吃完之后，不必急着让宝宝用毛巾擦嘴，可先让他用舌头舔去嘴边的渍痕，这也是建立本体觉的方式之一。让宝宝感受嘴边有残留饭粒，再用舌头灵活地舔去，舌头的活动能力得到强化，日后学习正确发音也更为顺畅。</li>\n<li>刚开始使用毛巾时，父母可轻拉宝宝的手拿毛巾，做出擦拭动作，让宝宝了解擦嘴巴的意义，慢慢熟练这一动作。</li>\n</ol>\n<h3 id=\"能力14：洗手\"><a href=\"#能力14：洗手\" class=\"headerlink\" title=\"能力14：洗手\"></a>能力14：洗手</h3><p>早日协助宝宝养成勤洗手的习惯，可以降低很多疾病的发生几率。除了教宝宝学会洗手之外，也应教导他外出回家后第一件事就是洗手，在饭前、便后或摸过脏东西后也要洗手。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>爱玩水可说是宝宝的天性，可以作为引导宝宝学习洗手的一大工具。</li>\n<li>事先分解洗手的步骤，一步步教会宝宝。比如先踩在椅子上够到洗手台——拉起衣服袖子——湿手+打肥皂+搓手——打开水龙头冲水——擦干手。</li>\n<li>在打肥皂时，可顺势教宝宝认识手掌、手背、各个指头及指缝。</li>\n<li>不论用扭还是用扳的方式打开水龙头，都是一种手指训练，可试着让宝宝自己来，以便早日学会独立洗手。</li>\n</ol>\n<h2 id=\"Part5-19～24个月\"><a href=\"#Part5-19～24个月\" class=\"headerlink\" title=\"Part5 19～24个月\"></a>Part5 19～24个月</h2><h3 id=\"能力15：用汤匙进食\"><a href=\"#能力15：用汤匙进食\" class=\"headerlink\" title=\"能力15：用汤匙进食\"></a>能力15：用汤匙进食</h3><p>当宝宝能自行用汤匙进食时，表示其手腕动作的成熟度已与成人相近，自理能力也已发展到一定的水准。此时对宝宝的要求可以高一些，不仅能够使用汤匙，还需要培养一些用餐礼仪，如吃东西时一手拿餐具，一手扶住碗；吃完才能离开餐桌；食物不能洒落太多等。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先带着宝宝练习使用汤匙，拉着他的手做出“舀”的动作，并协助其把汤匙中的食物送至口中。</li>\n<li>可搭配玩具进行练习，增强宝宝的学习动机。让宝宝从练习喂玩具娃娃开始，再运用到自己身上。</li>\n<li>平常可多玩一些运用到手腕动作的游戏，如铲沙子，增加手腕活动的灵活度。</li>\n<li>创造机会让宝宝与其他孩子一起用餐，增强其观察、模仿的意愿，尽快学会使用汤匙进食。</li>\n</ol>\n<h3 id=\"能力16：咀嚼固体食物\"><a href=\"#能力16：咀嚼固体食物\" class=\"headerlink\" title=\"能力16：咀嚼固体食物\"></a>能力16：咀嚼固体食物</h3><p>宝宝的口腔肌肉越来越灵活，加上牙齿的咀嚼能力日益提升，能吃的食物种类越来越丰富，对于均衡摄取各种营养大有帮助。需要注意的是，要随时提醒宝宝养成细嚼慢咽的习惯。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可提供切成片的苹果或稍微硬一点的饼干，让宝宝练习用门牙咬断、用舌往后送并且吞咽，逐渐养成先吞下一口、再吃一口的习惯。</li>\n<li>食物不要切得太细，多给宝宝提供练习机会，以学习咬断食物。比如肉条、烫过的西芹等切成小段的食品，都是宝宝练习咬断食物的好食材。</li>\n</ol>\n<h3 id=\"能力17：在大人协助下练习刷牙\"><a href=\"#能力17：在大人协助下练习刷牙\" class=\"headerlink\" title=\"能力17：在大人协助下练习刷牙\"></a>能力17：在大人协助下练习刷牙</h3><p>刷牙不仅是良好的卫生习惯，也能让幼儿提升手部运作的能力。虽然宝宝此时还不能刷得很好，不过重点在于让宝宝接受刷牙。因此，父母务必要有耐心，持续协助宝宝刷牙，直到他养成习惯为止。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>把牙刷放进口中，刚开始可能会让宝宝感觉不舒服，可先以牙刷套套在宝宝手指上，让他慢慢接受刷牙。一开始可以不用牙膏，避免造成宝宝不适，刷牙后直接用清水漱口即可。</li>\n<li>父母与宝宝一起刷牙，让他模仿父母的动作。由于刷牙牵涉手、嘴、眼的协调动作，所以不妨对着镜子练习，以便宝宝更好地掌握姿势。</li>\n<li>刷牙时先从前面的牙齿刷起，再刷后面的牙齿。</li>\n<li>鼓励宝宝自己刷牙很重要，但是碍于能力不足，宝宝刚开始很难真正刷干净，还需要父母的协助。因此，可以先让宝宝自己刷，最后再帮他从前到后完整地刷一次，确保口腔卫生。</li>\n</ol>\n<h3 id=\"能力18：在大人协助下脱外套、裤子及鞋子\"><a href=\"#能力18：在大人协助下脱外套、裤子及鞋子\" class=\"headerlink\" title=\"能力18：在大人协助下脱外套、裤子及鞋子\"></a>能力18：在大人协助下脱外套、裤子及鞋子</h3><p>在会穿衣裤之前，必须先学会脱衣裤，因为“脱”比“穿”的动作更容易。<br>可先让宝宝用玩偶进行练习，经过实际操作后再运用到自身。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>短袖衣服、短裤比长袖衣服、长裤更容易脱，建议从短裤、短袖衣服开始练习，不论用什么姿势，只要宝宝能顺利脱下衣服都可以。</li>\n<li>脱衣服需要运用到关节动作，可依照宝宝的习惯帮他分解各种动作，以开襟式衣服为例，先解开衣服扣子或拉链，脱之前把衣服往前拉，再把手伸离袖子。父母可适时提供协助，让宝宝对脱衣服建立自信心，并提升学习意愿。</li>\n<li>脱裤子时，先让他站着，协助他把裤子往下拉至大腿处，再让他坐下来，自己把裤子拉到脚踝处，然后把脚伸出裤管。</li>\n</ol>\n<h3 id=\"能力19：在大人协助下穿衣服\"><a href=\"#能力19：在大人协助下穿衣服\" class=\"headerlink\" title=\"能力19：在大人协助下穿衣服\"></a>能力19：在大人协助下穿衣服</h3><p>从容易穿脱的衣物开始练习，其中开襟式与套头式衣物的穿法不同，开襟式衣物比较容易穿脱，而套头式衣物则等宝宝两三岁时再练习。在开襟式衣物中，背心又比短袖衣物更方便练习。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先让宝宝分辨衣物的前后与正反面，协助他穿上一边，另外一边则可让他试着自己穿上。</li>\n<li>穿裤子时，先让宝宝坐着，把脚伸进裤管，再把裤子拉至大腿处，然后起身把裤子往上拉，接着做最后的整理工作。</li>\n<li>根据宝宝的能力发展，逐步提供难度高一点的衣物加以练习。</li>\n<li>要给宝宝留出足够的练习时间，不要因为急着出门或其他原因而催促宝宝，更不要因为宝宝穿得不好而责备他，那样会打击其自信心，进而丧失继续学习的动力。</li>\n</ol>\n<h3 id=\"能力20：帮忙做简单家务\"><a href=\"#能力20：帮忙做简单家务\" class=\"headerlink\" title=\"能力20：帮忙做简单家务\"></a>能力20：帮忙做简单家务</h3><p>不论收拾玩具或做其他家务，父母都应先带头做出表率，使宝宝有一个好的模仿、学习对象，提升参与的动机。另外，父母不要用成人标准去要求宝宝，只要宝宝愿意做，就应给予鼓励。<br>　　<br><strong>培养建议</strong></p>\n<ol>\n<li>在收拾玩具之前，要让宝宝知道玩具应该放在哪里，玩具的摆放位置最好是固定一处，让宝宝有明确的印象。每次玩玩具时，父母应陪着宝宝在固定的地方玩，并陪着他一起收拾。</li>\n<li>做其他家务也是一样，父母一边做，一边让宝宝在旁边观看，时间一长，宝宝也想自己做做看。此时可准备宝宝的专属工具，如小抹布，邀请他和父母一起擦桌子，事后给予及时鼓励。</li>\n</ol>\n<h3 id=\"能力21：练习如厕及表达需求\"><a href=\"#能力21：练习如厕及表达需求\" class=\"headerlink\" title=\"能力21：练习如厕及表达需求\"></a>能力21：练习如厕及表达需求</h3><p>如厕需求的表达需要宝宝的括约肌及排泄器官发育成熟后，才能感受到尿意与便意，再加上语言发展成熟，才能明确用语言表达出来。在这个过程中，父母一定要耐心陪伴，千万不可操之过急。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先为宝宝准备可爱有趣的坐便训练器，在父母上厕所时，可带着他一起进厕所，让他学习大人的动作，事先了解成人怎样如厕。</li>\n<li>尽量抓准宝宝大小便的频率，感觉宝宝差不多要排便的时候，可先询问他是否需要上厕所，然后让他在坐便训练器坐上三五分钟，如果能够顺利排尿排便，一定要加以鼓励，以建立其自信心。</li>\n<li>学习如厕的时间最好在夏天，万一弄脏衣裤也方便清洗。</li>\n<li>由于男女如厕方式不同，所以父母应共同承担起带子女学习上厕所的责任，让男孩女孩各自学习到合适的如厕方式。</li>\n</ol>\n<h2 id=\"Part6-25～36个月\"><a href=\"#Part6-25～36个月\" class=\"headerlink\" title=\"Part6 25～36个月\"></a>Part6 25～36个月</h2><h3 id=\"能力22：模仿梳头、刷牙、洗衣等至少3件事情\"><a href=\"#能力22：模仿梳头、刷牙、洗衣等至少3件事情\" class=\"headerlink\" title=\"能力22：模仿梳头、刷牙、洗衣等至少3件事情\"></a>能力22：模仿梳头、刷牙、洗衣等至少3件事情</h3><p><strong>培养建议</strong></p>\n<ol>\n<li>父母平时做这些事情的时候，不论自己梳洗还是帮宝宝做，都要尽量让宝宝看到，以便他对这些事情产生印象。</li>\n<li>很快，你会看到宝宝不时模仿大人的动作，比如给玩具娃娃梳头、刷牙等。这时，可在合适的时机（如早上起床后要梳头、吃过食物后要刷牙）主动把梳子、牙刷交到宝宝手上，让他对着镜子梳头、刷牙，或是在手洗贴身衣物时，让宝宝跟着一起洗自己的小手帕。</li>\n<li>刚开始宝宝的动作不会太熟练，但是只要他愿意做，就尽量给他创造做的机会。可以把一连串的动作拆解成几个步骤，让宝宝从最简单的动作做起。</li>\n</ol>\n<h3 id=\"能力23：上厕所会脱下裤子\"><a href=\"#能力23：上厕所会脱下裤子\" class=\"headerlink\" title=\"能力23：上厕所会脱下裤子\"></a>能力23：上厕所会脱下裤子</h3><p>厕所会脱裤子，这是如厕能力的再次提升。平日可穿松紧带式的裤子，以方便宝宝学习。每次带宝宝如厕时，可以一边做一边说：“先把外面的裤子拉下来，再拉下里面的小内裤。”等到上完厕所，再告诉宝宝：“要先拉上里面的小内裤，再拉上外面的裤子。”经过几次训练之后，宝宝就能熟悉脱、穿衣服的顺序，然后再慢慢训练他将衣服整齐地塞在裤子里。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>父母先示范如何使用双手，将拇指伸进裤子、然后抓住裤子的两侧，最后将裤子脱下。</li>\n<li>刚开始练习时，也许宝宝一时还不能把裤子脱到屁股底下。如果宝宝无法同时使用双手将裤子往下拉，那么可先教他将裤子的一边往下拉，随后再拉另一边，就这样重复拉扯，一直到脱下裤子为止。</li>\n<li>将裤子拉下来后，让宝宝坐在小椅子上，或靠着墙以支撑身体，便于脱下裤子。</li>\n<li>父母示范如何抬起一只脚，把裤管拉下，然后再换另一只脚，将另一只裤管拉下。</li>\n</ol>\n<h3 id=\"能力24：明确表示要上厕所\"><a href=\"#能力24：明确表示要上厕所\" class=\"headerlink\" title=\"能力24：明确表示要上厕所\"></a>能力24：明确表示要上厕所</h3><p><strong>培养建议</strong></p>\n<ol>\n<li>孩子是否能清楚表达自身的生理状况，与其表达能力有着密切关系，而表达能力需要平日一点一滴地积累，因此，协助宝宝拥有一流的表达能力非常重要。</li>\n<li>在陪宝宝进行如厕训练时，父母一定要有足够的耐心，就算宝宝做得不够好，比如刚表达完“要上厕所”的意思，裤子就已经湿了，或是还没有来得及走到厕所就已经尿出来了等，也要加以包容。</li>\n<li>不要因为如厕训练而训斥宝宝，否则容易让他对如厕一事产生恐惧，进而更难摆脱对尿布的依赖。</li>\n<li>父母需要多多用心观察，尽量协助宝宝掌握好如厕的时间，适时加以提醒，逐渐让宝宝知道什么时候上厕所最合适。</li>\n</ol>\n<h3 id=\"能力25：会穿没有鞋带的鞋子\"><a href=\"#能力25：会穿没有鞋带的鞋子\" class=\"headerlink\" title=\"能力25：会穿没有鞋带的鞋子\"></a>能力25：会穿没有鞋带的鞋子</h3><p>一开始可以协助宝宝把脚伸进鞋子内，留下黏上鞋扣的动作给宝宝做。然后让宝宝自己把脚伸进鞋内，让他体验不同动作的困难程度，再适时告诉他应该如何穿鞋。<br>　　<br><strong>准备材料：较大、较宽松、容易穿脱的鞋子（如使用魔鬼粘的鞋子）</strong></p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>让宝宝坐在小椅子上。</li>\n<li>学习分辨左右脚，看哪只脚应该套进哪只鞋。</li>\n<li>帮宝宝把鞋舌往外翻。</li>\n<li>示范如何把脚放进鞋子（先把脚尖穿进鞋内，脚跟再往下踩入鞋内），另一只脚做重复动作，让宝宝跟着做一遍。</li>\n</ol>\n<h3 id=\"能力26：熟练使用汤匙\"><a href=\"#能力26：熟练使用汤匙\" class=\"headerlink\" title=\"能力26：熟练使用汤匙\"></a>能力26：熟练使用汤匙</h3><p>一般来说，2～3岁宝宝的大小肌肉已经发展到一定程度，熟练使用汤匙进食应该不成问题。如果此时宝宝还是无法熟练使用汤匙，就要多创造机会让宝宝练习手腕动作。</p>\n<p><strong>准备材料：铲沙玩具及沙子</strong></p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先让宝宝拿铲子任意铲沙。</li>\n<li>大人和宝宝比赛，看谁铲沙子铲得比较多。宝宝本来就喜欢玩沙子，再加上比赛的刺激心理，玩起来更是乐此不疲，这样就能有效练习手腕动作，进而顺利地使用汤匙进食。</li>\n</ol>\n<h3 id=\"能力27：会解开纽扣\"><a href=\"#能力27：会解开纽扣\" class=\"headerlink\" title=\"能力27：会解开纽扣\"></a>能力27：会解开纽扣</h3><p>脱衣服肯定需要解开衣服上的纽扣，毕竟我们的衣服不可能都是拉链式的。因此，会解开纽扣也是重要的自理能力之一。在学会解开扣子后，再去学习扣上纽扣的动作。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可从大一些的纽扣开始练习，父母可先把纽扣穿过纽扣洞的一半，然后让宝宝完成最后的解开动作，等熟练之后，再让宝宝独立解纽扣。</li>\n<li>先让宝宝练习解开布偶衣服上的扣子，再练习解开自己衣物上的纽扣。</li>\n</ol>\n"},{"title":"HTTP 缓存知识整理","url":"http://zhangqiang.work/posts/128201601/","content":"<p>做一下 HTTP 缓存相关知识点的总结。</p>\n<h3 id=\"1-缓存命中\"><a href=\"#1-缓存命中\" class=\"headerlink\" title=\"1. 缓存命中\"></a>1. 缓存命中</h3><p>关于命中的概念如下：</p>\n<ul>\n<li><strong>缓存命中（cache hit）</strong> 用已有的副本为某些到达缓存的请求提供服务。</li>\n<li><strong>缓存未命中（cache miss）</strong> 一些到达缓存的请求由于没有副本可用，而被转发给原始服务器。</li>\n<li><strong>再验证（revalidation）</strong> 原始服务器的内容可能发生变化，缓存要不时检测其副本是否是服务器上最新的副本。</li>\n<li><strong>再验证命中/缓慢命中（revalidation hit / slow hit）</strong> 缓存对其副本进行再验证时， 会向原始服务器发起一个小的再验证请求，如果服务器返回304缓存再次将副本标识为新鲜的。 缓慢命中要比缓存命中慢，比缓存未命中快。</li>\n</ul>\n<p>考量命中率主要有两种方式：</p>\n<ul>\n<li><strong>缓存命中率</strong> 由缓存提供服务的请求所占的比例。对现在中等规模的缓存，40%的命中率是合理的。</li>\n<li><strong>字节命中率</strong> 缓存提供的字节在传输的所有字节中所占的比例。</li>\n</ul>\n<h3 id=\"2-处理过程\"><a href=\"#2-处理过程\" class=\"headerlink\" title=\"2. 处理过程\"></a>2. 处理过程</h3><p><img src=\"http_cache.png\" alt=\"http_cache\"></p>\n<h3 id=\"3-再验证\"><a href=\"#3-再验证\" class=\"headerlink\" title=\"3. 再验证\"></a>3. 再验证</h3><p>相关的 5 个条件首部：</p>\n<ul>\n<li><code>If-Modified-Since</code> ：通过比较过期日期进行再验证。</li>\n<li><code>If-None-Match</code> ：通过比较实体标签(ETag)进行再验证。</li>\n<li><code>If-Unmodified-Since</code> ：在进行部分文件的传输时，获取文件的其余部分之前用来确保文件未发生变化。</li>\n<li><code>If-Range</code> ：支持对不完整文档的缓存。</li>\n<li><code>If-Match</code> ：用于与Web服务器打交道时的并发控制。</li>\n</ul>\n<p>IMS请求：<code>If-Modified-Since</code> 再验证请求。只有自某个日期之后资源发生了变化的时候，IMS请求才会执行：返回新文档给缓存或304，以及新的过期日期。有些Web服务器只是将IMS日期和文档最后修改日期进行字符串比较。</p>\n<p>强弱验证器：只要内容发生变化，强验证器就会变化；内容的主要含义发生变化时，弱验证器会变化。服务器会用 <code>W/</code> 前缀来标识弱验证器。</p>\n<pre><code>ETag: W/&quot;v2.6&quot;\nIf-None-Match: W/&quot;v2.6&quot;\n</code></pre><p>如果服务器回送了一个 <code>ETag</code> ，HTTP1.1客户端就必须使用实体标签验证器。如果服务器只回送一个 <code>Last-Modified</code> 值，客户端就可以使用 <code>If-Modified-Since</code> 验证。如果两种方式都提供，客户端应该使用两种再验证方式。</p>\n<h3 id=\"4-控制缓存\"><a href=\"#4-控制缓存\" class=\"headerlink\" title=\"4. 控制缓存\"></a>4. 控制缓存</h3><ul>\n<li><strong>Cache-Control: no-store</strong> ：禁止缓存对响应进行复制。缓存会像非缓存代理服务器一样，像客户端发送一条 no-store 响应，然后删除对象。</li>\n<li><strong>Cache-Control: no-cache</strong> ：响应可以存储在本地缓存区中。只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。</li>\n<li><strong>Pragma: no-cache</strong> ：兼容HTTP1.0+</li>\n<li><p><strong>Cache-Control: max-age</strong> ：从服务器将文档传来之时起，可以认为此文档处于新鲜状态的秒数。 <code>s-maxage</code> 表示仅适用于公有缓存。服务器可以将最大使用期设置为 0 ，从而在每次访问时都刷新。</p>\n<pre><code>Cache-Control: max-age=3600\nCache-Control: s-maxage=3600\n</code></pre></li>\n<li><p><strong>Expires</strong> ：(不推荐使用) 指定实际的过期日期。HTTP设计者后来认为服务器时钟不同步或不正确，<br>所以最好还是使用剩余秒数来表示过期时间。</p>\n</li>\n<li><strong>Cache-Control: must-revalidate</strong> ：缓存在事先没有跟原始服务器进行再验证的情况下，<br>不能提供对象的陈旧副本。如果缓存进行新鲜度检查时原始服务器不可用，缓存必须返回<strong>504</strong>错误。</li>\n<li><strong>试探性过期</strong> ：缓存可以计算出一个试探性最大使用期。<em>LM-Factor算法</em></li>\n</ul>\n<p><strong>附表： Cache-Control</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Cache-Control: max-stale</td>\n<td style=\"text-align:left\">缓存可以随意提供过期文件(放松缓存规则)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: max-stale=s</td>\n<td style=\"text-align:left\">在时间 s 秒内，文档不能过期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: min-fresh=s</td>\n<td style=\"text-align:left\">至少在未来 s 秒内文档要保持新鲜(严格规则)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: max-age=s</td>\n<td style=\"text-align:left\">缓存无法返回缓存时间长于 s 秒的文档(严格规则)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: no-cache</td>\n<td style=\"text-align:left\">除非资源进行了再验证，否则客户端不接受已缓存的资源</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pragma: no-cache</td>\n<td style=\"text-align:left\">HTTP/1.0+ 同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: no-store</td>\n<td style=\"text-align:left\">缓存应该尽快从存储器中删除文档的所有痕迹</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: only-if-cached</td>\n<td style=\"text-align:left\">只有当缓存中有副本存在时，客户端才会获取一份副本</td>\n</tr>\n</tbody>\n</table>\n<p><em>主要参考资料：《HTTP权威指南》</em></p>\n"},{"title":"JavaScript 知识整理","url":"http://zhangqiang.work/posts/1231201512/","content":"<p>2015年最后一天了，写本文以整理我对 JavaScript 的一些理解，试将零散的知识归总。此文非语法整理，内容偏中高级，如有纰漏或错误，请予以指正。</p>\n<h2 id=\"1-对象模型\"><a href=\"#1-对象模型\" class=\"headerlink\" title=\"1. 对象模型\"></a>1. 对象模型</h2><h3 id=\"1-1-数据类型\"><a href=\"#1-1-数据类型\" class=\"headerlink\" title=\"1.1. 数据类型\"></a>1.1. 数据类型</h3><p>在 JavaScript 的语法层面，除了 <code>undefined</code> 和 <code>null</code> 一切皆对象，字面量也是对象，而 <code>null</code> 的类型也是对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'foo'</span>.substring(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"number\">3.1415926</span>.toFixed(<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 'object'</span></div></pre></td></tr></table></figure>\n<p>JavaScript 语言中内置了一些对象用来辅助用户编程，它们均是 <code>函数对象</code> ，如：</p>\n<ul>\n<li>Function</li>\n<li>Object</li>\n<li>String</li>\n<li>Number</li>\n</ul>\n<p>解析引擎中创建了诸多内建类型，它们是实现 JavaScript 各类型的数据结构。</p>\n<p>基本类型的字面量创建方式会直接调用解析引擎来创建 JavaScript 对象，它不是内置函数对象的实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'foo'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">// false</span></div><div class=\"line\">foo = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对象(这里指语法层面的对象)、正则、数组等的字面量创建方式会调用内置函数对象来创建实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = &#123;&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></div><div class=\"line\">foo = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>归纳如下：</p>\n<p><img src=\"javascript_types.png\" alt=\"javascript_types.png\"></p>\n<h3 id=\"1-2-函数对象\"><a href=\"#1-2-函数对象\" class=\"headerlink\" title=\"1.2. 函数对象\"></a>1.2. 函数对象</h3><p>任何JS对象均需要由函数对象创建。<strong>函数对象</strong>是在普通对象的基础上增加了内建的属性 <code>[[Call]]</code> 和 <code>[[Construct]]</code> ，这一过程由解释器完成，两个属性均指向解释器的内建函数：[[Call]] 用于函数调用，使用操作符 <code>()</code> 时执行；[[Construct]] 用于构造对象，使用操作符 <code>new</code> 时执行。</p>\n<p>语法层面上，函数对象也是由其它函数对象(或自己)创建的，使用 <code>function</code> 关键字可以创建用户自定义函数对象。最上游的对象是 <code>Function</code> 。</p>\n<p><img src=\"function_object.png\" alt=\"function_object.png\"></p>\n<p>当对象被创建后，解释器为对象增加 <code>constructor</code> 属性指向创建它的函数对象。</p>\n<h3 id=\"1-3-原型对象\"><a href=\"#1-3-原型对象\" class=\"headerlink\" title=\"1.3. 原型对象\"></a>1.3. 原型对象</h3><p>原型对象通常由内置函数对象 <code>Object</code> 创建，它通常是一个普通对象，但也可能是函数对象。</p>\n<p>任何对象都有内建属性 <code>[[Prototype]]</code> 用来指向其原型对象，有些解释器(如V8)会将其开放为 <code>__proto__</code> 属性供用户代码调用。函数对象有开放属性 <code>prototype</code> ，用来表示通过函数对象构建的对象的原型。</p>\n<p>以下条件总是为 true ：</p>\n<pre><code>函数对象.prototype === 该函数对象创建的对象.__proto__\n</code></pre><p>示例如下代码的原型关系：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.foo = <span class=\"string\">'foo'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Foo.prototype.bar = <span class=\"string\">'bar'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> Foo();</div></pre></td></tr></table></figure>\n<p>对象指向原型对象的层层链条构成<strong>原型链</strong>，对象查找属性时沿着原型链向上游找。</p>\n<p><img src=\"prototype1.png\" alt=\"prototype1.png\"></p>\n<p>通常情况下，<code>Function.prototype</code> 为解析引擎创建的空函数，<code>Object.prototype</code> 为解析引擎创建的空对象。</p>\n<h3 id=\"1-4-对象的关系\"><a href=\"#1-4-对象的关系\" class=\"headerlink\" title=\"1.4. 对象的关系\"></a>1.4. 对象的关系</h3><p>示例如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div></pre></td></tr></table></figure>\n<p>再加上内置函数对象 String，其关系如下：</p>\n<p><img src=\"function_relation.png\" alt=\"function_relation.png\"></p>\n<p>有如下规律：</p>\n<ul>\n<li>所有函数对象的原型最终指向 Function.prototype ；</li>\n<li>所有普通对象(除 Object.prototype)的原型最终指向 Object.prototype，而 Object.prototype 的原型为 null ；</li>\n<li>所有 constructor 最终指向 Function ，包括它自己；</li>\n<li>所有原型对象的 constructor 的 prototype 指向自己，普通对象不具备该特性。</li>\n</ul>\n<h2 id=\"2-执行模型\"><a href=\"#2-执行模型\" class=\"headerlink\" title=\"2. 执行模型\"></a>2. 执行模型</h2><p>函数生命周期包括：</p>\n<p><img src=\"function_lifecycle.png\" alt=\"function_lifecycle.png\"></p>\n<h3 id=\"2-1-执行上下文\"><a href=\"#2-1-执行上下文\" class=\"headerlink\" title=\"2.1. 执行上下文\"></a>2.1. 执行上下文</h3><p><code>执行上下文(Execution Context)</code> 是对可执行代码的抽象，某特定时刻下它们是等价的。发生函数调用的时候，正在执行的上下文被中断并将新的执行上下文压入执行上下文栈中，调用结束后(return 或 throw Error)新的上下文从栈中弹出并继续执行之前的上下文。栈底总是<code>全局执行上下文</code>：</p>\n<p><img src=\"ec_stack.png\" alt=\"ec_stack.png\"></p>\n<p><strong>变量对象(Variable Object)</strong>是执行上下文中的一种数据结构，用来存储：</p>\n<ul>\n<li>变量</li>\n<li>函数声明</li>\n<li>形参</li>\n</ul>\n<p>变量对象为抽象概念，其实现分两种情况：</p>\n<p>一、全局执行上下文中的变量对象使用全局对象自身实现，因此全局变量可以通过相应的变量对象访问到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'foo'</span></div><div class=\"line\">alert(<span class=\"built_in\">window</span>.foo);</div></pre></td></tr></table></figure>\n<p>二、函数执行上下文中的变量对象为<strong>活动对象(Activation Object)</strong>，用户代码无法直接访问它。</p>\n<p><img src=\"ec_ao_vo.png\" alt=\"ec_ao_vo.png\"></p>\n<h3 id=\"2-2-函数执行过程\"><a href=\"#2-2-函数执行过程\" class=\"headerlink\" title=\"2.2. 函数执行过程\"></a>2.2. 函数执行过程</h3><p>函数执行前会先为其创建执行环境：</p>\n<p><img src=\"exe1.png\" alt=\"exe1.png\"></p>\n<p>示例以下代码的执行过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">foo1, foo2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> foo3 = <span class=\"string\">'foo3'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> foo4 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.foo5 = <span class=\"string\">'foo5'</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo6</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">    foo6();</div><div class=\"line\">&#125;</div><div class=\"line\">foo(<span class=\"string\">'foo1'</span>, <span class=\"string\">'foo2'</span>, <span class=\"string\">'more'</span>);</div></pre></td></tr></table></figure>\n<p><strong>1) 创建执行环境</strong></p>\n<p>该过程重点是创建 <code>活动对象</code> 的命名属性：</p>\n<p><img src=\"exe2.png\" alt=\"exe2.png\"></p>\n<p><strong>2) 依次执行代码</strong></p>\n<p><img src=\"exe3.png\" alt=\"exe3.png\"></p>\n<p>理解了函数执行过程便可以解释局部变量的初始化时机问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'global'</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(foo);  <span class=\"comment\">// undefined</span></div><div class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"string\">'local'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>同时也解释了两种函数声明方式的区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo();  <span class=\"comment\">// foo</span></div><div class=\"line\">bar();  <span class=\"comment\">// TypeError: bar is not a function.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>根据活动对象的属性填充顺序，也可以解释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(x); <span class=\"comment\">// function</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\">alert(x); <span class=\"comment\">// 10</span></div><div class=\"line\">x = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">alert(x); <span class=\"comment\">// 20</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-2-作用域\"><a href=\"#2-2-作用域\" class=\"headerlink\" title=\"2.2. 作用域\"></a>2.2. 作用域</h3><p>示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> z = <span class=\"number\">3</span>;</div><div class=\"line\">        alert(x +  y + z);</div><div class=\"line\">    &#125;</div><div class=\"line\">    bar();</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// 6</span></div></pre></td></tr></table></figure>\n<p>其作用域相关的属性创建过程如下：</p>\n<p><img src=\"scope.png\" alt=\"scope.png\"></p>\n<p>其中函数对象的内部属性 <code>[[Scope]]</code> 在某些解释器中实现为 <code>__parent__</code> 并开放给用户代码。执行上下文中的 <code>Scope</code> 属性构成 <strong>作用域链</strong>，其实现未必像图中所示使用数组，也可以使用链表等数据结构，ECMAScript 规范对解释器的实现机制未做规定。</p>\n<p>变量查找时沿着作用域链向上游查找。例如在函数 bar 中查找 x 时，会依次查找：1）bar的活动对象；2）foo的活动对象；3）全局对象，最终在全局对象中找到。</p>\n<h3 id=\"2-3-闭包\"><a href=\"#2-3-闭包\" class=\"headerlink\" title=\"2.3. 闭包\"></a>2.3. 闭包</h3><p>ECMAScript 使用静态词法作用域：当函数对象创建时，其上层上下文数据(变量对象)保存在内部属性 [[Scope]] 中，即函数在创建的时候就保存了上层上下文的作用域链，不管函数会否被调用。因此<strong>所有的函数都是一个闭包</strong>(除了 Function 构造器创建的函数)。不过，出于优化目的，当函数不使用自由变量时，引擎实现可能并不保存上层作用域链。</p>\n<blockquote>\n<p><strong>自由变量</strong>是在函数内使用的一种变量：它既不是函数的参数，也不是其局部变量。</p>\n</blockquote>\n<p>[[Scope]] 属性是指向变量对象的引用，同一上下文创建的多个闭包<strong>共用</strong>该变量对象。因此，某个闭包对其变量的修改会影响到其他闭包对其变量的读取：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fooClosure;</div><div class=\"line\"><span class=\"keyword\">var</span> barClosure;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">    fooClosure = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> ++x; &#125;;</div><div class=\"line\">    barClosure = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> --x; &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"></div><div class=\"line\">alert(fooClosure()); <span class=\"comment\">// 2</span></div><div class=\"line\">alert(barClosure()); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>函数执行时，变量对象的属性变化如下：</p>\n<p><img src=\"closure.png\" alt=\"closure.png\"></p>\n<p>可以解释此常犯错的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; k++) &#123;</div><div class=\"line\">    data[k] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(k);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">data[<span class=\"number\">0</span>](); <span class=\"comment\">// 3, 而不是 0</span></div><div class=\"line\">data[<span class=\"number\">1</span>](); <span class=\"comment\">// 3, 而不是 1</span></div><div class=\"line\">data[<span class=\"number\">2</span>](); <span class=\"comment\">// 3, 而不是 2</span></div></pre></td></tr></table></figure>\n<p>通过创建多个变量对象(方式一)或使用函数对象的属性(方式二)可以解决此问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 方式一</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; k++) &#123;</div><div class=\"line\">    data[k] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(x);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;)(k);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 方式二</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; k++) &#123;</div><div class=\"line\">    (data[k] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        alert(<span class=\"built_in\">arguments</span>.callee.x);</div><div class=\"line\">    &#125;).x = k;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从理论角度讲，ECMAScript 中所有的函数都是闭包。然而实践中，以下函数才算是闭包：</p>\n<ul>\n<li>即使创建它的上下文已经销毁，它仍然存在</li>\n<li>代码中引用了自由变量</li>\n</ul>\n<h2 id=\"3-其它\"><a href=\"#3-其它\" class=\"headerlink\" title=\"3. 其它\"></a>3. 其它</h2><h3 id=\"3-1-不使用var声明并不能创建全局变量\"><a href=\"#3-1-不使用var声明并不能创建全局变量\" class=\"headerlink\" title=\"3.1. 不使用var声明并不能创建全局变量\"></a>3.1. 不使用var声明并不能创建全局变量</h3><p>不使用 var 关键字创建的只是全局对象的属性(全局执行上下文中的变量对象使用全局对象自身实现)，它并不是一个变量。可以用如下代码检测区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(a); <span class=\"comment\">// undefined</span></div><div class=\"line\">alert(b); <span class=\"comment\">// Can't find variable: b</span></div><div class=\"line\"></div><div class=\"line\">b = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-三种函数类型\"><a href=\"#3-2-三种函数类型\" class=\"headerlink\" title=\"3.2. 三种函数类型\"></a>3.2. 三种函数类型</h3><p>1) <strong>函数声明</strong>在程序级别或另一函数的函数体：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalFD</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFD</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2) <strong>函数表达式</strong>在表达式的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</div><div class=\"line\">[<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;];</div><div class=\"line\"><span class=\"number\">1</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = (foo % <span class=\"number\">2</span> == <span class=\"number\">0</span></div><div class=\"line\">    ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"number\">0</span>); &#125;</div><div class=\"line\">    : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"number\">1</span>); &#125;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bar 为函数表达式：</span></div><div class=\"line\">foo(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'foo.bar'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>函数表达式的作用是避免对变量对象造成污染。</p>\n<p>3）<strong>Function构造器</strong>的 [[Scope]] 属性中只包含全局对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">20</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">30</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'alert(x); alert(y);'</span>);</div><div class=\"line\">    bar(); <span class=\"comment\">// 10, \"y\" is not defined</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-6-closures\" target=\"_blank\" rel=\"external\">closures</a></li>\n</ul>\n"},{"title":"Redis 中的流程","url":"http://zhangqiang.work/posts/1224201512/","content":"<style type=\"text/css\">.posts-expand .post-body img{border:0;}</style>\n\n<h2 id=\"1-redis-服务启动流程：\"><a href=\"#1-redis-服务启动流程：\" class=\"headerlink\" title=\"1. redis 服务启动流程：\"></a>1. redis 服务启动流程：</h2><p><img src=\"redis_main.svg\" alt=\"redis_main\"></p>\n<h2 id=\"2-初始化服务器的流程：\"><a href=\"#2-初始化服务器的流程：\" class=\"headerlink\" title=\"2. 初始化服务器的流程：\"></a>2. 初始化服务器的流程：</h2><p><img src=\"redis_initserver.svg\" alt=\"redis_initserver\"></p>\n"},{"title":"Redis 中的数据结构：散列表","url":"http://zhangqiang.work/posts/1221201512/","content":"<p>散列表是 redis 中的基础数据结构之一， redis 中的键空间、redisDB、 <code>SET</code>、<code>ZSET</code>、集群节点映射等，都是通过散列表实现的。结构体定义为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dict</span> &#123;</span></div><div class=\"line\">    dictType *type;</div><div class=\"line\">    <span class=\"keyword\">void</span> *privdata;</div><div class=\"line\">    dictht ht[<span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">long</span> rehashidx;</div><div class=\"line\">    <span class=\"keyword\">int</span> iterators;</div><div class=\"line\">&#125; dict;</div></pre></td></tr></table></figure>\n<p>其中，<code>*type</code> 指针指向 dict 的类型，例如它是一个 ZSET(zsetDictType) 还是一个集群节点(clusterNodesDictType)。实际上它们的存储结构是相同的，之所以区分类型，是因为其散列函数、key 的比较(或销毁)策略是不同的。因而所谓的 dict 类型，不过是一组函数指针罢了：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictType</span> &#123;</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*hashFunction)</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key)</span></span>;       <span class=\"comment\">// 散列函数</span></div><div class=\"line\">    <span class=\"keyword\">void</span> *(*keyDup)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key);    <span class=\"comment\">// key 复制函数</span></div><div class=\"line\">    <span class=\"keyword\">void</span> *(*valDup)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *obj);    <span class=\"comment\">// value 复制函数</span></div><div class=\"line\">    <span class=\"keyword\">int</span> (*keyCompare)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);     <span class=\"comment\">// key 比较函数</span></div><div class=\"line\">    <span class=\"keyword\">void</span> (*keyDestructor)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">void</span> *key);    <span class=\"comment\">// key 销毁函数</span></div><div class=\"line\">    <span class=\"keyword\">void</span> (*valDestructor)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">void</span> *obj);    <span class=\"comment\">// value 销毁函数</span></div><div class=\"line\">&#125; dictType;</div></pre></td></tr></table></figure>\n<p>数组 <code>ht</code> 中存放的是 dict 的实际散列表结构 <code>dictht</code> ：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></div><div class=\"line\">    dictEntry **table;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used;</div><div class=\"line\">&#125; dictht;</div></pre></td></tr></table></figure>\n<p>之所以存放 2 个，是为了实现<strong>渐进式再散列(incremental rehashing)</strong>。</p>\n<p><code>**table</code> 指向桶结构 <code>dictEntry</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">void</span> *key;</div><div class=\"line\">    <span class=\"keyword\">union</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">void</span> *val;</div><div class=\"line\">        <span class=\"keyword\">uint64_t</span> u64;</div><div class=\"line\">        <span class=\"keyword\">int64_t</span> s64;</div><div class=\"line\">        <span class=\"keyword\">double</span> d;</div><div class=\"line\">    &#125; v;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></div><div class=\"line\">&#125; dictEntry;</div></pre></td></tr></table></figure>\n<p>当发生冲突时，dict 首先会使用<strong>分离链接法</strong>将散列到同一个值的所有元素保留到一个表中。当到了一定时机，它会通过<strong>再散列</strong>进行扩展。</p>\n<p><img src=\"redis-dict.svg\" alt=\"redis-dict.svg\"></p>\n<p>Redis 还提供了遍历散列表用的迭代器，它支持安全(遍历期间可以增加元素等操作)、不安全两种方式遍历散列表：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictIterator</span> &#123;</span></div><div class=\"line\">    dict *d;</div><div class=\"line\">    <span class=\"keyword\">long</span> index;</div><div class=\"line\">    <span class=\"keyword\">int</span> table, safe;</div><div class=\"line\">    dictEntry *entry, *nextEntry;</div><div class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> fingerprint;</div><div class=\"line\">&#125; dictIterator;</div></pre></td></tr></table></figure>\n<p>todo 渐进式再散列</p>\n<p><em>(使用的源码基于 redis 3.0.5)</em> </p>\n"},{"title":"Redis 数据存储结构关系","url":"http://zhangqiang.work/posts/1217201512/","content":"<p>总起来看，redis 的数据存储结构大致是这样的：</p>\n<p><img src=\"overview.png\" alt=\"overview.png\"></p>\n<p>它使用全局变量 <code>server</code> 来存储服务器信息：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisServer</span> <span class=\"title\">server</span>;</span></div></pre></td></tr></table></figure>\n<p>其中 <code>redisServer</code> 包含了数据存储结构、事件、集群、持久化等诸多信息，和数据存储结构相关的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisServer</span> &#123;</span></div><div class=\"line\">    redisDb *db;</div><div class=\"line\">    <span class=\"keyword\">int</span> dbnum;</div><div class=\"line\">    <span class=\"comment\">// ... 等等等</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>由此可见 redis 服务是由 redis 数据库(redisDb)构成的。redisServer 中存储了 redisDb 数组，其初始化大小可配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Set the number of databases. The default database is DB 0, you can select</span></div><div class=\"line\"><span class=\"comment\"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></div><div class=\"line\"><span class=\"comment\"># dbid is a number between 0 and 'databases'-1</span></div><div class=\"line\">databases 16</div></pre></td></tr></table></figure>\n<p>默认值为 <code>16</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_DEFAULT_DBNUM     16</span></div></pre></td></tr></table></figure>\n<p><code>server</code> 在初始化的时候会对每一个数据库做初始化操作，因此配置时用不着的数据库尽量关闭：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">server.dbnum = REDIS_DEFAULT_DBNUM;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">server.db = zmalloc(<span class=\"keyword\">sizeof</span>(redisDb)*server.dbnum);</div><div class=\"line\">...</div><div class=\"line\"><span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; server.dbnum; j++) &#123;</div><div class=\"line\">    server.db[j].dict = dictCreate(&amp;dbDictType,<span class=\"literal\">NULL</span>);</div><div class=\"line\">    server.db[j].expires = dictCreate(&amp;keyptrDictType,<span class=\"literal\">NULL</span>);</div><div class=\"line\">    server.db[j].blocking_keys = dictCreate(&amp;keylistDictType,<span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"comment\">// ... 等等</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>redisDb 的结构并不复杂：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisDb</span> &#123;</span></div><div class=\"line\">    dict *dict;</div><div class=\"line\">    <span class=\"keyword\">int</span> id;</div><div class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> avg_ttl;</div><div class=\"line\">    <span class=\"comment\">// ... 等</span></div><div class=\"line\">&#125; redisDb;</div></pre></td></tr></table></figure>\n<p>其中 <code>dict *dict</code> 用来存储键值对数据。也就是说 <code>SET foo bar</code> 命令实际会将 foo 存入 <code>dict</code> 结构的 key 中。Redis 用来存储值的对象是 <code>redisObject</code> ，它是对 redis 不同数据类型的抽象：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisObject</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> type:<span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> encoding:<span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">void</span> *ptr;</div><div class=\"line\">    <span class=\"comment\">// ... 等</span></div><div class=\"line\">&#125; robj;</div></pre></td></tr></table></figure>\n<p>其中 <code>type</code> 代表一个 redis 数据类型(抽象给用户使用的)，<code>encoding</code> 代表 redis 内部对该类型的实际编码方式(底层的数据结构实现)， <code>*ptr</code> 是指向实际值的指针。</p>\n<p><code>redisObject</code> 的类型为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_STRING 0  <span class=\"comment\">/* 字符串 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_LIST 1    <span class=\"comment\">/* 列表 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_SET 2     <span class=\"comment\">/* 哈希 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ZSET 3    <span class=\"comment\">/* 集合 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_HASH 4    <span class=\"comment\">/* 有序集合 */</span></span></div></pre></td></tr></table></figure>\n<p>编码方式有：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_RAW 0        <span class=\"comment\">/* 原始sds方式 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_INT 1        <span class=\"comment\">/* 整数 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_HT 2         <span class=\"comment\">/* 散列表 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_ZIPMAP 3     <span class=\"comment\">/* (已弃用) */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_LINKEDLIST 4 <span class=\"comment\">/* 双链表 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_ZIPLIST 5    <span class=\"comment\">/* 压缩列表 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_INTSET 6     <span class=\"comment\">/* 整型集合 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_SKIPLIST 7   <span class=\"comment\">/* 跳跃表 */</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_EMBSTR 8     <span class=\"comment\">/* 内嵌式sds */</span></span></div></pre></td></tr></table></figure>\n<p>通常一个 redis 的对象类型都会对应两个以上的编码方式，它们的详细对应关系为：</p>\n<p><img src=\"type_encoding.svg\" alt=\"type_encoding.svg\"></p>\n<p>命令示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ SET foo abc</div><div class=\"line\">$ OBJECT ENCODING foo  </div><div class=\"line\"><span class=\"string\">\"embstr\"</span></div><div class=\"line\"></div><div class=\"line\">$ SET bar abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz</div><div class=\"line\">$ OBJECT ENCODING bar</div><div class=\"line\"><span class=\"string\">\"raw\"</span></div><div class=\"line\"></div><div class=\"line\">$ SET foobar 123</div><div class=\"line\">$ OBJECT ENCODING foobar</div><div class=\"line\"><span class=\"string\">\"int\"</span></div><div class=\"line\"></div><div class=\"line\">$ SET foobar 12345678901234567890</div><div class=\"line\">$ OBJECT ENCODING foobar</div><div class=\"line\"><span class=\"string\">\"embstr\"</span></div><div class=\"line\"></div><div class=\"line\">$ SET foobar 1.0</div><div class=\"line\">$ OBJECT ENCODING foobar</div><div class=\"line\"><span class=\"string\">\"embstr\"</span></div></pre></td></tr></table></figure>\n<p><em>(使用的源码基于 redis 3.0.5)</em></p>\n"},{"title":"Redis 中的数据结构：双链表","url":"http://zhangqiang.work/posts/1215201512/","content":"<p>Redis 实现了通用的双链表作为其基础数据结构之一。双链表是 redis 列表类型的实际存储方式之一，同时双链表还被其它功能模块广泛使用。它由三部分组成：</p>\n<ul>\n<li>节点</li>\n<li>迭代器</li>\n<li>链表自身</li>\n</ul>\n<p>其<strong>节点</strong>如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></div><div class=\"line\">    <span class=\"keyword\">void</span> *value;</div><div class=\"line\">&#125; listNode;</div></pre></td></tr></table></figure>\n<p>包含指向前驱、后继节点的指针及当前节点存储的值。这个值的类型为 <code>void*</code> ，说明 redis 并不限制链表存储的数据类型。</p>\n<p><strong>链表</strong>的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></div><div class=\"line\">    listNode *head;</div><div class=\"line\">    listNode *tail;</div><div class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</div><div class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</div><div class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</div><div class=\"line\">&#125; <span class=\"built_in\">list</span>;</div></pre></td></tr></table></figure>\n<p><code>list</code> 中保存了指向表头和表尾的指针，因此在执行 <code>LPUSH</code>、<code>RPUSH</code>、<code>RPOP</code> 等命令时是非常快的(θ(1))；其中还保存了 len 值，因此 <code>LLEN</code> 命令的执行也是非常快的。</p>\n<p><img src=\"double_link_list.svg\" alt=\"double_link_list.svg\"></p>\n<p>另外，它还保存了三个函数指针 dup、free 和 match 用来复制、释放和对比链表，这样做是因为节点值的类型是不确定的，具体的实现方法交由用户代码灵活扩展处理。比如如果用户定义了 match 函数的实现，则采用它来替换默认使用 <code>==</code> 的比较策略：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match(node-&gt;value, key)) &#123;</div><div class=\"line\">        listReleaseIterator(iter);</div><div class=\"line\">        <span class=\"keyword\">return</span> node;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == node-&gt;value) &#123;</div><div class=\"line\">        listReleaseIterator(iter);</div><div class=\"line\">        <span class=\"keyword\">return</span> node;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>类似地，释放一个链表时会优先调用指定的 free 函数后再完成其它释放过程：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</div><div class=\"line\">    listNode *current, *next;</div><div class=\"line\"></div><div class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</div><div class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</div><div class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</div><div class=\"line\">        next = current-&gt;next;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</div><div class=\"line\">        zfree(current);</div><div class=\"line\">        current = next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    zfree(<span class=\"built_in\">list</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>迭代器</strong>的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></div><div class=\"line\">    listNode *next;</div><div class=\"line\">    <span class=\"keyword\">int</span> direction;</div><div class=\"line\">&#125; listIter;</div></pre></td></tr></table></figure>\n<p>其中，direction 可以向前或向后：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AL_START_HEAD 0</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AL_START_TAIL 1</span></div></pre></td></tr></table></figure>\n<p>可以通过：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span>;</div></pre></td></tr></table></figure>\n<p>获得迭代器，通过：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span>;</div></pre></td></tr></table></figure>\n<p>进行遍历。另外，还可以将指针移到表头或表尾：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewind</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span></span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewindTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span></span>;</div></pre></td></tr></table></figure>\n<p><em>(使用的源码基于 redis 3.0.5)</em></p>\n"},{"title":"Redis 中的数据结构：简单动态字符串（SDS）","url":"http://zhangqiang.work/posts/1214201512/","content":"<p>Redis 底层使用 <strong>SDS</strong> (Simple Dynamic Strings) 作为字符串类型的存储方式之一，其结构非常简单，直接看源码即可了解个大概：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *sds;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</div><div class=\"line\">    <span class=\"keyword\">char</span> buf[];</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>其中，结构体 sdshdr 中的 len 用来存储字符串的实际长度，free 用来存储预留空间的长度，buf 用来存储字符串内容。</p>\n<p>与一般动态字符串直接使用结构体表示字符串的实现方式不同，sds 仍使用 <code>char*</code> 表示字符串，只是其指向的位置略微特殊而已。通过创建 sds 的函数，可以看出这种特殊性：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</div><div class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    sh-&gt;len = initlen;</div><div class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</div><div class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</div><div class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过源代码了解到，实际存储字符串相关信息的仍然是 <code>struct</code> （sdshdr），sds 其实是返回指向其 buf 数组的首个元素的指针。借用 redis 作者的描述：</p>\n<pre><code>+--------+-------------------------------+-----------+\n| Header | Binary safe C alike string... | Null term |\n+--------+-------------------------------+-----------+\n         |\n         `-&gt; Pointer returned to the user.\n</code></pre><p>另外值得注意的是，通过：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sh-&gt;len = initlen;</div><div class=\"line\">sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</div></pre></td></tr></table></figure>\n<p>可以看出，redis 在首次创建字符串时并不会额外分配 <code>free</code> 空间，而是按字符串实际的大小申请内存空间来创建，这和 Java 中 StringBuffer 等预先分配一定容量(通常16char)的策略是不同的。</p>\n<p><strong>sds 是二进制安全的</strong>，字符串中间可以包含 <code>\\0</code> 。获取 sds 的长度时通常不能直接使用 strlen 而是使用 sdslen 读取其 len 值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></div><div class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>唐老师给我画了一张图，可以帮助理解：</p>\n<p><img src=\"sds.png\" alt=\"sds\"></p>\n<p>最后一个值得关注的问题是，sds 是如何扩容的？这一过程在 sdsMakeRoomFor 函数中实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsMakeRoomFor</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> addlen)</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>, *<span class=\"title\">newsh</span>;</span></div><div class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">free</span> = sdsavail(s);</div><div class=\"line\">    <span class=\"keyword\">size_t</span> len, newlen;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt;= addlen) <span class=\"keyword\">return</span> s;</div><div class=\"line\">    len = sdslen(s);</div><div class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</div><div class=\"line\">    newlen = (len+addlen);</div><div class=\"line\">    <span class=\"keyword\">if</span> (newlen &lt; SDS_MAX_PREALLOC)</div><div class=\"line\">        newlen *= <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        newlen += SDS_MAX_PREALLOC;</div><div class=\"line\">    newsh = zrealloc(sh, <span class=\"keyword\">sizeof</span>(struct sdshdr)+newlen+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    newsh-&gt;<span class=\"built_in\">free</span> = newlen - len;</div><div class=\"line\">    <span class=\"keyword\">return</span> newsh-&gt;buf;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，当扩展后的长度比 <code>SDS_MAX_PREALLOC</code> 小时，预留一倍的容量；否则增加 <code>SDS_MAX_PREALLOC</code> 的容量。当前版本中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_MAX_PREALLOC (1024*1024)</span></div></pre></td></tr></table></figure>\n<p>理解了这些便很容易知道 redis <code>APPEND</code> 命令的实现细节：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ SET foo bar</div><div class=\"line\">$ APPEND foo blahblah</div></pre></td></tr></table></figure>\n<p>当然，这种预先分配容量的方式，虽然能减少内存分配的次数，提高 <code>APPEND</code> 操作的性能，但会造成一定的内存占用，而且此部分内存不会主动释放。 </p>\n<p><em>(使用的源码基于 redis 3.0.5)</em></p>\n"},{"title":"Ajax 是否是独立线程中的异步请求？","url":"http://zhangqiang.work/posts/1210201512/","content":"<p>刚刚脑子中突然间产生的一个疑问，使用了这么久的 Ajax 技术，是不是<strong>独立线程中的异步请求</strong> ？也就是说，浏览器是否会为它开启一个独立的线程发起请求，并在成功后执行回调函数。整个过程应该是非阻塞的。</p>\n<p>通常我们知道 <code>setTimeout</code> 函数会将执行代码压入下一次 Event Loop 中执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foofoo'</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'barbar'</span>);</div><div class=\"line\">    &#125;, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'foobar'</span>);</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"settimeout.png\" alt=\"setTimeout\"></p>\n<p>那么 <code>Ajax</code> 是否也是如些？想要验证这个问题非常简单，执行下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'http://baidu.com'</span>);</div><div class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;&#125;</div></pre></td></tr></table></figure>\n<p>如果出现跨域请求错误，说明 Ajax 是独立线程的异步请求，如果浏览器假死，说明它只是被压入了下一次 Event Loop 中。</p>\n<p>答案是后者，Ajax 请求只是被推迟到下一次事件循环中执行，当前事件循环仍然可以阻塞其执行，然而在本次循环内，它可以达到非堵塞的效果。</p>\n"},{"title":"Redis 持久化方案","url":"http://zhangqiang.work/posts/1207201512/","content":"<p>Redis 中提供了不同的持久化选项：</p>\n<ul>\n<li><code>RDB</code> 会定时地保存数据集快照；</li>\n<li><code>AOF</code> 记录下服务器收到的每一条“写”操作，并在服务启动时通过依次执行这些操作重建数据集。AOF 文件过大时，Redis 会对其重写；</li>\n<li>可以关闭持久化功能，使数据仅保存在内存中；</li>\n<li>同时开启 <code>RDB</code> 和 <code>AOF</code> 。服务重启时会使用 <code>AOF</code> 重建数据。</li>\n</ul>\n<p>RDB 优点：</p>\n<ul>\n<li>单文件存储，适合按时间点做不同版本的数据备份，同时也适合做灾难恢复；</li>\n<li>提供更好的性能，父进程不进行IO操作，而是fork子进程完成；</li>\n<li>数据集很大时相比 AOF 其启动速度更快。</li>\n</ul>\n<p>RDB 缺点：</p>\n<ul>\n<li>由于是按时间周期保存的，意外宕机会导致最近时间点内的数据丢失；</li>\n<li>数据量过大时，fork操作可能占用大量系统资源导致服务短暂阻塞（几毫秒甚至一秒）；</li>\n</ul>\n<p>AOF 优点：</p>\n<ul>\n<li>默认每秒同步一次(<code>fsync</code> 策略)，因此只会意外丢失一秒内的数据；</li>\n<li>AOF 记录是 <code>append only</code> 的，不怕意外宕机。即使只写了一半操作也很容易使用 <code>redis-check-aof</code> 工具恢复；</li>\n<li>AOF 文件过大时，Redis 会自动在后台进行重写。</li>\n<li>AOF 文件依次保存了所有的操作记录，它很容易理解或解析。</li>\n</ul>\n<p>AOF 缺点：</p>\n<ul>\n<li>相同数据时，AOF 通常比 RDB 文件更大；</li>\n<li>不同的 <code>fsync</code> 策略可能导致 AOF 比 RDB 慢；</li>\n<li>因为是重新执行命令来恢复数据，某些命令可能导致很罕见的 Bug，而这类 Bug 在 RDB 中不会存在。</li>\n</ul>\n"},{"title":"Redis 中的命令","url":"http://zhangqiang.work/posts/1203201512/","content":"<p>Redis 中有五种常用数据结构，它们都有对应的操作命令：</p>\n<p><img src=\"redis.png\" alt=\"redis\"></p>\n<p><a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"external\">[当前最新的所有命令]</a></p>\n<h2 id=\"1-字符串\"><a href=\"#1-字符串\" class=\"headerlink\" title=\"1. 字符串\"></a>1. 字符串</h2><p>Redis 中 <code>STRINGs</code> 用来存储三种类型：</p>\n<ul>\n<li>字符串</li>\n<li>整数</li>\n<li>浮点数</li>\n</ul>\n<p>整数和浮点数可增减。<strong>整数</strong>范围为平台的长整型范围(如，64位系统中为有符号的64位整型)；<strong>浮点数</strong>采用 IEEE 754 双精度浮点数。</p>\n<p><strong>增减命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">INCR</td>\n<td style=\"text-align:left\"><code>INCR key-name</code> 将当前 key 对应的值加 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DECR</td>\n<td style=\"text-align:left\"><code>DECR key-name</code> 将当前 key 对应的值减 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">INCRBY</td>\n<td style=\"text-align:left\"><code>INCRBY key-name amount</code> 将当前 key 对应的值加上指定的整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DECRBY</td>\n<td style=\"text-align:left\"><code>DECRBY key-name amount</code> 将当前 key 对应的值减去指定的整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">INCRBYFLOAT</td>\n<td style=\"text-align:left\"><code>INCRBYFLOAT key-name amount</code> 将当前 key 对应的值加上指定的浮点值</td>\n</tr>\n</tbody>\n</table>\n<p>如果尝试在空字符串或不存在的 key 上调用 <code>INCR*</code> 或 <code>DECR*</code> ，当前 key 值会被当作 <code>0</code> 来处理：</p>\n<p><img src=\"incr_empty.png\" alt=\"incr_empty\"></p>\n<p>如果尝试在非整数或浮点数上调用 <code>INCR*</code> 或 <code>DECR*</code> ，会抛出 error ：</p>\n<p><img src=\"incr_error.png\" alt=\"incr_error\"></p>\n<p><strong>操纵字符串命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">APPEND</td>\n<td style=\"text-align:left\"><code>APPEND key-name value</code> 拼接字符串 value 至指定 key 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GETRANGE</td>\n<td style=\"text-align:left\"><code>GETRANGE key-name start end</code> 截取从 start 到 end 的子串(闭区间)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SETRANGE</td>\n<td style=\"text-align:left\"><code>SETRANGE key-name offset value</code> 从 offset 开始添加 value 子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GETBIT</td>\n<td style=\"text-align:left\"><code>GETBIT key-name offset</code> 获取 offset 处的 bit 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SETBIT</td>\n<td style=\"text-align:left\"><code>SETBIT key-name offset value</code> 设置 offset 处的 bit 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BITCOUNT</td>\n<td style=\"text-align:left\"><code>BITCOUNT key-name [start end]</code> 计算 string 占了多少位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BITOP</td>\n<td style=\"text-align:left\"><code>BITOP operation dest-key key-name [key-name ...]</code> 位运算，结果存入 dest-key 中。 operation 包括 AND, OR, XOR, NOT</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<p><img src=\"setrange.png\" alt=\"setrange\"></p>\n<h2 id=\"2-列表\"><a href=\"#2-列表\" class=\"headerlink\" title=\"2. 列表\"></a>2. 列表</h2><p><code>LISTs</code> 中存储有序的 <code>STRING</code> 序列。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">RPUSH</td>\n<td style=\"text-align:left\"><code>RPUSH key-name value [value...]</code> 向 list 尾部(右)添加值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LPUSH</td>\n<td style=\"text-align:left\"><code>LPUSH key-name value [value...]</code> 向 list 首部(左)添加值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RPOP</td>\n<td style=\"text-align:left\"><code>RPOP key-name</code> 移除并返回最右侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LPOP</td>\n<td style=\"text-align:left\"><code>LPOP key-name</code> 移除并返回最左侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LINDEX</td>\n<td style=\"text-align:left\"><code>LINDEX key-name offset</code> 返回指定 offset 处的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LRANGE</td>\n<td style=\"text-align:left\"><code>LRANGE key-name start end</code> 返回从 start 到 end 处的值(闭区间)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LTRIM</td>\n<td style=\"text-align:left\"><code>LTRIM key-name start end</code> 截取 list ，只保留从 start 到 end 的值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Blocking操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">BLPOP</td>\n<td style=\"text-align:left\"><code>BLPOP key-name [key-name ...] timeout</code> 返回第一个非空列表中最左侧的值，或一直等待 timeout 秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BRPOP</td>\n<td style=\"text-align:left\"><code>BRPOP key-name [key-name ...] timeout</code> 返回第一个非空列表中最右侧的值，或一直等待 timeout 秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RPOPLPUSH</td>\n<td style=\"text-align:left\"><code>RPOPLPUSH source-key dest-key</code> 将 source 中最右侧的值放入 dest 的左侧，并返回该值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BRPOPLPUSH</td>\n<td style=\"text-align:left\"><code>BRPOPLPUSH source-key dest-key timeout</code> 将 source 中最右侧的值放入 dest 的左侧，并返回该值。如果 source 为空，一直等待 timeout 秒。</td>\n</tr>\n</tbody>\n</table>\n<p>以上命令在操作消息队列或任务队列时非常常用。使用示例：</p>\n<p><img src=\"brpop.png\" alt=\"brpop\"></p>\n<p>当右侧的终端执行命令后，左侧输出上图结果，否则会一直等待 20 秒超时并返回 <code>nil</code> 。</p>\n<h2 id=\"3-集合\"><a href=\"#3-集合\" class=\"headerlink\" title=\"3. 集合\"></a>3. 集合</h2><p><code>SETs</code> 用来保存唯一、无序的项。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SADD</td>\n<td style=\"text-align:left\"><code>SADD key-name item [item ...]</code> 添加条目并返回实际加入的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SREM</td>\n<td style=\"text-align:left\"><code>SREM key-name item [item ...]</code> 删除条目并返回删除的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SISMEMBER</td>\n<td style=\"text-align:left\"><code>SISMEMBER key-name item</code> 检测某条目是否在 set 中(0否1是)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SCARD</td>\n<td style=\"text-align:left\"><code>SCARD key-name</code> 返回 set 中条目的总数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SMEMBERS</td>\n<td style=\"text-align:left\"><code>SMEMBERS key-name</code> 返回所有条目</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SRANDMEMBER</td>\n<td style=\"text-align:left\"><code>SRANDMEMBER key-name [count]</code> 随机返回1个或多个条目</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SPOP</td>\n<td style=\"text-align:left\"><code>SPOP key-name</code> 随机删除并返回一个条目</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SMOVE</td>\n<td style=\"text-align:left\"><code>SMOVE source-key dest-key item</code> 如果条目存在，将其从 source 移至 dest</td>\n</tr>\n</tbody>\n</table>\n<p><strong>拼接、操纵命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SDIFF</td>\n<td style=\"text-align:left\"><code>SDIFF key-name [key-name ...]</code> 返回第一个 set 中的条目，该条目不在任何其它的 set 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SDIFFSTORE</td>\n<td style=\"text-align:left\"><code>SDIFFSTORE dest-key key-name [key-name ...]</code> 同上条命令，但将结果保存在 dest-key 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SINTER</td>\n<td style=\"text-align:left\"><code>SINTER key-name [key-name ...]</code> 返回指定 set 中条目的交集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SINTERSTORE</td>\n<td style=\"text-align:left\"><code>SINTERSTORE dest-key key-name [key-name ...]</code> 返回指定 set 中条目的交集并保存在 dest-key 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUNION</td>\n<td style=\"text-align:left\"><code>SUNION key-name [key-name ...]</code> 返回指定 set 中条目的并集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUNIONSTORE</td>\n<td style=\"text-align:left\"><code>SUNIONSTORE dest-key key-name [key-name ...]</code> 返回指定 set 中条目的并集并保存在 dest-key 中</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<p><img src=\"sdiff.png\" alt=\"sdiff\"></p>\n<h2 id=\"4-哈希\"><a href=\"#4-哈希\" class=\"headerlink\" title=\"4. 哈希\"></a>4. 哈希</h2><p><code>HASHes</code> 用来存储一组键值对。</p>\n<p><strong>增加、删除命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">HMGET</td>\n<td style=\"text-align:left\"><code>HMGET key-name key [key ...]</code> 获取指定 key 下的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HMSET</td>\n<td style=\"text-align:left\"><code>HMSET key-name key value [key value ...]</code> 给指定 key 设置值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HDEL</td>\n<td style=\"text-align:left\"><code>HDEL key-name key [key ...]</code> 删除指定键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HLEN</td>\n<td style=\"text-align:left\"><code>HLEN key-name</code> 获取键值对的总数</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<p><img src=\"hash_common.png\" alt=\"hash_common\"></p>\n<p><strong>批量操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">HEXISTS</td>\n<td style=\"text-align:left\"><code>HEXISTS key-name key</code> 检测 key 是否存在</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HKEYS</td>\n<td style=\"text-align:left\"><code>HKEYS key-name</code> 获取所有的 key</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HVALS</td>\n<td style=\"text-align:left\"><code>HVALS key-name</code> 获取所有的 value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HGETALL</td>\n<td style=\"text-align:left\"><code>HGETALL key-name</code> 获取所有的 key-value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HINCRBY</td>\n<td style=\"text-align:left\"><code>HINCRBY key-name key increment</code> 指定 key 对应的值增加整数 increment 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HINCRBYFLOAT</td>\n<td style=\"text-align:left\"><code>HINCRBYFLOAT key-name key increment</code> 指定 key 对应的值增加浮点数 increment 值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"5-有序集合\"><a href=\"#5-有序集合\" class=\"headerlink\" title=\"5. 有序集合\"></a>5. 有序集合</h2><p><code>ZSET</code> 存储一组成员条目到其得分的映射。成员或得分均可以作为获取或扫描条件。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ZADD</td>\n<td style=\"text-align:left\"><code>ZADD key-name score member [score member ...]</code> 增加指定了分数的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREM</td>\n<td style=\"text-align:left\"><code>ZREM key-name member [member ...]</code> 删除成员并返回删除的条数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZCARD</td>\n<td style=\"text-align:left\"><code>ZCARD key-name</code> 返回成员总数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZINCRBY</td>\n<td style=\"text-align:left\"><code>ZINCRBY key-name increment member</code> 增加指定成员的得分值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZCOUNT</td>\n<td style=\"text-align:left\"><code>ZCOUNT key-name min max</code> 获取 min 到 max 得分范围的成员数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZRANK</td>\n<td style=\"text-align:left\"><code>ZRANK key-name member</code> 获取成员所在的下标索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZSCORE</td>\n<td style=\"text-align:left\"><code>ZSCORE key-name member</code> 获取指定成员的得分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZRANGE</td>\n<td style=\"text-align:left\"><code>ZRANGE key-name start stop [WITHSCORES]</code> 获取 start 至 stop 间的成员(可选地获取对应得分)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>获取、删除指定范围数据</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ZREVRANK</td>\n<td style=\"text-align:left\"><code>ZREVRANK key-name member</code> 对应 ZRANK 命令，返回成员的反序索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREVRANGE</td>\n<td style=\"text-align:left\"><code>ZREVRANGE key-name start stop [WITHSCORES]</code> 对应 ZRANGE，反序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZRANGEBYSCORE</td>\n<td style=\"text-align:left\"><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code> 根据得分范围获取成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREVRANGEBYSCORE</td>\n<td style=\"text-align:left\"><code>ZREVRANGEBYSCOREkey max min [WITHSCORES] [LIMIT offset count]</code> ZRANGEBYSCORE命令的反序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREMRANGEBYRANK</td>\n<td style=\"text-align:left\"><code>ZREMRANGEBYRANK key-name start stop</code> 删除指定下标范围的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREMRANGEBYSCORE</td>\n<td style=\"text-align:left\"><code>ZREMRANGEBYSCORE key-name min max</code> 删除指定得分范围的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZINTERSTORE</td>\n<td style=\"text-align:left\"><code>ZINTERSTORE dest-key numkeys key [key ...] [WEIGHTS weight [weight...]] [AGGREGATE (SUM or MIN or MAX)]</code> ZSET上的交集操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZUNIONSTORE</td>\n<td style=\"text-align:left\"><code>ZUNIONSTORE dest-key numkeys key [key ...] [WEIGHTS weight [weight...]] [AGGREGATE (SUM or MIN or MAX)]</code> ZSET上的并集操作</td>\n</tr>\n</tbody>\n</table>\n<p>其中，<code>ZINTERSTORE</code> 和 <code>ZUNIONSTORE</code> 的参数 <code>numkeys</code> 表示后面将跟多少个集合作为入参。某些客户端实现(如python)可能省略该参数，因为它可以在函数内计算该值。</p>\n<p><code>ZINTERSTORE</code> 使用示例：</p>\n<p><img src=\"zinterstore.png\" alt=\"zinterstore\"></p>\n<p>其执行过程如下：</p>\n<p><img src=\"zinterstore_detail.png\" alt=\"zinterstore_detail\"></p>\n<p><code>ZUNIONSTORE</code> 使用示例：</p>\n<p><img src=\"zunionstore.png\" alt=\"zunionstore\"></p>\n<p>其执行过程如下：</p>\n<p><img src=\"zunionstore_detail.png\" alt=\"zunionstore_detail\"></p>\n<p>ZSET 和 SET 取交集示例：</p>\n<p><img src=\"zunionstore_with_set.png\" alt=\"zunionstore_with_set\"></p>\n<p>其执行过程如下：</p>\n<p><img src=\"zunionstore_with_set_detail.png\" alt=\"zunionstore_with_set_detail\"></p>\n<h2 id=\"6-发布-订阅\"><a href=\"#6-发布-订阅\" class=\"headerlink\" title=\"6. 发布/订阅\"></a>6. 发布/订阅</h2><p>Redis 中实现了发布/订阅模式。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SUBSCRIBE</td>\n<td style=\"text-align:left\"><code>SUBSCRIBE channel [channel ...]</code> 订阅指定的通道</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNSUBSCRIBE</td>\n<td style=\"text-align:left\"><code>UNSUBSCRIBE [channel [channel ...]]</code> 取消订阅</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PUBLISH</td>\n<td style=\"text-align:left\"><code>PUBLISH channel message</code> 发布消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PSUBSCRIBE</td>\n<td style=\"text-align:left\"><code>PSUBSCRIBE pattern [pattern ...]</code> 订阅指定匹配模式的通道</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PUNSUBSCRIBE</td>\n<td style=\"text-align:left\"><code>PUNSUBSCRIBE [pattern [pattern ...]]</code> 取消订阅匹配模式的通道</td>\n</tr>\n</tbody>\n</table>\n<p>应减少使用 Redis 提供的此模式，存在两个问题：</p>\n<ol>\n<li>订阅者读消息的速度较慢，会导致 Redis 保存着大量的缓冲，继而导致其性能下降；</li>\n<li>订阅者断开连接至重连成功之间发送的消息将会丢失。</li>\n</ol>\n<p>一个小例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> lilei = redis.createClient();</div><div class=\"line\"><span class=\"keyword\">var</span> hanmeimei = redis.createClient();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">lilei.on(<span class=\"string\">'subscribe'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel</span>) </span>&#123;</div><div class=\"line\">    hanmeimei.publish(<span class=\"string\">'classroom'</span>, <span class=\"string\">'My name is Hanmeimei.'</span>);</div><div class=\"line\">    hanmeimei.publish(<span class=\"string\">'classroom'</span>, <span class=\"string\">'What\\'s your name?'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">lilei.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel, message</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">    count += <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (count === <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am Lilei.'</span>);</div><div class=\"line\">        lilei.unsubscribe();</div><div class=\"line\">        lilei.end();</div><div class=\"line\">        hanmeimei.end();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">lilei.subscribe(<span class=\"string\">'classroom'</span>); <span class=\"comment\">// channel</span></div></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"pubsub.png\" alt=\"pubsub\"></p>\n<h2 id=\"7-排序\"><a href=\"#7-排序\" class=\"headerlink\" title=\"7. 排序\"></a>7. 排序</h2><p><code>SORT</code> 用来给 list, set(或 zset) 排序。例如：</p>\n<p><img src=\"sort.png\" alt=\"sort\"></p>\n<p>完整的定义为：</p>\n<blockquote>\n<p>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern …]] [ASC|DESC] [ALPHA] [STORE destination]</p>\n</blockquote>\n<p>其中：</p>\n<ul>\n<li><code>DESC</code> 用来倒序排列</li>\n<li><code>ALPHA</code> 用来进行字符串排序</li>\n<li><code>LIMIT</code> 用来限制返回结果数</li>\n</ul>\n<p><code>SORT</code> 还可以实现类似关系数据库的外键查询，或跳过某元素等等更高级的功能。例如：</p>\n<p><img src=\"sort_more.png\" alt=\"sort_more\"></p>\n"},{"title":"关于 JavaScript 数字的那些事","url":"http://zhangqiang.work/posts/1103201511/","content":"<p>本文总结 JavaScript 语言中和数字相关的语言特性、缺陷与陷阱及使用技巧。相关基础内容请参考语言规范，本文只涉及较容易被疏忽的方面。首先分享一个经验：我在使用 JavaScript 做大数计算或高精度计算时有个原则：<strong>不要使用 JavaScript 做这件事情！</strong> 如果某个运算过程你可以选择在 Java 中或 JavaScript 中完成，<strong>尽可能不要使用 JavaScript 做数学运算！</strong></p>\n<p>本文所有示例内容在如下环境测试：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div><div class=\"line\">v4.0.0</div><div class=\"line\">$ node -p process.versions.v8</div><div class=\"line\">4.5.103.30</div></pre></td></tr></table></figure>\n<p>或</p>\n<pre><code>Safari 版本 9.0 (11601.1.56)\n</code></pre><h2 id=\"1-数字字面值也是对象\"><a href=\"#1-数字字面值也是对象\" class=\"headerlink\" title=\"1. 数字字面值也是对象\"></a>1. 数字字面值也是对象</h2><p>在 JavaScript 中，数字的字面值也是对象。可以使用它直接调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"number\">3.1415926</span>.toFixed(<span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"string\">'3.1416'</span></div></pre></td></tr></table></figure>\n<p>然而使用整数直接调用方法会抛出 <code>SyntaxError</code> ，这是因为解释器不能正确解析，它试图将点操作符解释成浮点数的一部分：</p>\n<p><img src=\"syntaxerror.png\" alt=\"SyntaxError\"></p>\n<p>克服这种情况非常简单，有下面三种方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123.</span>.toString();</div><div class=\"line\"><span class=\"number\">123</span> .toString();</div><div class=\"line\">(<span class=\"number\">123</span>).toString();</div></pre></td></tr></table></figure>\n<h2 id=\"2-两个特殊数值：NaN-和-Infinity\"><a href=\"#2-两个特殊数值：NaN-和-Infinity\" class=\"headerlink\" title=\"2. 两个特殊数值：NaN 和 Infinity\"></a>2. 两个特殊数值：NaN 和 Infinity</h2><h3 id=\"2-1-NaN\"><a href=\"#2-1-NaN\" class=\"headerlink\" title=\"2.1. NaN\"></a>2.1. NaN</h3><p><code>NaN</code> 代表“不是一个数字”，而它的类型却是 <code>number</code> 。实际使用中，它通常产生自——从表单取数据并转换成数字类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'age'</span>).value;</div><div class=\"line\"><span class=\"built_in\">Number</span>(age); <span class=\"comment\">// 用户输入 'abc' 时此处则为 `NaN`</span></div></pre></td></tr></table></figure>\n<p>识别 <code>NaN</code> 不能依赖等同判断( <code>===</code> )，甚至普通的相等判断( <code>==</code> )也不行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ Number(<span class=\"string\">'1.2x'</span>) === NaN</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">$ Number(<span class=\"string\">'abc'</span>) == NaN</div><div class=\"line\"><span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>需要使用 <code>isNaN</code> 方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ isNaN(NaN)</div><div class=\"line\"><span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>然而此方法会尝试将其参数动态转换成 <code>number</code> 类型再判断，因此对于 <code>string</code> 或 <code>object</code> 等类型的检测，它通常会返回 <code>true</code> :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">'xyz'</span>);    <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">isNaN</span>([<span class=\"string\">'abc'</span>]);  <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">isNaN</span>(&#123;&#125;);       <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">isNaN</span>([<span class=\"number\">123</span>]);    <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>为了正确的检测出 <code>NaN</code> 可以使用一个小技巧，它基于这样一个事实：目前只有 <code>NaN</code> 是不等于自身的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRealNaN</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x !== x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(isRealNaN(<span class=\"literal\">NaN</span>));   <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(isRealNaN(&#123;&#125;));    <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(isRealNaN(<span class=\"string\">'foo'</span>)); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>更为正统的方式是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRealNaN</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然，在实现了 ECMAScript 6 的解释器环境中，也可以使用 <code>Number.isNaN()</code> 方法。</p>\n<h3 id=\"2-2-Infinity\"><a href=\"#2-2-Infinity\" class=\"headerlink\" title=\"2.2. Infinity\"></a>2.2. Infinity</h3><p><code>Infinity</code> 实际开发中出现的频率似乎并不高。它代表无穷大，对应的还有 <code>-Infinity</code> 代表无穷小。看几个例子即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123</span> / <span class=\"number\">0</span>              <span class=\"comment\">// Infinity</span></div><div class=\"line\"><span class=\"literal\">Infinity</span> + <span class=\"number\">1</span>         <span class=\"comment\">// Infinity</span></div><div class=\"line\"><span class=\"literal\">Infinity</span> + <span class=\"literal\">Infinity</span>  <span class=\"comment\">// Infinity</span></div><div class=\"line\"><span class=\"literal\">Infinity</span> - <span class=\"literal\">Infinity</span>  <span class=\"comment\">// NaN</span></div></pre></td></tr></table></figure>\n<h2 id=\"3-数字的显示方式\"><a href=\"#3-数字的显示方式\" class=\"headerlink\" title=\"3. 数字的显示方式\"></a>3. 数字的显示方式</h2><p>1) 整数位数超过 21 位时显示成科学计数法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"number\">1234567890123456789012</span></div><div class=\"line\"><span class=\"number\">1.2345678901234568e+21</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"number\">123456789012345678901</span></div><div class=\"line\"><span class=\"number\">123456789012345680000</span></div></pre></td></tr></table></figure>\n<p>2) 以 <code>0.</code> 开头，后面跟着超过 5 个零时，显示成科学计数法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"number\">0.0000001</span></div><div class=\"line\"><span class=\"number\">1e-7</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"number\">0.000001</span></div><div class=\"line\"><span class=\"number\">0.000001</span></div></pre></td></tr></table></figure>\n<p>3) 其它情况下正常显示。</p>\n<h2 id=\"4-总是不准的数学运算\"><a href=\"#4-总是不准的数学运算\" class=\"headerlink\" title=\"4. 总是不准的数学运算\"></a>4. 总是不准的数学运算</h2><p>如果你有一定的 JavaScript 开发经验，一定遇到过浮点数算不准确的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span></div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"number\">0.2</span> * <span class=\"number\">0.2</span> === <span class=\"number\">0.04</span></div><div class=\"line\"><span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>然而事情似乎并不只是发生在浮点数身上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"number\">9007199254740992</span> + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">9007199254740992</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"number\">9007199254740992</span> + <span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">9007199254740994</span></div></pre></td></tr></table></figure>\n<p>这是因为事实上 JavaScript 中的一切数字实际存储的均为 64 bit 浮点数，采用 IEEE 754 规范。</p>\n<h2 id=\"5-不尽如人意的四舍五入\"><a href=\"#5-不尽如人意的四舍五入\" class=\"headerlink\" title=\"5. 不尽如人意的四舍五入\"></a>5. 不尽如人意的四舍五入</h2><blockquote>\n<p>toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。</p>\n</blockquote>\n<p>以上是 w3school 对 <code>toFixed()</code> 方法的解释，然而此方法并不尽如人意。</p>\n<p>当数字大于 21 位时，<code>toFixed()</code> 方法只是调用 <code>toString()</code> 返回科学计数法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ (1234567890123456789012).toFixed(2)</div><div class=\"line\"><span class=\"string\">'1.2345678901234568e+21'</span></div></pre></td></tr></table></figure>\n<p>由于浮点数精度问题，<code>toFixed()</code> 方法实际上只能正确做到“四舍六入”，对于“五”，它的处理看上去并不那么精确：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"number\">1.105</span>.toFixed(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"string\">'1.10'</span></div></pre></td></tr></table></figure>\n<p>关于此方法还有“四舍六入五成双”的解释：</p>\n<ol>\n<li>被修约的数字小于5时，该数字舍去；</li>\n<li>被修约的数字大于5时，则进位；</li>\n<li>被修约的数字等于5时，要看5前面的数字，若是奇数则进位，若是偶数则将5舍掉，即修约后末尾数字都成为偶数；若5的后面还有不为“0”的任何数，则此时无论5的前面是奇数还是偶数，均应进位。</li>\n</ol>\n<p>然而这也并不准确，可以参考下面的结果：</p>\n<pre><code>1.105   &apos;1.10&apos;\n1.115   &apos;1.11&apos;\n1.125   &apos;1.13&apos;\n1.135   &apos;1.14&apos;\n1.145   &apos;1.15&apos;\n1.155   &apos;1.16&apos;\n1.165   &apos;1.17&apos;\n1.175   &apos;1.18&apos;\n1.185   &apos;1.19&apos;\n1.195   &apos;1.20&apos;\n</code></pre><p>有种比较流行的<strong>修正方法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myToFixed</span>(<span class=\"params\">value, precision</span>) </span>&#123;</div><div class=\"line\">    precision = precision || <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> pow = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, precision);</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">Math</span>.round(value * pow) / pow).toFixed(precision);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它的计算结果看上去准确多了：</p>\n<pre><code>1.105   &apos;1.11&apos;\n1.115   &apos;1.12&apos;\n1.125   &apos;1.13&apos;\n1.135   &apos;1.14&apos;\n1.145   &apos;1.15&apos;\n1.155   &apos;1.16&apos;\n1.165   &apos;1.17&apos;\n1.175   &apos;1.18&apos;\n1.185   &apos;1.19&apos;\n1.195   &apos;1.20&apos;\n</code></pre><p>然而这个世界对程序员并没有那么善意：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(myToFixed(<span class=\"number\">2.135</span>, <span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 2.13</span></div></pre></td></tr></table></figure>\n<p>最后，我就不告诉你IE7的结果不尽相同了。而其它浏览器的计算结果是否和我的环境相同，我也不敢告诉你答案，因为我不确定。至于如何完全正确地四舍五入，我并没有答案，也有人采用转成字符串进而进行正则匹配的方法，这在特定的场合下也许可行，但很难写出通用的方法。</p>\n<h2 id=\"6-取随机整数\"><a href=\"#6-取随机整数\" class=\"headerlink\" title=\"6. 取随机整数\"></a>6. 取随机整数</h2><p>JavaScript 中缺少产生随机整数的方法，但是可以用 <code>Math.random()</code> 自行实现。参考代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextInt</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * n);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ret &gt; n || ret &lt; <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">        ret = n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>产生的随机数分布的还算均匀。使用如下代码测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> foo = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">10000</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> s = nextInt(x);</div><div class=\"line\">        <span class=\"keyword\">if</span> (foo[s]) &#123;</div><div class=\"line\">            foo[s] = foo[s] + <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            foo[s] = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(foo);</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"number\">2</span>);</div><div class=\"line\">test(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"nextint.png\" alt=\"nextint\"></p>\n<p><strong>参考资料：</strong></p>\n<ul>\n<li><a href=\"http://www.2ality.com/2012/04/number-encoding.html\" target=\"_blank\" rel=\"external\">How numbers are encoded in JavaScript</a></li>\n</ul>\n"},{"title":"Java8特性 - Lambda表达式","url":"http://zhangqiang.work/posts/1030201510/","content":"<p>Lambda表达式并不是什么新概念，Java8中引入它主要解决只有单一方法的匿名类使用起来过于丑陋、晦涩的问题。不说废话。假设有这样一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Sex &#123;</div><div class=\"line\">        MALE, FEMALE</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    String name;</div><div class=\"line\">    LocalDate birthday;</div><div class=\"line\">    Sex gender;</div><div class=\"line\">    String emailAddress;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printPerson</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果想从一组 <code>Person</code> 中打印特定年龄的，代码看起来是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersonsOlderThan</span><span class=\"params\">(List&lt;Person&gt; roster, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p.getAge() &gt;= age) &#123;</div><div class=\"line\">            p.printPerson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果查找年龄的算法变了，你可能会把代码改成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersonsWithinAgeRange</span><span class=\"params\">(</span></span></div><div class=\"line\">    List&lt;Person&gt; roster, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (low &lt;= p.getAge() &amp;&amp; p.getAge() &lt; high) &#123;</div><div class=\"line\">            p.printPerson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时你意识到，算法的改变总是会导致修改上面的代码，为了应对将来可能的变化，你想到了把查找 <code>Person</code> 的算法从中剥离出来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersons</span><span class=\"params\">(</span></span></div><div class=\"line\">    List&lt;Person&gt; roster, CheckPerson tester) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</div><div class=\"line\">            p.printPerson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时只需要针对不同的查找算法提供不同的实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CheckPerson</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckPersonEligibleForSelectiveService</span> <span class=\"keyword\">implements</span> <span class=\"title\">CheckPerson</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> p.gender == Person.Sex.MALE &amp;&amp;</div><div class=\"line\">            p.getAge() &gt;= <span class=\"number\">18</span> &amp;&amp;</div><div class=\"line\">            p.getAge() &lt;= <span class=\"number\">25</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用的时候，只需要实例化特定的实现类并传入方法即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">printPersons(roster, <span class=\"keyword\">new</span> CheckPersonEligibleForSelectiveService());</div></pre></td></tr></table></figure>\n<p>然而这样的方式会引入一堆“很小”的实现类。于是你发现这种场景下使用匿名类更为合适：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">printPersons(</div><div class=\"line\">    roster,</div><div class=\"line\">    <span class=\"keyword\">new</span> CheckPerson() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> p.getGender() == Person.Sex.MALE</div><div class=\"line\">                &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">                &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"1-Lambda-表达式的使用\"><a href=\"#1-Lambda-表达式的使用\" class=\"headerlink\" title=\"1. Lambda 表达式的使用\"></a>1. Lambda 表达式的使用</h3><p><code>CheckPerson</code> 是一个<strong>函数接口</strong>，它是指只有一个抽象方法的接口(友情提示: 没有任何方法的接口叫<strong>标识接口</strong>)。由于只有一个抽象方法，我们完全有理由在实现中忽略掉方法名，而这正是 Lambda 表达式的作用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">printPersons(</div><div class=\"line\">    roster,</div><div class=\"line\">    (Person p) -&gt; p.getGender() == Person.Sex.MALE</div><div class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>再回顾一下 <code>CheckPerson</code> 接口的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CheckPerson</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样的<strong>函数接口</strong>过于简单，似乎没有必要在应用中定义诸多类似的东西。于是 JDK 给你提供了很多开箱即用的接口，它们在 <code>java.util.function</code> 包中。比如该例中可以使用 <code>Predicate&lt;T&gt;</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(T t)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用它来替换 <code>CheckPerson</code> 接口，代码变成了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersonsWithPredicate</span><span class=\"params\">(</span></span></div><div class=\"line\">    List&lt;Person&gt; roster, Predicate&lt;Person&gt; tester) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</div><div class=\"line\">            p.printPerson();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应的调用方式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">printPersonsWithPredicate(</div><div class=\"line\">    roster,</div><div class=\"line\">    p -&gt; p.getGender() == Person.Sex.MALE</div><div class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>玩完了年龄的查找算法，我们来看一下执行逻辑。前面的示例在找到合法的年龄后，只是调用了 <code>printPerson()</code> 方法进行打印。如果想改变这一执行逻辑，不再是打印呢？我们可以将执行过程当作一个参数并使用 lambda 表达式来改造。要记住，使用 lambda 表达式必须实现函数接口。</p>\n<p><code>Consumer&lt;T&gt;</code> 接口可以传入一个参数并返回 <code>void</code> ，该接口包含一个方法：<code>void accept(T t)</code> ，使用它将代码改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processPersons</span><span class=\"params\">(</span></span></div><div class=\"line\">        List&lt;Person&gt; roster,</div><div class=\"line\">        Predicate&lt;Person&gt; tester,</div><div class=\"line\">        Consumer&lt;Person&gt; block) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</div><div class=\"line\">            block.accept(p);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这时便可以将不同的执行逻辑当作参数传入，如果依然想执行打印方法，则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">processPersons(</div><div class=\"line\">     roster,</div><div class=\"line\">     p -&gt; p.getGender() == Person.Sex.MALE</div><div class=\"line\">         &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">         &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>,</div><div class=\"line\">     p -&gt; p.printPerson()</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>有时会需要处理后得到一个返回值，<code>Function&lt;T,R&gt;</code> 接口正是此作用，它包含一个 <code>R apply(T t)</code> 方法。现在来继续改造上面的例子，加入一个新参数 <code>mapper</code> 来提供获得数据的逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processPersonsWithFunction</span><span class=\"params\">(</span></span></div><div class=\"line\">        List&lt;Person&gt; roster,</div><div class=\"line\">        Predicate&lt;Person&gt; tester,</div><div class=\"line\">        Function&lt;Person, String&gt; mapper,</div><div class=\"line\">        Consumer&lt;String&gt; block) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</div><div class=\"line\">            String data = mapper.apply(p);</div><div class=\"line\">            block.accept(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用代码，获得用户的电子邮件地址并输出到控制台：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">processPersonsWithFunction(</div><div class=\"line\">    roster,</div><div class=\"line\">    p -&gt; p.getGender() == Person.Sex.MALE</div><div class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>,</div><div class=\"line\">    p -&gt; p.getEmailAddress(),</div><div class=\"line\">    email -&gt; System.out.println(email)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"2-充分使用泛型\"><a href=\"#2-充分使用泛型\" class=\"headerlink\" title=\"2. 充分使用泛型\"></a>2. 充分使用泛型</h3><p>事实上，我们上面得到的 <code>processPersonsWithFunction</code> 方法不仅可以处理 <code>Person</code> 类型，如果我们把类型声明改用泛型，可以得到更为通用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;X, Y&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processElements</span><span class=\"params\">(</span></span></div><div class=\"line\">        Iterable&lt;X&gt; source,</div><div class=\"line\">        Predicate&lt;X&gt; tester,</div><div class=\"line\">        Function &lt;X, Y&gt; mapper,</div><div class=\"line\">        Consumer&lt;Y&gt; block) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (X p : source) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</div><div class=\"line\">            Y data = mapper.apply(p);</div><div class=\"line\">            block.accept(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>针对 <code>Person</code> 类型，依然可以如此调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">processElements(</div><div class=\"line\">    roster,</div><div class=\"line\">    p -&gt; p.getGender() == Person.Sex.MALE</div><div class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>,</div><div class=\"line\">    p -&gt; p.getEmailAddress(),</div><div class=\"line\">    email -&gt; System.out.println(email)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>它的执行过程是这样的：</p>\n<ol>\n<li>从集合 <code>source</code> 中获取一组对象，该例从 <code>roster</code> 中获得 <code>Person</code> 对象。</li>\n<li>从这组对象中过滤出符合 <code>tester</code> 的( 即满足 <code>Predicate</code> 的对象 )。该例的 <code>Predicate</code> 使用 lambda 表达式。</li>\n<li>通过 <code>Function</code> 类型的对象 <code>mapper</code> ，将上面过滤出的对象类型映射为某值类型。该例中的 <code>Function</code> 对象是 Lambda 表达式，它返回了 <code>String</code> 型的电子邮件地址。</li>\n<li>将映射后的值通过 <code>Consumer</code> 对象 <code>block</code> 执行某行为。该例中的 <code>Consumer</code> 对象也是 Lambda 表达式，执行的行为是打印字符串。</li>\n</ol>\n<h3 id=\"3-使用链式操作\"><a href=\"#3-使用链式操作\" class=\"headerlink\" title=\"3. 使用链式操作\"></a>3. 使用链式操作</h3><p>使用 Lambda 表达式作为参数，使得链式操作变得极为方便，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">roster</div><div class=\"line\">    .stream()</div><div class=\"line\">    .filter(</div><div class=\"line\">        p -&gt; p.getGender() == Person.Sex.MALE</div><div class=\"line\">            &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">            &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>)</div><div class=\"line\">    .map(p -&gt; p.getEmailAddress())</div><div class=\"line\">    .forEach(email -&gt; System.out.println(email));</div></pre></td></tr></table></figure>\n<p>例子中用到的方法签名如下：</p>\n<ul>\n<li>Stream<e> <strong>stream</strong>()</e></li>\n<li>Stream<t> <strong>filter</strong>(Predicate&lt;? super T&gt; predicate)</t></li>\n<li><r> Stream<r> <strong>map</strong>(Function&lt;? super T,? extends R&gt; mapper)</r></r></li>\n<li>void <strong>forEach</strong>(Consumer&lt;? super T&gt; action)</li>\n</ul>\n<p>参考此例，可以在 Java 中写出许多能够媲美支持函数式编程的语言的代码。</p>\n<h3 id=\"4-在-GUI-中的应用\"><a href=\"#4-在-GUI-中的应用\" class=\"headerlink\" title=\"4. 在 GUI 中的应用\"></a>4. 在 GUI 中的应用</h3><p>Java GUI 编程中经常出现类似的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">btn.setOnAction(<span class=\"keyword\">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(ActionEvent event)</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>它极其适合使用 Lambda 表达式进行改造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">btn.setOnAction(</div><div class=\"line\">    event -&gt; System.out.println(<span class=\"string\">\"Hello World!\"</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"5-语法细节\"><a href=\"#5-语法细节\" class=\"headerlink\" title=\"5. 语法细节\"></a>5. 语法细节</h3><p>领略了 Lambda 表达式的风采后，来看其语法。Lambda 表达式由三部分组成：</p>\n<ul>\n<li>形参列表</li>\n<li>箭头符号</li>\n<li>主体部分</li>\n</ul>\n<p>首先是放在圆括号中的、以逗号分隔的<strong>形参列表</strong>。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(User u, Role r) -&gt; ...</div></pre></td></tr></table></figure>\n<p>在 Lambda 表达式中可以省略参数类型，当只有一个参数时，也可以省略圆括号：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p -&gt; p.getGender() == Person.Sex.MALE </div><div class=\"line\">    &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">    &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></div></pre></td></tr></table></figure>\n<p><strong>箭头符号</strong>就是 <code>-&gt;</code> 。</p>\n<p><strong>主体</strong>可以是一个表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p.getGender() == Person.Sex.MALE </div><div class=\"line\">    &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">    &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></div></pre></td></tr></table></figure>\n<p>也可以是一个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">p -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> p.getGender() == Person.Sex.MALE</div><div class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></div><div class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>无返回值的语句也可以不使用语句块( <code>{}</code> )：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">email -&gt; System.out.println(email)</div></pre></td></tr></table></figure>\n<p>来看一个使用多个形参的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IntegerMath</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">operation</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;   </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">operateBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, IntegerMath op)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> op.operation(a, b);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        Calculator myApp = <span class=\"keyword\">new</span> Calculator();</div><div class=\"line\">        IntegerMath addition = (a, b) -&gt; a + b;</div><div class=\"line\">        IntegerMath subtraction = (a, b) -&gt; a - b;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"40 + 2 = \"</span> +</div><div class=\"line\">            myApp.operateBinary(<span class=\"number\">40</span>, <span class=\"number\">2</span>, addition));</div><div class=\"line\">        System.out.println(<span class=\"string\">\"20 - 10 = \"</span> +</div><div class=\"line\">            myApp.operateBinary(<span class=\"number\">20</span>, <span class=\"number\">10</span>, subtraction));    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它的输出结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">40 + 2 = 42</div><div class=\"line\">20 - 10 = 10</div></pre></td></tr></table></figure>\n<h3 id=\"6-作用域\"><a href=\"#6-作用域\" class=\"headerlink\" title=\"6. 作用域\"></a>6. 作用域</h3><p>Lambda 表达式中可以使用变量，采用词法作用域(ps：可参考 JavaScript 作用域)，不存在变量作用域屏蔽问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaScopeTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstLevel</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">methodInFirstLevel</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 该语句将会导致 `语句A` 编译错误：</span></div><div class=\"line\">            <span class=\"comment\">// \"local variables referenced from a lambda expression</span></div><div class=\"line\">            <span class=\"comment\">// must be final or effectively final\"</span></div><div class=\"line\">            <span class=\"comment\">// x = 99;</span></div><div class=\"line\">            </div><div class=\"line\">            Consumer&lt;Integer&gt; myConsumer = (y) -&gt; </div><div class=\"line\">            &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"x = \"</span> + x); <span class=\"comment\">// 语句A</span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"y = \"</span> + y);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"this.x = \"</span> + <span class=\"keyword\">this</span>.x);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"LambdaScopeTest.this.x = \"</span> +</div><div class=\"line\">                    LambdaScopeTest.<span class=\"keyword\">this</span>.x);</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            myConsumer.accept(x);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</div><div class=\"line\">        LambdaScopeTest st = <span class=\"keyword\">new</span> LambdaScopeTest();</div><div class=\"line\">        LambdaScopeTest.FirstLevel fl = st.new FirstLevel();</div><div class=\"line\">        fl.methodInFirstLevel(<span class=\"number\">23</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上例的输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = <span class=\"number\">23</span></div><div class=\"line\">y = <span class=\"number\">23</span></div><div class=\"line\"><span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></div><div class=\"line\">LambdaScopeTest.<span class=\"keyword\">this</span>.x = <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>如果把例子中的 <code>myConsumer</code> 的参数改为 <code>y</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Consumer&lt;Integer&gt; myConsumer = (x) -&gt; &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将会抛出错误： “variable x is already defined in method methodInFirstLevel(int)” 。这是因为 Lambda 表达式并不会引入新的作用域范围。Lambda 表达式中只能访问 final 或 effectively final 的变量，这一点和匿名类仍然是一致的。</p>\n<blockquote>\n<p><strong>effectively final</strong> 是 Java8 的特性之一：局部内部类和匿名内部类访问的局部变量必须由final修饰，Java8 中可以不加final修饰符，由系统默认添加。</p>\n</blockquote>\n<h3 id=\"7-目标类型\"><a href=\"#7-目标类型\" class=\"headerlink\" title=\"7. 目标类型\"></a>7. 目标类型</h3><p>Lambda 表达式的类型是由上下文推导而来，并不是函数接口的名称。例如之前的两个例子：</p>\n<ul>\n<li>public static void printPersons(List<person> roster, CheckPerson tester) </person></li>\n<li>public void printPersonsWithPredicate(List<person> roster, Predicate<person> tester)</person></person></li>\n</ul>\n<p>当 Java 的运行时执行 <code>printPersons</code> 方法时需要 <code>CheckPerson</code> 类型，因此 Lambda 表达式的类型是 <code>CheckPerson</code> 。而在方法 <code>printPersonsWithPredicate</code> 中，其类型为 <code>Predicate&lt;Person&gt;</code> 。这种类型叫做 <strong>目标类型(target type)</strong> ，它只能在下列场景使用：</p>\n<ul>\n<li>变量声明</li>\n<li>赋值</li>\n<li>返回语句 return</li>\n<li>数组初始化</li>\n<li>方法或构造器参数</li>\n<li>Lambda 表达式主体中</li>\n<li>条件表达式 <code>? :</code></li>\n<li>类型转换</li>\n</ul>\n<p>最后来看一个例子。假设有如下两个函数接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">V <span class=\"title\">call</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Runnable.run</code> 没有返回值，而 <code>Callable&lt;V&gt;.call</code> 有返回值。</p>\n<p>现在有这样两个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(Runnable r)</span> </span>&#123;</div><div class=\"line\">    r.run();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">invoke</span><span class=\"params\">(Callable&lt;T&gt; c)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> c.call();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面的语句会执行哪个方法呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = invoke(() -&gt; <span class=\"string\">\"done\"</span>);</div></pre></td></tr></table></figure>\n<p>答案是 <code>invoke(Callable&lt;T&gt;)</code> ，因为它有返回值。因此，Lambda 表达式的类型是 <code>Callable&lt;T&gt;</code> ，很简单对吗？</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\" target=\"_blank\" rel=\"external\">The Java™ Tutorials: Lambda Expressions</a></li>\n</ul>\n"},{"title":"编程基本原则汇总","url":"http://zhangqiang.work/posts/1019201510/","content":"<p>整理一些公认的编程基本原则。</p>\n<h2 id=\"KISS\"><a href=\"#KISS\" class=\"headerlink\" title=\"KISS\"></a>KISS</h2><blockquote>\n<p>Keep It Simple Stupid</p>\n</blockquote>\n<p>要注重简约。</p>\n<h2 id=\"YAGNI\"><a href=\"#YAGNI\" class=\"headerlink\" title=\"YAGNI\"></a>YAGNI</h2><blockquote>\n<p>you aren’t gonna need it</p>\n</blockquote>\n<p>在确实需要某功能之前，不要依靠预测去实现它。</p>\n<h2 id=\"DRY\"><a href=\"#DRY\" class=\"headerlink\" title=\"DRY\"></a>DRY</h2><blockquote>\n<p>Don’t Repeat Yourself</p>\n</blockquote>\n<p>不要编写重复代码，将业务规则、公式、元数据等放在一处。</p>\n<h2 id=\"LSP\"><a href=\"#LSP\" class=\"headerlink\" title=\"LSP\"></a>LSP</h2><blockquote>\n<p>Liskov Substitution Principle</p>\n</blockquote>\n<p>里氏替换原则：程序中的对象可以被它的子类型替换，而同时不改变程序的正确性。</p>\n<h2 id=\"LoD\"><a href=\"#LoD\" class=\"headerlink\" title=\"LoD\"></a>LoD</h2><blockquote>\n<p>Law of Demeter : Don’t talk to strangers</p>\n</blockquote>\n<p>迪米特法则：又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。</p>\n<p>对象的方法应该只调用以下方法：</p>\n<ol>\n<li>对象自己的；</li>\n<li>方法参数中的；</li>\n<li>方法内部创建的任何对象中的方法；</li>\n<li>对象直接属性或域中的方法(聚合关系)。</li>\n</ol>\n<h2 id=\"OCP\"><a href=\"#OCP\" class=\"headerlink\" title=\"OCP\"></a>OCP</h2><blockquote>\n<p><strong>Open/Closed Principle:</strong> Software entities (e.g. classes) should be open for extension, but closed for modification.</p>\n</blockquote>\n<p>开闭原则：软件实体应当对扩展开放，对修改关闭。</p>\n<h2 id=\"SRP\"><a href=\"#SRP\" class=\"headerlink\" title=\"SRP\"></a>SRP</h2><blockquote>\n<p><strong>Single Responsibility Principle: </strong>A class should never have more than one reason to change.</p>\n</blockquote>\n<p>单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。</p>\n<p><strong>Resources</strong></p>\n<ol>\n<li><a href=\"http://en.wikipedia.org/wiki/KISS_principle\" target=\"_blank\" rel=\"external\">KISS principle</a></li>\n<li><a href=\"http://principles-wiki.net/principles:keep_it_simple_stupid\" target=\"_blank\" rel=\"external\">Keep It Simple Stupid (KISS)</a></li>\n<li><a href=\"http://c2.com/xp/YouArentGonnaNeedIt.html\" target=\"_blank\" rel=\"external\">You Arent Gonna Need It</a></li>\n<li><a href=\"http://www.xprogramming.com/Practices/PracNotNeed.html\" target=\"_blank\" rel=\"external\">You’re NOT gonna need it!</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/You_ain&#39;t_gonna_need_it\" target=\"_blank\" rel=\"external\">You aren’t gonna need it</a></li>\n<li><a href=\"http://c2.com/cgi/wiki?DontRepeatYourself\" target=\"_blank\" rel=\"external\">Dont Repeat Yourself</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself\" target=\"_blank\" rel=\"external\">Don’t repeat yourself</a></li>\n<li><a href=\"http://programmer.97things.oreilly.com/wiki/index.php/Don&#39;t_Repeat_Yourself\" target=\"_blank\" rel=\"external\">Don’t Repeat Yourself</a></li>\n<li><a href=\"http://c2.com/cgi/wiki?CodeForTheMaintainer\" target=\"_blank\" rel=\"external\">Code For The Maintainer</a></li>\n<li><a href=\"http://blog.codinghorror.com/the-noble-art-of-maintenance-programming/\" target=\"_blank\" rel=\"external\">The Noble Art of Maintenance Programming</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Program_optimization\" target=\"_blank\" rel=\"external\">Program optimization</a></li>\n<li><a href=\"http://c2.com/cgi/wiki?PrematureOptimization\" target=\"_blank\" rel=\"external\">Premature Optimization</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\" target=\"_blank\" rel=\"external\">Law of Demeter</a></li>\n<li><a href=\"http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx/\" target=\"_blank\" rel=\"external\">The Law of Demeter Is Not A Dot Counting Exercise</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Liskov_substitution_principle\" target=\"_blank\" rel=\"external\">Liskov substitution principle</a></li>\n<li><a href=\"http://freshbrewedcode.com/derekgreer/2011/12/31/solid-javascript-the-liskov-substitution-principle/\" target=\"_blank\" rel=\"external\">The Liskov Substitution Principle</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\" rel=\"external\">Single responsibility principle</a></li>\n</ol>\n"},{"title":"Docker 架构","url":"http://zhangqiang.work/posts/1015201510/","content":"<p>Docker 采用 C/S 架构。Docker client 和 Docker daemon 通信，以创建、运行或发布容器。可以将 Docker daemon 运行在本机或远程主机，client 和 daemon 通过 sockets 或 RESTful API 交互。</p>\n<h3 id=\"1-Docker核心\"><a href=\"#1-Docker核心\" class=\"headerlink\" title=\"1. Docker核心\"></a>1. Docker核心</h3><ul>\n<li><strong>Docker daemon</strong> 接受并处理Docker Client发送的请求，它是运行在宿主机上的系统进程。</li>\n<li><strong>Docker client</strong> Docker的用户接口，用户通过执行 <code>docker</code> 命令操作 daemon 。</li>\n</ul>\n<p>其基本结构可参考官方图：<br><img src=\"docker-architecture-1.svg\" alt=\"Docker架构\"></p>\n<h3 id=\"2-Docker内部机制\"><a href=\"#2-Docker内部机制\" class=\"headerlink\" title=\"2. Docker内部机制\"></a>2. Docker内部机制</h3><ul>\n<li>镜像(Docker images)</li>\n<li>仓库(Docker registries)</li>\n<li>容器(Docker containers)</li>\n</ul>\n<p>理解 Docker 内部机制需要理解这三个基本概念。</p>\n<h4 id=\"2-1-镜像\"><a href=\"#2-1-镜像\" class=\"headerlink\" title=\"2.1. 镜像\"></a>2.1. 镜像</h4><ol>\n<li>镜像是一个只读模板，可以包含操作系统、Apache 及 Web 应用等；</li>\n<li>镜像用来创建容器；</li>\n<li>镜像是 Docker 的<strong>构建(Build)</strong>组件。</li>\n</ol>\n<h4 id=\"2-2-仓库\"><a href=\"#2-2-仓库\" class=\"headerlink\" title=\"2.2. 仓库\"></a>2.2. 仓库</h4><ol>\n<li>仓库用来存储镜像，以供上传下载；</li>\n<li>仓库分公有、私有，公有仓库是 <code>Docker Hub</code> ；</li>\n<li>仓库是 Docker 的<strong>分发(Distribution)</strong>组件。</li>\n</ol>\n<h4 id=\"2-3-容器\"><a href=\"#2-3-容器\" class=\"headerlink\" title=\"2.3. 容器\"></a>2.3. 容器</h4><ol>\n<li>容器是独立、安全的应用平台，保存着应用运行所需要的一切内容；</li>\n<li>容器由镜像创建，可以被运行、启动、停止、移动或删除；</li>\n<li>容器是 Docker 的<strong>运行(Run)</strong>组件。</li>\n</ol>\n<h3 id=\"3-Docker架构\"><a href=\"#3-Docker架构\" class=\"headerlink\" title=\"3. Docker架构\"></a>3. Docker架构</h3><p><img src=\"docker-architecture-2.png\" alt=\"Docker概念思维导图\"></p>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/articles/docker-source-code-analysis-part1\" target=\"_blank\" rel=\"external\">Docker源码分析（一）：Docker架构</a></li>\n<li><a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"external\">Docker Docs</a></li>\n</ul>\n"},{"title":"写好程序分支控制","url":"http://zhangqiang.work/posts/913201509/","content":"<p>分支语句在编程语言中有着举足轻重的地位。有一定工作年限的程序员，通常遇到过这样一段代码，它有数百行，包含了十几甚至二十几个分支，嵌套多达五六层甚至十多层，各种 <code>if ... else ...</code> 语句交叉在一起。最可恨的是，每个分支上有着详尽的注释，你花了二十分钟，仔细阅读了每条注释，最后发现这些注释根本不能够告诉你它要做什么，你依然一头雾水。甚至有些注释还TM是错的，和代码逻辑根本不一致。</p>\n<p>这样的代码一般是老系统长期维护造成的。随着用户的需求不断地变更，维护它的程序员不得不在代码上无限地增加 <code>if</code> 。当然也有“大牛”可以一开始便写出这么复杂的分支逻辑。</p>\n<p>废话说了很多，本文的目的在于归纳关于分支语句的林林总总。探讨如何写出漂亮的分支逻辑。</p>\n<h1 id=\"1-重构\"><a href=\"#1-重构\" class=\"headerlink\" title=\"1. 重构\"></a>1. 重构</h1><p>一个正常的程序员是不会痛骂 <code>if A then B</code> 这样的分支的，大多数分支代码一开始确实也长得如此。然而，随着时间的推移，需求的不断变更，分支代码通常看起来是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!(A &lt; <span class=\"number\">10</span> || B &gt; <span class=\"number\">5</span>) &amp;&amp; A &gt; <span class=\"number\">10</span> || B &lt; <span class=\"number\">20</span> &amp;&amp; C || C &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (...) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> () ....</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (B &gt; <span class=\"number\">20</span> &amp;&amp; C &lt; <span class=\"number\">50</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你愿意做一个有节操的程序员，在上面的代码继续发臭腐烂、直至必须重写前，你应该对其重构。我认为<strong>重构应该优先保证那些公开的API方法流程清晰易读、抽象层次一致、职责单一，具体的实现细节交由私有方法处理。</strong></p>\n<h2 id=\"1-1-改进复杂的表达式\"><a href=\"#1-1-改进复杂的表达式\" class=\"headerlink\" title=\"1.1. 改进复杂的表达式\"></a>1.1. 改进复杂的表达式</h2><p>进入分支的条件逻辑如果过于复杂，通常代码会很难维护。此时可考虑以下手段改进：</p>\n<h3 id=\"1-1-1-条件反转\"><a href=\"#1-1-1-条件反转\" class=\"headerlink\" title=\"1.1.1. 条件反转\"></a>1.1.1. 条件反转</h3><p>通常形如 <code>if [OK] then ... else ...</code> 的处理逻辑更符号人类的思维习惯，所以对于逻辑“非”优先的分支，可以考虑进行反转。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!(level &gt; <span class=\"number\">4</span> &amp;&amp; score &gt; <span class=\"number\">90</span>)) &#123;</div><div class=\"line\">    reject();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    accept();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (level &gt; <span class=\"number\">4</span> &amp;&amp; score &gt; <span class=\"number\">90</span>) &#123;</div><div class=\"line\">    accept();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-1-2-使用解释变量\"><a href=\"#1-1-2-使用解释变量\" class=\"headerlink\" title=\"1.1.2. 使用解释变量\"></a>1.1.2. 使用解释变量</h3><p>将表达式中逻辑相关的部分，提取出变量，并给予一个合适的名字。此时变量的命名必须能准确表述表达式的含义。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">0</span>].equals(<span class=\"string\">\"admin\"</span>) </div><div class=\"line\">        &amp;&amp; DB.get(<span class=\"string\">\"password\"</span>).equals(inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">1</span>])) &#123;</div><div class=\"line\">    doSomeThing();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> isAdmin = inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">0</span>].equals(<span class=\"string\">\"admin\"</span>);</div><div class=\"line\"><span class=\"keyword\">boolean</span> hasCertified = DB.get(<span class=\"string\">\"password\"</span>).equals(inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">1</span>]);</div><div class=\"line\"><span class=\"keyword\">if</span> (isAdmin &amp;&amp; hasCertified) &#123;</div><div class=\"line\">    doSomeThing();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-1-3-分解分支条件\"><a href=\"#1-1-3-分解分支条件\" class=\"headerlink\" title=\"1.1.3. 分解分支条件\"></a>1.1.3. 分解分支条件</h3><p>如果分支条件中存在多种逻辑交织，可以考虑按层级将其分解。例如将：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (gender == MALE &amp;&amp; age &gt; <span class=\"number\">15</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == MALE &amp;&amp; age &gt; <span class=\"number\">20</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == FEMALE &amp;&amp; age &gt; <span class=\"number\">18</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == FEMALE &amp;&amp; age &gt; <span class=\"number\">25</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (gender == MALE) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">15</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">20</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == FEMALE) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">25</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种分解的副作用是有可能增加圈复杂度，要酌情适当使用。</p>\n<h3 id=\"1-1-4-提取函数\"><a href=\"#1-1-4-提取函数\" class=\"headerlink\" title=\"1.1.4. 提取函数\"></a>1.1.4. 提取函数</h3><p>有时你在维护一个公共API方法，它里面有一个极其复杂的条件表达式。为了保证主干代码的清晰简洁，你可以将这个表达式暂且简单的移到独立函数中，再酌情考虑重构此表达式。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (A &gt; B &amp;&amp; B &lt; <span class=\"number\">100</span> || C == D &amp;&amp; ! E ...) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isReady(...)) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isReady</span><span class=\"params\">(...)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"1-2-改进执行过程\"><a href=\"#1-2-改进执行过程\" class=\"headerlink\" title=\"1.2. 改进执行过程\"></a>1.2. 改进执行过程</h2><h3 id=\"1-2-1-提取函数\"><a href=\"#1-2-1-提取函数\" class=\"headerlink\" title=\"1.2.1. 提取函数\"></a>1.2.1. 提取函数</h3><p>从 <code>if</code> 、<code>then</code> 、<code>else</code> 三个段落中分别提炼出独立的函数。这样做的好处是，可以将“要做的事情”独立出来，从来突出条件逻辑。该做法非常适合这种情况：当你想更清楚地表明每个分支的作用，并且突出每个分支的原因时。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (A &amp;&amp; B || C) &#123;</div><div class=\"line\">    <span class=\"comment\">// 此处数十行代码</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;</div><div class=\"line\">    <span class=\"comment\">// 此处数十行代码</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 此处数十行代码</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面各分支中的代码累加起来可能多达百行。尽管这个样例看起来很简单，真实的代码往往会让维护者的阅读压力很大，可以修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (A &amp;&amp; B || C) &#123;</div><div class=\"line\">    doThingA();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;</div><div class=\"line\">    doThingB();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    doThingC();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-使用空对象模式\"><a href=\"#1-2-2-使用空对象模式\" class=\"headerlink\" title=\"1.2.2. 使用空对象模式\"></a>1.2.2. 使用空对象模式</h3><p>有时你需要再三检查某对象是否为 <code>null</code> ，并对空对象做出相同的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Foo.java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        User user = Factory.getUser(id);</div><div class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            Bar bar = Factory.getBar(user.getName());</div><div class=\"line\">            <span class=\"keyword\">if</span> (bar != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Foobar fb = Factory.getFoobar();</div><div class=\"line\">                <span class=\"keyword\">if</span> (fb != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// ...</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"User is null!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// User.java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"zhangsan\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Factory.java</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时可以将 null 值替换为空对象。重构过程如下：</p>\n<ol>\n<li>为源类建立一个子类，使其行为就像是源类的 null 版本。在源类和 null 子类中都加上 <code>isNull()</code> 函数，前者的 <code>isNull()</code>应该返回 <code>false</code> ，后者的 <code>isNull()</code> 返回<code>true</code> 。</li>\n<li>编译。</li>\n<li>找出所有“索求源对象却获得一个null”的地方。修改这些地方，使它们改而获得一个空对象。</li>\n<li>找出“将源对象与null做比较”的地方。修改这些地方，使它们调用 <code>isNull()</code> 函数。</li>\n<li>编译、测试。</li>\n<li>找出这样的程序点：如果对象不是null，做A动作，否则做B动作。</li>\n<li>对于每一个上述地点，在 null 类中覆写A动作，使其行为和B动作相同。</li>\n<li>使用上述被覆写的动作，然后删除“对象是否等于null”的条件测试。编译并测试。</li>\n</ol>\n<p>重构后的参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealUser</span> <span class=\"keyword\">implements</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"zhangsan\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullUser</span> <span class=\"keyword\">implements</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"User is null!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NullUser();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RealUser();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        User user = Factory.getUser(id);</div><div class=\"line\">        Bar bar = Factory.getBar(user.getName());</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>C#</code> 、<code>Go</code> 、 <code>swift</code> 等从语言级别直接提供 NullObject 模式，你可以很方便的使用或改进它。</p>\n<p>另外，还可以在不修改 <code>User</code> 代码的前提下，引入<strong>标识接口</strong>来识别空对象。例如增加一个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Null</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>它不定义任何函数。然后让空对象实现它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullUser</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Null</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时便可以通过 <code>instanceof</code> 操作符来检查对象是否为 null.</p>\n<h2 id=\"1-3-改进条件调度\"><a href=\"#1-3-改进条件调度\" class=\"headerlink\" title=\"1.3. 改进条件调度\"></a>1.3. 改进条件调度</h2><h3 id=\"1-3-1-使用-卫语句-避免不必要的嵌套\"><a href=\"#1-3-1-使用-卫语句-避免不必要的嵌套\" class=\"headerlink\" title=\"1.3.1. 使用 卫语句 避免不必要的嵌套\"></a>1.3.1. 使用 <code>卫语句</code> 避免不必要的嵌套</h3><blockquote>\n<p>条件表达式通常有2种表现形式。第一：所有分支都属于正常行为。第二：条件表达式提供的答案中只有一种是正常行为，其他都是不常见的情况。这2类条件表达式有不同的用途。如果2条分支都是正常行为，就应该使用形如 <code>if ... else ...</code> 的条件表达式；如果某个条件极其罕见，就应该单独检查该条件，并在该条件为真时立刻从函数中返回。这样的单独检查常常被称为<strong>卫语句(guard clause)</strong>。</p>\n</blockquote>\n<p>可以先将程序逻辑中不符合条件的情况优先过滤掉，以保证主体代码的清晰简单。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</div><div class=\"line\">    doSomeThing();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>改造为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">doSomeThing();</div></pre></td></tr></table></figure>\n<h3 id=\"1-3-2-合并表达式\"><a href=\"#1-3-2-合并表达式\" class=\"headerlink\" title=\"1.3.2. 合并表达式\"></a>1.3.2. 合并表达式</h3><p>如果有一系列条件测试都得到相同的结果，将这些测试合并为一个表达式，并将这个条件表达式提炼为一个独立函数。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (A &amp;&amp; B) &#123;</div><div class=\"line\">    doThingA();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A &amp;&amp; C) &#123;</div><div class=\"line\">    doThingA();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    doThingB();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>改造为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (readyToA()) &#123;</div><div class=\"line\">    doThingA();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    doThingB();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-3-3-表驱动法\"><a href=\"#1-3-3-表驱动法\" class=\"headerlink\" title=\"1.3.3. 表驱动法\"></a>1.3.3. 表驱动法</h3><p>有时，测试条件可以使用数据表的形式驱动。例如以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> [<span class=\"variable\">$month</span> -eq 1]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=31</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 2]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=28</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 3]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=31</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 4]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=30</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 5]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=31</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 6]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=30</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 7]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=31</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 8]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=31</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 9]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=30</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 10]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=31</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 11]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=30</div><div class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> -eq 12]; <span class=\"keyword\">then</span></div><div class=\"line\">    day=31</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p>可以改写为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">days=(31 28 31 30 31 30 31 31 30 31 30 31)</div><div class=\"line\">day=days[<span class=\"variable\">$month</span>]</div></pre></td></tr></table></figure>\n<p>又如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bar;</div><div class=\"line\"><span class=\"keyword\">if</span> (foo === <span class=\"string\">'it'</span>) &#123;</div><div class=\"line\">    bar = <span class=\"string\">'a'</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'is'</span>) &#123;</div><div class=\"line\">    bar = <span class=\"string\">'b'</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'not'</span>) &#123;</div><div class=\"line\">    bar = <span class=\"string\">'c'</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'too'</span>) &#123;</div><div class=\"line\">    bar = <span class=\"string\">'d'</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'bad'</span>) &#123;</div><div class=\"line\">    bar = <span class=\"string\">'e'</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    bar = <span class=\"string\">'f'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</div><div class=\"line\">    <span class=\"string\">'it'</span>: <span class=\"string\">'a'</span>,</div><div class=\"line\">    <span class=\"string\">'is'</span>: <span class=\"string\">'b'</span>,</div><div class=\"line\">    <span class=\"string\">'not'</span>: <span class=\"string\">'c'</span>,</div><div class=\"line\">    <span class=\"string\">'too'</span>: <span class=\"string\">'d'</span>,</div><div class=\"line\">    <span class=\"string\">'bad'</span>: <span class=\"string\">'e'</span></div><div class=\"line\">&#125;[foo] || <span class=\"string\">'f'</span>;</div></pre></td></tr></table></figure>\n<p>利用以上方法结合函数式编程方式，在 JavaScript 中可以创造出极其精简灵活的代码。</p>\n<p>同样，还可以使用 <code>map</code> 或多层 map 来简化分支语句：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">male := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</div><div class=\"line\">female := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span> &#123;</div><div class=\"line\">    <span class=\"string\">\"MALE\"</span>: male,</div><div class=\"line\">    <span class=\"string\">\"FEMALE\"</span>: female,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> m, ok := m[<span class=\"string\">\"MALE\"</span>]; ok &#123;</div><div class=\"line\">    m[<span class=\"string\">\"...\"</span>] ...</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>表驱动法的核心思路是将各判断条件放置到表结构中，将判断逻辑转化为查找表的逻辑，从而减化客户端代码，使代码条理更加清晰。使用时应该重点关注表结构的设计。</p>\n<h3 id=\"1-3-4-使用多态\"><a href=\"#1-3-4-使用多态\" class=\"headerlink\" title=\"1.3.4. 使用多态\"></a>1.3.4. 使用多态</h3><p>当条件分支逻辑是用来判定类型、代码执行逻辑的抽象层次一致且较为复杂时，可考虑使用多态。例如以下代码(注：示例代码结构其实很简单，通常不需要修改，希望你能够理解它背后所代表的复杂的结构)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLegNumbers</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"chicken\"</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"frog\"</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"crab\"</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"centipede\"</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">70</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以重构为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 客户端代码：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLegNumbers</span><span class=\"params\">(Animal animal)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> animal.legs();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 基于多态的重构</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    legs();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chicken</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Frog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Crab</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Centipede</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">70</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有时你还需要：</p>\n<ol>\n<li>使用<strong>策略模式</strong>或<strong>状态模式</strong>取代类型代码；</li>\n<li>使用<strong>命令模式</strong>替换条件调度逻辑。</li>\n</ol>\n<h3 id=\"1-3-5-使用鸭子类型\"><a href=\"#1-3-5-使用鸭子类型\" class=\"headerlink\" title=\"1.3.5. 使用鸭子类型\"></a>1.3.5. 使用鸭子类型</h3><p>除了使用多态做类型泛化，也可以使用鸭子类型约束行为方法。它可以忽略掉你必须对类型所做的判断，而只关心程序中的行为逻辑的抽象。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Chicken <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    legs <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewChicken</span><span class=\"params\">()</span> *<span class=\"title\">Chicken</span></span> &#123;</div><div class=\"line\">    chicken := Chicken&#123;</div><div class=\"line\">        legs: <span class=\"number\">2</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;chicken</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Chicken)</span> <span class=\"title\">Legs</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> c.legs</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>客户端代码只需要约束鸭子类型，不需要关注实现细节，甚至不需要关注是不是 <code>Animal</code>，只要有 <code>Legs</code>，哪怕你是一张桌子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> LegsNumber <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Legs() <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LegNumbers</span><span class=\"params\">(anything LegsNumber)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> anything.Legs()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重构过程你应该把握好“度”的问题，并不是当你遇到A情况时，将其重构为B情况即为最佳实践。通常脱离应用场景是无法谈最佳实践的。例如当你过分地依赖多态或其它设计模式时，很可能因为引入过多的类，将原本简单清晰的代码变得更晦涩。你应该努力做到让代码阅读者每次接收到的信息保持相同的抽象层次，比如一个业务流程控制方法中，应该只能看到流程的控制逻辑以及执行哪些流程，而不应该出现流程处理的细节。</p>\n<h1 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a>2. 性能优化</h1><blockquote>\n<p>过早的优化是万恶之源。 – Donald Knuth</p>\n</blockquote>\n<p>首先，千万不要为了你以为的那么一丁点性能提升，就以牺牲代码可读性为代价而做性能优化！其次，你要认清你所谓的性能提升10倍，是将 1 毫秒变成了 0.1 毫秒，还是将 10 秒变成了 1 秒。性能优化应该关注产生性能瓶颈的部分。</p>\n<p>通常优化工作应该在高层次上来做，很少会出现优化一个分支语句这种极端的场景。但为了文章的完整性，仍然总结了一些和分支相关的优化技巧。结构良好的代码通常和编程语言的关系不是那么紧密，但是性能优化往往会和编程语言紧密关联。优化工作应该总是<strong>结合运行时的具体环境</strong>来做，以下仅仅是一些思路总结。</p>\n<p>假设有这样一段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result0;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result1;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result2;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result3;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result4;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">5</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result5;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">6</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result6;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">7</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result7;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">8</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result8;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">9</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result9;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result10;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-1-将条件按频率倒排\"><a href=\"#2-1-将条件按频率倒排\" class=\"headerlink\" title=\"2.1 将条件按频率倒排\"></a>2.1 将条件按频率倒排</h2><p>实际业务中，如果 <code>value</code> 为 <code>9</code> 的情况经常出现，则应该将该判断放在最前面。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (value == <span class=\"number\">9</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result9;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result0;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result1;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result2;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result3;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result4;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">5</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result5;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">6</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result6;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">7</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result7;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">8</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result8;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result10;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-2-拆分分支\"><a href=\"#2-2-拆分分支\" class=\"headerlink\" title=\"2.2 拆分分支\"></a>2.2 拆分分支</h2><p>如果没有明显的频率，则可考虑拆分成多个分支。其实和上面一样，核心思路是<strong>减少分支判断的次数</strong>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (value &lt; <span class=\"number\">6</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result0;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result1;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result2;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result3;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result4;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result5;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">8</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">6</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result6;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result7;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">8</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result8;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">9</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result9;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result10;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-3-使用-switch-语句\"><a href=\"#2-3-使用-switch-语句\" class=\"headerlink\" title=\"2.3 使用 switch 语句\"></a>2.3 使用 switch 语句</h2><p>多重条件判断时推荐 <code>switch</code> 语句，通常编译器更容易针对它做优化。而像 JavaScript 中，其性能随解释引擎不同表现参差不齐。</p>\n<p>上面的例子很容易改造成 <code>switch</code> 语句，不再给出示例代码。</p>\n<h2 id=\"2-4-使用表查询\"><a href=\"#2-4-使用表查询\" class=\"headerlink\" title=\"2.4 使用表查询\"></a>2.4 使用表查询</h2><p>参见“重构”中的“表驱动法”。当条件判断数量众多，且这些条件能用数字或字符串等离散值来表示时，通常可以进行类似的优化。使用表结构，不仅能提高代码可读性，也能提升效率。</p>\n<h2 id=\"2-5-Duff-策略\"><a href=\"#2-5-Duff-策略\" class=\"headerlink\" title=\"2.5 Duff 策略\"></a>2.5 Duff 策略</h2><p>这条和分支没有直接关系，是快速循环的技巧。由于会用到 <code>switch</code> 语句，也放在此处备查。</p>\n<p>首先要了解这样一个事实：对于绝大多数语言，将循环展开后效率往往更高。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = values.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">    process(values[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>比如数组中有 5 项，展开后的执行速度更快：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">process(values[<span class=\"number\">0</span>]);</div><div class=\"line\">process(values[<span class=\"number\">1</span>]);</div><div class=\"line\">process(values[<span class=\"number\">2</span>]);</div><div class=\"line\">process(values[<span class=\"number\">3</span>]);</div><div class=\"line\">process(values[<span class=\"number\">4</span>]);</div></pre></td></tr></table></figure>\n<p>Duff 策略由 Tom Duff 首先在 C 语言中提出。它是一种展开循环的构想，通过限制循环次数来减少循环开销。这里给出 JavaScript 实现的示例代码(因为这种技巧在 JavaScript 中更实用)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> iterations = <span class=\"built_in\">Math</span>.ceil(values.length / <span class=\"number\">8</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> startAt = values.length % <span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(startAt) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>: process(values[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>: process(values[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>: process(values[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>: process(values[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>: process(values[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>: process(values[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>: process(values[i++]);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: process(values[i++]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    startAt = <span class=\"number\">0</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">while</span> (--iterations &gt; <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n"},{"title":"CSS 布局技巧","url":"http://zhangqiang.work/posts/905201509/","content":"<p>为了方便演示，所有的示例外框采用如下样式用来防止拖拽时超出本文章的布局：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#EEE</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.resizeable</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">resize</span>: both;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>(注：部分示例效果在手机上无法完整显示。)</p>\n<style>\n.resizeable {\n    position: relative;\n    resize: both;\n}\n.resizeable:after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    width: 0;\n    height: 0;\n    border-bottom: 20px solid #000;\n    opacity: .3;\n    border-left: 20px solid transparent;\n}\n.demo {\n    border: 1px solid #EEE;\n    overflow: auto;\n    height: 200px;\n    margin-bottom: 8px;\n    position: relative;\n}\n</style>\n\n<h2 id=\"横向布局\"><a href=\"#横向布局\" class=\"headerlink\" title=\"横向布局\"></a>横向布局</h2><h3 id=\"1-左定宽，右适应\"><a href=\"#1-左定宽，右适应\" class=\"headerlink\" title=\"1.左定宽，右适应\"></a>1.左定宽，右适应</h3><p>核心思路是让左边的浮动，右边通过 <code>margin-left</code> 以留出左边的距离。<br>实际使用时，注意配合 <code>overflow</code> 属性，让上级标签合理地消除浮动。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.d1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.left</span>,</div><div class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.left</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"d1 resizeable\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.d1 {\n    height: 140px;\n    width: 300px;\n    overflow: hidden;\n}\n.d1 .left,\n.d1 .right {\n    height: 100%;\n}\n.d1 .left {\n    float: left;\n    width: 100px;\n    background-color: red;\n}\n.d1 .right {\n    margin-left: 100px;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"d1 resizeable\"><div class=\"left\"></div><div class=\"right\"></div></div></div>\n\n\n<p><strong>变种</strong>：也可以通过给左侧元素增加 <code>position: absolute</code> 属性实现此布局，思路基本相同。<br>使用时注意上级元素也要指定 <code>position</code> 以限制左侧的定位范围。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.d1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.left</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-右定宽，左适应\"><a href=\"#2-右定宽，左适应\" class=\"headerlink\" title=\"2.右定宽，左适应\"></a>2.右定宽，左适应</h3><p>思路和上面完全相同，只需要把左右的顺序反过来。从略。</p>\n<h3 id=\"3-左右同时适应\"><a href=\"#3-左右同时适应\" class=\"headerlink\" title=\"3.左右同时适应\"></a>3.左右同时适应</h3><p>此情况两侧均浮动且使用百分比设置宽度即可。但是有一些技巧需要注意：</p>\n<ul>\n<li><p>如果需要设置 <code>margin</code>、<code>border</code> 等属性，可考虑外围增加一层元素作为包装，以防止右侧被挤到下一行。<br>在包装元素上设置宽度百分比，同时 <code>border</code> 设置为 <code>0</code>，在内部元素设置 <code>width: 100%</code>，按需设置 <code>margin</code>、<br><code>border</code> 等属性；</p>\n</li>\n<li><p>合理使用 <code>min-width</code>、<code>max-width</code> 属性，控制宽度范围，防止屏幕分辨率的变化或浏览器尺寸的变化造成显示不正常；</p>\n</li>\n<li><p>通过响应式设计控制左右不同的显示方式。</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.d3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.left-wrapper</span>,</div><div class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.right-wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.left-wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40%</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.right-wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#EEE</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#EEE</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"d3 resizeable\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-wrapper\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-wrapper\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.d3 {\n    height: 140px;\n    width: 300px;\n    overflow: hidden;\n}\n.d3 .left-wrapper,\n.d3 .right-wrapper {\n    float: left;\n    height: 100%;\n    border: 0;\n}\n.d3 .left-wrapper {\n    width: 40%;\n    background-color: red;\n}\n.d3 .right-wrapper {\n    width: 60%;\n    background-color: blue;\n}\n.d3 .left, .d3 .right {\n    color: #EEE;\n    margin: 10px;\n    padding: 10px;\n    border: 2px solid #EEE;\n}\n</style>\n\n<div class=\"demo\"><div class=\"d3 resizeable\"><div class=\"left-wrapper\"><div class=\"left\">left</div></div><div class=\"right-wrapper\"><div class=\"right\">right</div></div></div></div>\n\n<h3 id=\"4-左右定宽，中间适应\"><a href=\"#4-左右定宽，中间适应\" class=\"headerlink\" title=\"4.左右定宽，中间适应\"></a>4.左右定宽，中间适应</h3><p>可采用左边左浮动，右边右浮动，中间通过 <code>margin</code> 来完成。<br>相应的，也可以使用绝对定位(参考1)。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.d4</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.right</span>, <span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.middle</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.left</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.middle</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">60px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: right;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"d4 resizeable\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.d4 {\n    height: 140px;\n    width: 300px;\n    overflow: hidden;\n}\n.d4 .left, .d4 .right, .d4 .middle {\n    height: 100%;\n}\n.d4 .left {\n    float: left;\n    width: 80px;\n    background-color: red;\n}\n.d4 .middle {\n    margin-left: 80px;\n    margin-right: 60px;\n    background-color: green;\n}\n.d4 .right {\n    float: right;\n    width: 60px;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"d4 resizeable\"><div class=\"right\"></div><div class=\"left\"></div><div class=\"middle\"></div></div></div>\n\n\n\n<h2 id=\"纵向布局\"><a href=\"#纵向布局\" class=\"headerlink\" title=\"纵向布局\"></a>纵向布局</h2><p>多数展示型页面是不限制总高度的，但有些 dashboard 页面会让高度限制在一屏内，不出现纵向滚动条。<br>此时，灵活的纵向布局的高度控制一般需要配合使用 <code>JavasSript</code> 来实现。这里只归纳一些纯 <code>CSS</code> 技巧。</p>\n<h3 id=\"1-上下定高，中间适应\"><a href=\"#1-上下定高，中间适应\" class=\"headerlink\" title=\"1.上下定高，中间适应\"></a>1.上下定高，中间适应</h3><p>通过绝对定位实现。实际使用时发现，此实现只能适用于外围大布局，<br>内部的高度控制，要么继续沿用此方式，要么通过 <code>JavasSript</code> 控制。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.v1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">170px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.top</span>, <span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.center</span>, <span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.bottom</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.top</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.center</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: green;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.bottom</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"v1 resizeable\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.v1 {\n    height: 170px;\n    width: 300px;\n    overflow: hidden;\n}\n.v1 .top, .v1 .center, .v1 .bottom {\n    position: absolute;\n    width: 100%;\n}\n.v1 .top {\n    top: 0;\n    height: 30px;\n    background-color: red;\n}\n.v1 .center {\n    top: 30px;\n    bottom: 40px;\n    background-color: green;\n}\n.v1 .bottom {\n    height: 40px;\n    bottom: 0;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"v1 resizeable\"><div class=\"top\"></div><div class=\"center\"></div><div class=\"bottom\"></div></div></div>\n\n<h3 id=\"2-上固定，下滚动\"><a href=\"#2-上固定，下滚动\" class=\"headerlink\" title=\"2.上固定，下滚动\"></a>2.上固定，下滚动</h3><p>此情况只需要设置上面的 <code>position</code> 为 <code>fixed</code>，下面 <code>margin-top</code> 出相应的高度即可。</p>\n<p>由于 <code>fixed</code> 定位的特殊性，在不使用 frame 的情况下无法在此处给出示例。</p>\n<h2 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h2><h3 id=\"1-水平居中\"><a href=\"#1-水平居中\" class=\"headerlink\" title=\"1. 水平居中\"></a>1. 水平居中</h3><p>1) 最简单且常用的方式是设置 <code>margin: 0 auto</code> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.c1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 40px\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.c1 {\n    height: 100%;\n    width: 300px;\n    margin: 0 auto;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\" style=\"height: 40px\"><div class=\"c1\"></div></div>\n\n<p>2) 也可以通过<strong>绝对定位</strong>来实现同样的效果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.c1</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">150px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-垂直居中\"><a href=\"#2-垂直居中\" class=\"headerlink\" title=\"2. 垂直居中\"></a>2. 垂直居中</h3><p>通常可采用上例中绝对定位的思路来实现。示例同时水平、垂直居中的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.c2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">150px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.c2 {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -50px;\n    margin-left: -150px;\n    height: 100px;\n    width: 300px;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"c2\"></div></div>\n\n<p>以上写法兼容性较好，但是只适合宽度、高度固定的情况，因为需要依据它来设置 <code>margin</code> 值。<br>然而有时元素的高、宽并不能确定，而是根据内容适应，此时，需要通过使用 JavaScript<br>来计算相应的高度。当然，如果你能撇开那些使用古老浏览器的用户不管，你还可以使用 <code>css3</code><br>实现此效果：</p>\n<p>可以使用 <code>flex</code> 布局，这种方式目前只有 webkit 支持：</p>\n<style>\n.c22 {\n    height: 100%;\n\n    display: -moz-box;\n    -moz-box-pack: center;\n    -moz-box-align: center;\n\n    display: -webkit-box;\n    -webkit-box-pack: center;\n    -webkit-box-align: center;\n\n    display: box;\n    box-pack: center;\n    box-align: center;\n}\n.c22 .content {\n    height: 100px;\n    width: 300px;\n    background-color: blue;\n}\n.c23 {\n    height: 100%;\n    display: -webkit-flex;\n    display:         flex;\n    -webkit-align-items: center;\n            align-items: center;\n    -webkit-justify-content: center;\n            justify-content: center;\n}\n.c23 .content {\n    height: 100px;\n    width: 300px;\n    background-color: blue;\n}\n</style>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.c23</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</div><div class=\"line\">    <span class=\"attribute\">display</span>:         flex;</div><div class=\"line\">    <span class=\"attribute\">-webkit-align-items</span>: center;</div><div class=\"line\">            <span class=\"attribute\">align-items</span>: center;</div><div class=\"line\">    <span class=\"attribute\">-webkit-justify-content</span>: center;</div><div class=\"line\">            <span class=\"attribute\">justify-content</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.c23</span> <span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c23\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<div class=\"demo\"><div class=\"c23\"><div class=\"content\"></div></div></div>\n\n<p>或是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.c22</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">display</span>:-moz-box;</div><div class=\"line\">    <span class=\"attribute\">-moz-box-pack</span>:center;</div><div class=\"line\">    <span class=\"attribute\">-moz-box-align</span>:center;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</div><div class=\"line\">    <span class=\"attribute\">-webkit-box-pack</span>: center;</div><div class=\"line\">    <span class=\"attribute\">-webkit-box-align</span>: center;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">display</span>: box;</div><div class=\"line\">    <span class=\"attribute\">box-pack</span>: center;</div><div class=\"line\">    <span class=\"attribute\">box-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.c22</span> <span class=\"selector-class\">.content</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 此处为模拟的尺寸，实际场景中根据内容撑起。 */</span></div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c22\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><div class=\"demo\"><div class=\"c22\"><div class=\"content\"></div></div></div><br>(ps: 目前只有较新版本的 Firefox、Safari、Opera 以及 Chrome 支持此效果)</p>\n"},{"title":"ExtJS 核心概念 - 事件模型","url":"http://zhangqiang.work/posts/721201507/","content":"<p>我们在使用 ExtJS 时，经常会为某组件绑定事件，以做相应扩展处理。创建组件时通过配置 <code>listeners</code> 属性即可绑定事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> btn = Ext.create(<span class=\"string\">'Ext.button.Button'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'Button'</span>,</div><div class=\"line\">    <span class=\"attr\">listeners</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">mouseover</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">btn</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(btn.getText() + ++i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">renderTo</span>: <span class=\"built_in\">document</span>.body</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>也可以通过 <code>on</code> 方法给组件实例绑定事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">btn.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'clicked'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>以上方法已经能解决我们使用 ExtJS 事件时绝大多数需求。然而当我们扩展或自定义一个组件时，常常需要注册自定义的事件并在合适的时机触发它们。</p>\n<p>本篇文章要讲的事件模型分为三部分，以上为其一 —— 绑定：</p>\n<ul>\n<li>注册</li>\n<li>触发</li>\n<li>绑定</li>\n</ul>\n<h2 id=\"ExtJS事件模型完整示例\"><a href=\"#ExtJS事件模型完整示例\" class=\"headerlink\" title=\"ExtJS事件模型完整示例\"></a>ExtJS事件模型完整示例</h2><p>先来看一个较为完整的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'MyButton'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">extend</span>: <span class=\"string\">'Ext.button.Button'</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">initComponent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.callParent();</div><div class=\"line\">        <span class=\"keyword\">this</span>.addEvents(<span class=\"string\">'blink'</span>);  <span class=\"comment\">// &lt;------ 注册</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">shake</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Give your body a bit of a shake!'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.fireEvent(<span class=\"string\">'blink'</span>, <span class=\"keyword\">this</span>); <span class=\"comment\">// &lt;------ 触发</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Take a break!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mybtn = Ext.create(<span class=\"string\">'MyButton'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// &lt;------ 绑定</span></div><div class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Begin to blink!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Begin to blink, again!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">mybtn.shake();</div></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<p><img src=\"event_01.png\" alt=\"示例结果\"></p>\n<p>从代码中可以看出，对于 <code>shake</code> 方法只需要在合适的时机触发 <code>blink</code> 事件，它不需要知道有谁绑定了该事件，也不关心事件的执行过程，从而将 <code>blink</code> 这一特定行为从 <code>shake</code> 中解耦。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>理解 ExtJS 的事件机制，需要先了解 <strong>观察者模式</strong>。该模式维护了一个被观察对象(subject)与其观察者(observer)之间的一对多关系，当对象状态变化时，会自动通知并更新观察者。</p>\n<p><img src=\"event_02.gif\" alt=\"观察者模式类图\"></p>\n<p>一个被观察对象和两个观察者调用关系时序图如下：</p>\n<p><img src=\"event_03.gif\" alt=\"观察者模式时序图\"></p>\n<p>剥离出精简的代码实现示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Subject</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</div><div class=\"line\">&#125;</div><div class=\"line\">Subject.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">addObserver</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ob</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.push(ob);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">removeObserver</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// remove...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">notify</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.observers.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; len; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers[i].update();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' was updated!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> zs = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'zhangsan'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ls = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'lisi'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Subject();</div><div class=\"line\">subject.addObserver(zs);</div><div class=\"line\">subject.addObserver(ls);</div><div class=\"line\">subject.notify();</div></pre></td></tr></table></figure>\n<p>关于观察者模式的书籍、网络资源极其丰富，请参考相应介绍。</p>\n<h2 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布/订阅模式\"></a>发布/订阅模式</h2><p>发布/订阅模式可以被理解为一种特殊的观察者模式。订阅者和发布者并不直接耦合，而是通过注册事件的方式，因此较之观察者模式，其耦合度更低。</p>\n<p>这里摘录 JavaScript 大神 addyosmani 实现的发布/订阅模式代码供参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> window, doc, undef </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> topics = &#123;&#125;,</div><div class=\"line\">        subUid = <span class=\"number\">-1</span>,</div><div class=\"line\">        pubsubz =&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    pubsubz.publish = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> topic, args </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!topics[topic]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> subscribers = topics[topic],</div><div class=\"line\">                len = subscribers ? subscribers.length : <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (len--) &#123;</div><div class=\"line\">                subscribers[len].func(topic, args);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    pubsubz.subscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> topic, func </span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!topics[topic]) &#123;</div><div class=\"line\">            topics[topic] = [];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> token = (++subUid).toString();</div><div class=\"line\">        topics[topic].push(&#123;</div><div class=\"line\">            <span class=\"attr\">token</span>: token,</div><div class=\"line\">            <span class=\"attr\">func</span>: func</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> token;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    pubsubz.unsubscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> token </span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> m <span class=\"keyword\">in</span> topics) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (topics[m]) &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = topics[m].length; i &lt; j; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (topics[m][i].token === token) &#123;</div><div class=\"line\">                        topics[m].splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">                        <span class=\"keyword\">return</span> token;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    getPubSubz = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> pubsubz;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">window</span>.pubsubz = getPubSubz();</div><div class=\"line\"></div><div class=\"line\">&#125;( <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.document ));</div></pre></td></tr></table></figure>\n<h2 id=\"事件模型的缺陷\"><a href=\"#事件模型的缺陷\" class=\"headerlink\" title=\"事件模型的缺陷\"></a>事件模型的缺陷</h2><p>事件模型虽然能够较好的解耦，为编码工作带来灵活性，然而它也有较为明显的缺陷：</p>\n<p><strong>1. 发布者无法得知订阅者中产生的错误</strong></p>\n<p>例如之前的示例，如果订阅者中抛出了异常：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Ext.Error.raise(<span class=\"string\">'I am too old to blink!'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们无法在发布者中得知这一情况。下面的代码无法起作用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">shake: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Give your body a bit of a shake!'</span>);</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fireEvent(<span class=\"string\">'blink'</span>, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Take a break!'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>尽管你可以通过回调方式，将 Error 对象作为回调参数反向传回给发布者，但这样带来的编码复杂度是很高的，而且不能保证每个订阅者都正确捕获异常并传回。同时，发布者自己也会因为异常处理而变得臃肿，且它无法很好的识别异常类型，更无从得知合适的处理逻辑。</p>\n<p><strong>2. 流程控制变得复杂</strong></p>\n<p>事件的订阅过程相对较为分散，通常很难确实绑定的顺序。如果你需要做一系列操作，通过事件模型来处理的话，会把问题变得极为复杂繁琐。</p>\n<p><strong>3. 多个订阅者之间无法通讯，它们互相不了解彼此做了哪些操作</strong></p>\n<p>我发现，这一问题在实际使用 ExtJS 时暴露的极为普遍。很多人习惯通过绑定事件时的回调参数修改此对象，这样一来，由于其它订阅者并不知道他做了什么操作，极有可能得到一个不正确的对象状态。</p>\n<p>例如，张三在某个 JavaScript 源文件中通过绑定事件修改了 button 的状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">btn</span>) </span>&#123;</div><div class=\"line\">    btn.setText(<span class=\"string\">'MyButton'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>而李四并不知道张三做了什么，他想当然地基于 button 的状态做了一些操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">btn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> text = btn.getText();</div><div class=\"line\">    <span class=\"keyword\">if</span> (text === <span class=\"string\">'Button'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a button!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>遗憾的是，如果李四的代码先于张三的执行，则李四能得到正确结果；如果张三的代码先于李四的执行，则李四不能得到正确结果。这显然使得代码结构变得混乱，本来通过事件模型解耦而不相关的代码，又无形地被耦合起来了。而更痛苦的是这样的代码变得更分散，很可能彼此并不知道他人的存在。</p>\n<p><strong>4. 代码调试变得困难</strong></p>\n<p>事件注册到容器中，发布者和订阅者不存在直接调用关系，因此代码调试相对困难一些。</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>button 组件的 <code>handler</code> 不是事件。ExtJS中配置的 <code>handler</code> 只是一个方法调用，不进行事件绑定；</p>\n"},{"title":"ExtJS 核心概念 - 组件的生命周期","url":"http://zhangqiang.work/posts/709201507/","content":"<p>ExtJS 的组件生命周期分为三个阶段：</p>\n<ul>\n<li>初始化</li>\n<li>渲染</li>\n<li>销毁</li>\n</ul>\n<p>准确理解组件的生命周期过程，是正确使用 ExtJS 框架的基础。尤其当你需要编写 ExtJS 的插件或对其做其它扩展时，更应该知道组件详细的生命周期过程。</p>\n<p><img src=\"lifecycle_01.png\" alt=\"ExtJS的组件生命周期\"></p>\n<p>从图中可以看出，ExtJS 的组件始于<strong>初始化</strong>终于<strong>销毁</strong>，而且组件未必需要经过<strong>渲染</strong>即可进入销毁阶段。不同版本的 ExtJS 处理的细节必然不尽相同，我很难告诉你一个永远正确的、详实的生命周期过程，因此我以 4.2 版本为蓝本讨论其生命周期中具体的处理过程，希望给你一个方向性的指引，而你应该根据手中具体的版本结合API文档，甚至是源代码来确定生命周期过程中的每一个细节。值得庆幸的是，我在 ExtJS 3.4/4.2/5.1 三个版本中，都没有发现其生命周期有很大的变动。</p>\n<p>另一件值得补充的事是，我在实践中发现有不少人知道 “ExtJS 存在生命周期” 这么一回儿事，然而并不清楚这和自己的代码有什么关系。我想在正式讲解前告诉你，当你 <code>Ext.create</code> (或 <code>new</code>) 一个组件时，它的生命周期过程就会开始，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.create(<span class=\"string\">'Ext.grid.Panel'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">'MyPanel'</span>,</div><div class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">200</span>,</div><div class=\"line\">    <span class=\"attr\">width</span>: <span class=\"number\">400</span>,</div><div class=\"line\">    <span class=\"attr\">store</span>: ...,</div><div class=\"line\">    <span class=\"attr\">columns</span>: ...</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们创建了一个 ExtJS 的列表组件，此时它会完成生命周期中的 “初始化” 阶段，当我们在浏览器中执行以上代码时并没有看到列表页面，因为组件还没有渲染。如果我们配置了 <code>renderTo</code> 属性，则它会在初始化后直接进入渲染阶段。</p>\n<p>你在无意中操作生命周期的情况也有很多，又如，通过调用 <code>add</code> 方法给 toolbar 组件增加新的按钮：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">toolbar.add([</div><div class=\"line\">    &#123;<span class=\"attr\">text</span>: <span class=\"string\">'Button 1'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">text</span>: <span class=\"string\">'Button 2'</span>&#125;</div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n<p>这一过程通常也会经过“初始化”和“渲染”阶段。我们只是传入了一个极其普通的 JavaScript 对象，ExtJS 框架内部会帮我们创建、初始化 <code>Button</code> 对象并将其渲染到相应容器(此例为 <code>toolbar</code>)中。如果你想自己完成初始化操作，可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> anothorBtn = Ext.create(<span class=\"string\">'Ext.button.Button'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'MyButton'</span></div><div class=\"line\">&#125;);</div><div class=\"line\">toobar.add(anothorBtn);</div></pre></td></tr></table></figure>\n<p>两种方式稍有区别，后者可能会过早地创建一个也许永远用不着的组件。现在来看看具体的生命周期过程:</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>初始化是组件开始构建的起点，你可以粗略地认为，本阶段仅是创建 JavaScript 对象的过程，也正因此初始化可能是执行速度最快的。这一阶段会进行必要的配置信息处理、注册一些基础事件，甚至会做预渲染工作。</p>\n<h3 id=\"1-配置应用\"><a href=\"#1-配置应用\" class=\"headerlink\" title=\"1. 配置应用\"></a>1. 配置应用</h3><p>优先处理参数中传入的配置信息。通常这一过程只是把配置对象复制到想要创建的 ExtJS 组件中以备后续使用。<code>initialConfig</code> 中保存着你传入的原始参数。代码实现看起来是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (config) &#123;</div><div class=\"line\">    Ext.apply(<span class=\"keyword\">this</span>, config);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    config = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">this</span>.initialConfig = config;</div></pre></td></tr></table></figure>\n<h3 id=\"2-注册事件\"><a href=\"#2-注册事件\" class=\"headerlink\" title=\"2. 注册事件\"></a>2. 注册事件</h3><p>之后会注册监听事件，注意是 <strong>注册</strong> 而非触发或绑定事件。事件注册过程就像变量声明，只是声称当前组件有哪些事件，此时应该在文档中描述清楚这些事件何时会触发。ExtJS 提供了注册事件的方法，非常方便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEvents(<span class=\"string\">'activate'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-生成ID\"><a href=\"#3-生成ID\" class=\"headerlink\" title=\"3. 生成ID\"></a>3. 生成ID</h3><p>如果你通过参数传入了 id 则使用传入的，否则将会生成新的。ExtJS 的代码实现非常有趣，我在 ExtJS 2.2 版本中初次见到这个方法时，就觉得它是个不错的 JS 技巧，直到现在ExtJS 还在使用它，来欣赏一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">getId: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id || (<span class=\"keyword\">this</span>.id = <span class=\"string\">'ext-comp-'</span> + (<span class=\"keyword\">this</span>.getAutoId()));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>插句题外话。我建议应用中除了公共的、使用频率极高的组件，尽量不要明确指定 id ，毕竟 id 最终会被用来生成 html 标签的 id 属性。此时重复的 id 将导致不可预知的后果。如果你希望在某组件中快速地找到子组件，使用 <code>itemId</code> ！</p>\n<h3 id=\"4-实例化插件\"><a href=\"#4-实例化插件\" class=\"headerlink\" title=\"4. 实例化插件\"></a>4. 实例化插件</h3><p>插件的实例化过程是早于 <code>initComponet</code> 的，以便于像 gridpanel 的 <code>editing</code> 这类插件提前处理 editor 等。</p>\n<h3 id=\"5-initComponent\"><a href=\"#5-initComponent\" class=\"headerlink\" title=\"5. initComponent\"></a>5. initComponent</h3><p>使用过 ExtJS 的人都知道这个方法。<code>initComponent</code> 方法的设计动机是给子类一个切入点，使其可以友好地参与父类的初始化过程。在方法中你可以：注册子类特有的事件，创建对 store 的引用，创建并实例化子组件等。通常你只需要覆盖并实现此方法来扩展某组件的初始化过程即可。</p>\n<h3 id=\"6-组件注册到-ComponentManager-中\"><a href=\"#6-组件注册到-ComponentManager-中\" class=\"headerlink\" title=\"6. 组件注册到 ComponentManager 中\"></a>6. 组件注册到 ComponentManager 中</h3><p>此步会将组件注册到 ComponentManager 中，它是 ExtJS 的组件管理器，当你调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.getCmp(<span class=\"string\">'foo'</span>);</div></pre></td></tr></table></figure>\n<p>时，实际上正是从组件管理器中找到对应组件。关于 ComponentManager 详细的介绍可以阅读API文档，唯一需要提醒你注意的是，不要使用重复 id ! 后注册的相同 id 的组件会覆盖之前的。</p>\n<h3 id=\"7-增加-observable-和-state\"><a href=\"#7-增加-observable-和-state\" class=\"headerlink\" title=\"7. 增加 observable 和 state\"></a>7. 增加 observable 和 state</h3><p><code>observable</code> 为组件提供事件注册、触发及监听绑定的能力；<code>state</code> 为组件提供状态信息，如用户拖动的表格列宽、当前打开的标签页等。ExtJS 在生命周期过程中通过 mixin 的方式掺和了这两个能力，换言之，如果我们扩展的组件继承自 ExtJS 的任意一个组件，我们不需要显式地重复调用此二者，因为 ExtJS 已经为我们调用了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.mixins.observable.constructor.call(<span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"keyword\">this</span>.mixins.state.constructor.call(<span class=\"keyword\">this</span>, config);</div></pre></td></tr></table></figure>\n<h3 id=\"8-注册状态事件-resize\"><a href=\"#8-注册状态事件-resize\" class=\"headerlink\" title=\"8. 注册状态事件 resize\"></a>8. 注册状态事件 resize</h3><p>在上一步骤中注入了 state 能力，然后为组件绑定 resize 事件，以便组件随容器自动改变大小。这一步骤是 ExtJS 所有组件能够完成屏幕自适应的基础。</p>\n<h3 id=\"9-初始化插件\"><a href=\"#9-初始化插件\" class=\"headerlink\" title=\"9. 初始化插件\"></a>9. 初始化插件</h3><p>也就是调用插件的 <code>init</code> 方法。在之前的步骤中已经实例化了所需插件，此步骤调用并执行插件。</p>\n<h3 id=\"10-处理-ComponentLoader\"><a href=\"#10-处理-ComponentLoader\" class=\"headerlink\" title=\"10. 处理 ComponentLoader\"></a>10. 处理 ComponentLoader</h3><p><code>ComponentLoader</code> 提供了一种可能：通过Ajax传回的内容构造组件。详细使用参考API文档。</p>\n<h3 id=\"11-进入渲染阶段\"><a href=\"#11-进入渲染阶段\" class=\"headerlink\" title=\"11. 进入渲染阶段\"></a>11. 进入渲染阶段</h3><p>如果指定了 <code>renderTo</code> 属性，则继续渲染组件，否则等待用户调用渲染方法，或通过父容器调用渲染方法。<br>如果是 “非容器内” 组件且配置了 <code>autoshow</code> 属性，则 <code>show</code> 组件。</p>\n<h2 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h2><p>组件成功初始化后就具备了渲染条件，渲染是组件实际绘制到浏览器上并展示给用户的过程。此阶段通常最慢，如果组件极复杂，渲染过程会消耗大量的CPU。我们前面提到过，如果你在创建组件时就指定了 <code>renderTo</code> 属性，组件会在初始化后直接开始渲染，当然你也可以通过调用 <code>render</code> 方法手动开启渲染过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myCmp.render(<span class=\"string\">'myDivId'</span>);</div></pre></td></tr></table></figure>\n<p><code>render</code> 方法会将你的组件渲染到指定的 DOM 元素上。也许你会有疑问：“我的整个 ExtJS 项目中，根本没有出现过 renderTo 或 render 字样，可是页面不依然正常渲染了吗？”。很好，这至少说明你正在使用并认真观察过 ExtJS 的样子。你需要知道的更多：首先，ExtJS 的某些特定组件并不需要指定 <code>renderTo</code> 也很清楚自己往哪里渲染。例如 <code>viewport</code> 组件，它总是会渲染到 document body 上；另外，如果你把某组件放到另一个父容器组件中，父容器组件内部会根据当前布局情况自动调用<br><code>render</code> 方法。</p>\n<p>知道了这些，让我们来看看渲染阶段的具体步骤：</p>\n<h3 id=\"1-触发-beforerender\"><a href=\"#1-触发-beforerender\" class=\"headerlink\" title=\"1. 触发 beforerender\"></a>1. 触发 beforerender</h3><p>首先触发 <code>beforerender</code> 事件。如果任一绑定到组件的 <code>beforerender</code> 事件函数中返回了 <code>false</code>，都将会阻止渲染过程的继续进行。如果你想在组件 <strong>初始化</strong> 之后 <strong>渲染</strong>之前做一些特定处理，绑定 <code>beforerender</code> 是个不错的选择。</p>\n<p>必须在组件渲染之前就绑定 <code>beforerender</code> 事件，渲染之后绑定的该事件无效(除非重新渲染或重复渲染)。这个道理很容易懂，不需要我多解释。然而很奇怪的是，我在实际项目中屡屡发现有些朋友犯这类错误。我想主要原因可能是当组件众多且关系稍有复杂时，他们便搞不清各组件正处于生命周期中的哪个阶段了。此类问题我无法给你一个万能的解决方案，但有一点可以确信：搞清楚 ExtJS 的组件生命周期，不断地独立调试，此类问题会越来越少。</p>\n<h3 id=\"2-缓存\"><a href=\"#2-缓存\" class=\"headerlink\" title=\"2. 缓存\"></a>2. 缓存</h3><p>之后会用 <code>Ext.Element</code> 包裹 DOM 元素，并做一些缓存工作。缓存过程中也会进行预渲染，如果你有兴趣可以去研究 <code>ProtoElement</code> 对象(注意它在 ExtJS 4.2 中是私有的)，否则你只需要知道：ExtJS 为 DOM 元素做了缓存。</p>\n<h3 id=\"3-处理浮动\"><a href=\"#3-处理浮动\" class=\"headerlink\" title=\"3. 处理浮动\"></a>3. 处理浮动</h3><p>设置了 <code>floating</code> 的组件会被 <code>WindowManager</code> 管理，它需要处理 <code>z-index</code> 及焦点问题。当使用 <code>Window</code> 和 <code>Menu</code> 时，建议多关注一下此步骤。</p>\n<h3 id=\"4-设置容器\"><a href=\"#4-设置容器\" class=\"headerlink\" title=\"4. 设置容器\"></a>4. 设置容器</h3><p>容器有两种：一种是普通的 div，例如你通过 <code>renderTo</code> 指定了 DOM 元素，ExtJS 会在其下创建一个 div 并用 <code>Ext.dom.Element</code> 包裹，再将它作为当前组件的容器；另一种是已有的组件，此时该组件会成为当前组件的父组件。</p>\n<p>容器为 ExtJS 的组件提供了依存环境，通俗地讲，设置容器的过程解决了这样一个问题：构成当前组件低层的这么一大堆 HTML ，最终要被插入到页面上的哪个 HTML 下呢？</p>\n<h3 id=\"5-onRender\"><a href=\"#5-onRender\" class=\"headerlink\" title=\"5. onRender\"></a>5. onRender</h3><p>执行 <code>onRender</code> 方法。该方法之于渲染的重要性，如 initComponent 之于初始化。它是子类扩展渲染过程的切入点，通常子类中应该先调用父类的 onRender 方法，以便保证所有的核心 DOM 结构已经处理完毕。</p>\n<h3 id=\"6-设置-hideMode-和-overCls\"><a href=\"#6-设置-hideMode-和-overCls\" class=\"headerlink\" title=\"6. 设置 hideMode 和 overCls\"></a>6. 设置 hideMode 和 overCls</h3><p>要了解 <code>hideMode</code> 你需要阅读API文档并学习相关 CSS 知识；<code>overCls</code> 用来为鼠标划过时增加额外的样式。</p>\n<h3 id=\"7-触发-render\"><a href=\"#7-触发-render\" class=\"headerlink\" title=\"7. 触发 render\"></a>7. 触发 render</h3><p>触发 render 事件。此时所有的组件使用的 HTML 元素已被注入到 DOM 中，所有的样式也正确应用并处理。在 render 事件中操作组件自身的 DOM 是安全的，不过你需要清楚地知道，此时并非组件在页面中展示的最终形态，接下来要讲的后续操作有可能改变组件的结构、样式等。</p>\n<h3 id=\"8-afterRender\"><a href=\"#8-afterRender\" class=\"headerlink\" title=\"8. afterRender\"></a>8. afterRender</h3><p><code>afterRender</code> 是又一个实用的模板方法。渲染过程中调用此方法的主要目的是，完成一些渲染的收尾工作。这一阶段可以处理组件的大小(width/height)、组件对齐或增加 HTML style 等。如果需要，还会处理 resize , 处理滚动问题，以及拖拽等。子类中同样不要忘记调用父类的 afterRender 方法。</p>\n<h3 id=\"9-触发-afterrender\"><a href=\"#9-触发-afterrender\" class=\"headerlink\" title=\"9. 触发 afterrender\"></a>9. 触发 afterrender</h3><p><code>afterrender</code> 事件被触发时，你可以放心地操作 DOM 了。此时组件已经接近最终形态，除了是否显示。</p>\n<h3 id=\"10-设置-hidden\"><a href=\"#10-设置-hidden\" class=\"headerlink\" title=\"10. 设置 hidden\"></a>10. 设置 hidden</h3><p>如果组件被设定为 <code>hidden</code> ，将其对应的 HTML 元素隐藏起来。</p>\n<h2 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h2><p>死亡对于我们来说是人生中的一件大事，对于组件亦然，销毁过程自然是指为组件处理后事。这些后事包括：从 DOM 树中将其移除；从 <code>ComponentManager</code> 中将其注销；销毁所有绑定到组件的事件等。</p>\n<p>通过调用 <code>destroy</code> 方法即可销毁组件。当然多数时候你并不需要手动写代码调用它，组件的父容器在销毁时会递归调用子组件的 destroy 方法。另外，像 window 等组件的 <code>close</code> 方法中，也会视配置情况自动调用 destroy 方法。</p>\n<p>当你开发自己的组件时，合理地销毁组件是很重要的。例如，如果我们在组件渲染时绑定了自定义的事件，而此事件没有被及时销毁，当再次渲染组件时，事件会被重复绑定至底层的 DOM。有时，这类程序缺陷并非那么容易被发现，因为相同的代码反复执行多次并不一定会产生副作用，它只是在渐渐地拖慢你的应用而已。而当用户刷新浏览器时，世界又再次变得美好。</p>\n<p>但如果不是简单的绑定事件呢？如果你那存在缺陷的代码会去反复创建另一个复杂的组件呢？如果你多次执行的是非幂等操作呢？所以请我们尊重每一个组件，让它们能够善始善终。</p>\n<p>来了解一下销毁过程：</p>\n<h3 id=\"1-触发-beforedestroy\"><a href=\"#1-触发-beforedestroy\" class=\"headerlink\" title=\"1. 触发 beforedestroy\"></a>1. 触发 beforedestroy</h3><p>和许多事件一样，如果任一绑定到组件的 <code>beforedestroy</code> 事件函数中返回了 <code>false</code>，都将会阻止销毁过程的继续进行。</p>\n<h3 id=\"2-beforeDestroy\"><a href=\"#2-beforeDestroy\" class=\"headerlink\" title=\"2. beforeDestroy\"></a>2. beforeDestroy</h3><p>调用 <code>beforeDestroy</code> 模板方法。它和前面介绍的模板方法类似，在销毁前调用。</p>\n<h3 id=\"3-注销浮动\"><a href=\"#3-注销浮动\" class=\"headerlink\" title=\"3. 注销浮动\"></a>3. 注销浮动</h3><p>如果组件设置了 <code>floating</code> ，这一步骤会从 <code>ZIndexManager</code> 中将浮动组件注销。</p>\n<h3 id=\"4-从父容器中删除\"><a href=\"#4-从父容器中删除\" class=\"headerlink\" title=\"4. 从父容器中删除\"></a>4. 从父容器中删除</h3><p>接下来调用父容器的 <code>remove</code> 方法，从父容器中删除组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.ownerCt.remove(<span class=\"keyword\">this</span>, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"5-onDestroy\"><a href=\"#5-onDestroy\" class=\"headerlink\" title=\"5. onDestroy\"></a>5. onDestroy</h3><p><code>onDestroy</code> 是实际销毁组件的方法，它也是一个模板方法。在 ExtJS 的组件中，此步骤会解除 <code>resize</code> 事件的绑定、销毁与当前组件关联的浮动组件(如 <code>loadMask</code>)，它还会删除绑定到组件上的延迟任务等。如果你自定义并扩展了 ExtJS 的组件，不要忘记在此步骤中回收一切应该回收的资源，让它们连同你的组件一起被销毁。</p>\n<h3 id=\"6-销毁插件\"><a href=\"#6-销毁插件\" class=\"headerlink\" title=\"6. 销毁插件\"></a>6. 销毁插件</h3><p>销毁插件的过程即是依次调用各插件的 <code>destroy</code> 方法的过程。所以，当你编写插件时，不要忘记为其编写 <code>destroy</code> 方法。</p>\n<h3 id=\"7-解除-HTML-事件绑定并销毁元素\"><a href=\"#7-解除-HTML-事件绑定并销毁元素\" class=\"headerlink\" title=\"7. 解除 HTML 事件绑定并销毁元素\"></a>7. 解除 HTML 事件绑定并销毁元素</h3><p>如果组件已经被渲染，则将其对应的 HTML 元素中绑定的事件解除，并销毁元素。如果组件初始化后没有渲染(如 <code>store</code>，通常不需要渲染)，则什么也不做。</p>\n<p>需要指出的是，此步骤解除的是绑定到底层 HTML 元素上的事件，而非绑定到 ExtJS 组件上的事件。一般情况下，绑定到组件的事件会被框架内部继续绑定至 HTML 元素，你不需要手动为 HTML 绑定事件。此类事件(如 <code>click</code>)需要用户通过浏览器实际发生交互才会触发。还有一种事件是 ExtJS 组件特有的，例如 <code>render</code> 事件，它只在 ExtJS 组件生命周期过程中触发，不会被绑定到 HTML 元素上。经过 ExtJS 的精心封装，这两类事件在代码层面来看并没有什么区别，但我希望你还是能正确区分它们。</p>\n<h3 id=\"8-触发-destroy\"><a href=\"#8-触发-destroy\" class=\"headerlink\" title=\"8. 触发 destroy\"></a>8. 触发 destroy</h3><p>触发 <code>destroy</code> 事件。请注意这个事件触发的时机，在它之前我们已经销毁的 DOM 元素，因此，你不能在 <code>destroy</code> 事件中操作 DOM 树。</p>\n<h3 id=\"9-从-ComponentManager-中注销组件\"><a href=\"#9-从-ComponentManager-中注销组件\" class=\"headerlink\" title=\"9. 从 ComponentManager 中注销组件\"></a>9. 从 ComponentManager 中注销组件</h3><p>我们在初始化阶段，将组件注册到 ComponentManager 中，就像为每个组件办理身份证并备案.现在，我们理应为其销户，将组件从 ComponentManager 中注销。</p>\n<p>有趣的是，ComponentManager 的管理方式和我们现实生活中很像。注销组件仅仅代表组件不受 ComponentManager 管理，你不再能通过 <code>Ext.getCmp()</code> 得到它，然而并不代表组件真正被销毁。就像你去注销身份证，并不代表本人已经死亡。当然对于组件，尤其是 ExtJS 提供的现有组件，从 ComponentManager 中注销前应该会被销毁。</p>\n<h3 id=\"10-解除事件绑定\"><a href=\"#10-解除事件绑定\" class=\"headerlink\" title=\"10. 解除事件绑定\"></a>10. 解除事件绑定</h3><p>此步骤解除的是 ExtJS 组件的事件。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>如果你有兴趣研究得更深入些，<strong>模板方法模式</strong> 是你必须理解的设计模式。模板方法模式大致的思路是，定义一个操作中的代码骨架，将一些具体的步骤延迟到子类中实现，使得子类可以不改变代码结构即可改写或扩展某些特定步骤。它非常适合生命周期过程的控制。</p>\n<p>这里给出 Java 实现模板方法模式的代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onRender</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">afterRender</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">render</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        onRender();</div><div class=\"line\">        afterRender()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onRender</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterRender</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ExtJS 使用此设计模式实现生命周期过程的控制，它提供了足够多的模板方法供子类扩展。例如我们之前讲到的 <code>initComponent</code>、<code>onRender</code>、<code>afterRender</code> 和 <code>onDestroy</code> 等，它们均是在父类中提供骨干实现甚至空实现，然后在子类中不断地扩展。如果你打算研究 ExtJS 的源码，一定要先掌握该设计模式。</p>\n<h2 id=\"模板方法-OR-事件？\"><a href=\"#模板方法-OR-事件？\" class=\"headerlink\" title=\"模板方法 OR 事件？\"></a>模板方法 OR 事件？</h2><p>有一个问题，我想用过一段时间 ExtJS 并思考过的人一定疑惑过：当我们扩展一个组件时，究竟是覆盖实现自己的模板方法，还是为其绑定事件呢？例如我们想在组件销毁前做些自己的操作，是实现 <code>beforeDestroy</code> 方法还是绑定 <code>beforedestroy</code> 事件来处理呢？</p>\n<p>ExtJS 提供了相当丰富的API，丰富到让人觉得混乱。从代码功能上讲，两者几乎是一样的，你可以随你的喜好来决定。而从设计上讲，两者确实有些区别。我不敢说“什么情况下用哪种方式一定最好”，毕竟同一项目中，一致的设计、一致的代码风格会更加重要，你应该优先遵从项目要求。ExtJS 官方也并没给出解释，我只是谈谈我的体会。</p>\n<p>我觉得，当你继承某组件来自定义一个组件时，应该优先使用模板方法来扩展功能。在你的组件内部，尽可能地不要绑定事件。事件机制应该提供更大范围的解耦，而组件之间的继承关系，相对来说耦合度要高许多。当你定义好组件，并在其它场合使用它时，使用事件可能更好。通过在 controller 中绑定事件，将两个或多个组件之间的调用关系分离，各组件只关注自己的行为能力，只需要关心自己能做什么即可，而不用在意有哪些其它组件会调用它。如果用事件的方式代替模板方法，常常会造成组件自己声明事件，自己触发事件，又自己绑定事件的尴尬情况。这有点像你单身一人住，做好早饭时吆喝了一声：“早饭做好了！”，然后一个人默默地坐下来吃饭。省省吧，别吆喝了直接吃！</p>\n<p>基于以上思路，我认为下面的代码并不理想：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'MyPanel'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">initComponent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.on(<span class=\"string\">'beforedestroy'</span>, <span class=\"keyword\">this</span>.myBeforeDestroy);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    </div><div class=\"line\">    ...</div><div class=\"line\">    </div><div class=\"line\">    myBeforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>现在你知道了 ExtJS 组件的全部生命周期过程，你也知道了如何用模板方法或绑定事件的方式扩展它，选一个你喜欢的组件，把它提供的全部模板方法、全部事件(ExtJS 的每个组件都有自己的新扩展，并不局限于本文章介绍的基础过程)都扩展一下，哪怕只 <code>console.log</code> 一下，来看看它是怎么执行的吧！</p>\n"},{"title":"ExtJS 核心概念 - 类系统","url":"http://zhangqiang.work/posts/626201506/","content":"<p><em>[本内容只针对 ExtJS 4.x 和 ExtJS 5.x 版本]</em></p>\n<p>JavaScript 是一门富有表现力的编程语言，它既可以进行面向对象编程(OOP)，也可以进行函数式编程(FP)。函数是 JavaScript 的一等公民。面向对象编程风格相对要简单一些，这也是 ExtJS 的选择。</p>\n<h2 id=\"传统方式\"><a href=\"#传统方式\" class=\"headerlink\" title=\"传统方式\"></a>传统方式</h2><p>我们先来看一下传统的使用 JavaScript 实现 OOP 的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Programmer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lang = <span class=\"string\">'java'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">''</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Programmer.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">isProgrammer</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">setName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">program</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' codes in '</span> + <span class=\"keyword\">this</span>.lang + <span class=\"string\">'.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我们借用函数对象模拟出“类“的概念，并创建了 <code>Programmer</code> 类。同时，给此类增加了两个属性： <code>name</code> 和 <code>lang</code> 。紧接着，我们在 Programmer 的原型对象上增加了 <code>isProgrammer</code> 属性和 <code>setName</code> 、<code>program</code> 方法(函数对象的属性与原型对象的属性是有区别的，但不在本教程的讨论范围)。</p>\n<p>现在来看看如何创建 <code>Programmer</code> 的实例并调用其方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> zhangsan = <span class=\"keyword\">new</span> Programmer();</div><div class=\"line\">zhangsan.setName(<span class=\"string\">'ZhangSan'</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (zhangsan.isProgrammer) &#123;</div><div class=\"line\">    zhangsan.program();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台将打印出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZhangSan codes <span class=\"keyword\">in</span> java.</div></pre></td></tr></table></figure>\n<p>这看上去并不难。那么如果我们想模拟出“子类”及“继承”的概念呢？我想先给你看一下它的代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Geek = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Geek.superclass.constructor.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.niubility = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">Geek.prototype = <span class=\"keyword\">new</span> Programmer();</div><div class=\"line\">Geek.superclass = Programmer.prototype;</div><div class=\"line\"></div><div class=\"line\">Geek.prototype.superSkill = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'kill himself.'</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我们实现了 <code>Programmer</code> 的子类 <code>Geek</code> 并为其扩展了 <code>niubility</code> 属性和 <code>superSkill</code> 方法。这里将 <code>Geek</code> 的原型指向 <code>Programmer</code> 的一个实例，以此来获得 <code>Programmer</code> 上的所有属性及方法。除此之外，我们还将 <code>Geek</code> 的 <code>superclass</code> 指向 <code>Programmer.prototype</code> ，这么一来便可以通过 <code>superclass</code> 引用调用并继承父类方法。</p>\n<p>如果上面的代码对你来说并不容易理解，那么你可能需要补充一下 JavaScript 的基础知识。虽然 ExtJS 为我们隐藏了诸多实现细节，但若想有所提高并了解 ExtJS 的工作原理，准确理解以上代码是极为必要的。更多 JavaScript 面向对象编程的知识，我推荐你阅读<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript\" target=\"_blank\" rel=\"external\">MDN相关文档</a> 。</p>\n<p>接下来构造一个 <code>Geek</code> 实例并调用其方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lisi = <span class=\"keyword\">new</span> Geek();</div><div class=\"line\">lisi.setName(<span class=\"string\">'LiSi'</span>);</div><div class=\"line\">lisi.lang = <span class=\"string\">'JavaScript'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (lisi.isProgrammer &amp;&amp; lisi.niubility) &#123;</div><div class=\"line\">    lisi.program();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(lisi.name + <span class=\"string\">' can '</span> + lisi.superSkill());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台将打印出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LiSi codes <span class=\"keyword\">in</span> JavaScript.</div><div class=\"line\">LiSi can <span class=\"built_in\">kill</span> himself.</div></pre></td></tr></table></figure>\n<h2 id=\"ExtJS的方式\"><a href=\"#ExtJS的方式\" class=\"headerlink\" title=\"ExtJS的方式\"></a>ExtJS的方式</h2><p>从上一小节可以看出，传统的面向对象编程方式稍有些复杂，而且代码较为分散，继承关系也不直观。ExtJS 为了克服此问题，在 4.0+ 版本中引入了全新的类系统。让我们先来看看如何用 ExtJS 的方式实现上一节的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Programmer'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">isProgrammer</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lang = <span class=\"string\">'java'</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">setName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">program</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' codes in '</span> + <span class=\"keyword\">this</span>.lang + <span class=\"string\">'.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> zhangsan = Ext.create(<span class=\"string\">'Programmer'</span>);</div><div class=\"line\">zhangsan.setName(<span class=\"string\">'ZhangSan'</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (zhangsan.isProgrammer) &#123;</div><div class=\"line\">    zhangsan.program();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现继承关系也非常简单直观，来看子类的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Geek'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">extend</span>: <span class=\"string\">'Programmer'</span>,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.callParent();</div><div class=\"line\">        <span class=\"keyword\">this</span>.niubility = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">superSkill</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'kill himself.'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> lisi = Ext.create(<span class=\"string\">'Geek'</span>);</div><div class=\"line\">lisi.setName(<span class=\"string\">'LiSi'</span>);</div><div class=\"line\">lisi.lang = <span class=\"string\">'JavaScript'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (lisi.isProgrammer &amp;&amp; lisi.niubility) &#123;</div><div class=\"line\">    lisi.program();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(lisi.name + <span class=\"string\">' can '</span> + lisi.superSkill());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看出，ExtJS 类系统的核心即为 <strong>Ext.define</strong> 函数，熟悉 Java 的开发人员可以将其理解为 ExtJS 的定义类的语法。继承关系则可以通过 extend 属性指定。从 4.0+ 版本开始，ExtJS 整个框架都基于 <code>Ext.define</code> 来构建，除了继承以外，该方法还实现了其它诸多类系统特性，让我们通过代码的方式展示一下 <code>Ext.define</code> 的用法。</p>\n<h2 id=\"Ext-define的用法\"><a href=\"#Ext-define的用法\" class=\"headerlink\" title=\"Ext.define的用法\"></a>Ext.define的用法</h2><h3 id=\"1-定义一个类\"><a href=\"#1-定义一个类\" class=\"headerlink\" title=\"1.定义一个类\"></a>1.定义一个类</h3><p>正如前面看到的，<code>Ext.define</code> 可以用来定义一个类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Programmer'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">language</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (language) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.language = language;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">language</span>: <span class=\"string\">'[default]'</span>,</div><div class=\"line\">    <span class=\"attr\">code</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">'I\\'m coding in '</span> + <span class=\"keyword\">this</span>.language + <span class=\"string\">'.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> zhangsan = <span class=\"keyword\">new</span> Programmer(<span class=\"string\">'Java'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.code()); <span class=\"comment\">// I'm coding in Java.</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"2.继承\"></a>2.继承</h3><p>还有继承：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'JavaScripter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">extend</span>: <span class=\"string\">'Programmer'</span>,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">skilled</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.skilled = skilled || <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.callParent([<span class=\"string\">'JavaScript'</span>]);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">skill</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.code() + <span class=\"string\">'I am good at '</span> + <span class=\"keyword\">this</span>.skilled + <span class=\"string\">'.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> lisi = <span class=\"keyword\">new</span> JavaScripter(<span class=\"string\">'ExtJS'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(lisi.skill()); <span class=\"comment\">// I'm coding in JavaScript.I am good at ExtJS.</span></div></pre></td></tr></table></figure>\n<p>继承使用 <code>extend</code> 属性实现，在构造器或方法中，通过 <code>this.callParent()</code> 以调用父类方法。</p>\n<h3 id=\"3-Config\"><a href=\"#3-Config\" class=\"headerlink\" title=\"3.Config\"></a>3.Config</h3><p>定义在 <code>config</code> 中的属性会自动生成 getters/setters： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Programmer'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.initConfig(config);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">config</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">language</span>: <span class=\"string\">''</span>,</div><div class=\"line\">        <span class=\"attr\">isGeek</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">hasMoney</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> zhangsan = <span class=\"keyword\">new</span> Programmer(&#123;</div><div class=\"line\">    <span class=\"attr\">language</span>: <span class=\"string\">'JavaScript'</span>,</div><div class=\"line\">    <span class=\"attr\">isGeek</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.getLanguage());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.getHasMoney());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.hasMoney);</div><div class=\"line\"><span class=\"built_in\">console</span>.dir(zhangsan);</div></pre></td></tr></table></figure>\n<p>执行结果如下： </p>\n<p><img src=\"classsystem_01.png\" alt=\"classsystem_01\"></p>\n<p>需要<em>注意</em>的是，如果不是继承自现有组件，而是自己定义新类，需要在 <code>constructor</code> 中明确调用 <code>initConfig()</code> 方法。 </p>\n<p>ExtJS 框架并没有对 <code>isXxx</code> 、<code>hasXxx</code> 方法做特殊处理，即示例中默认并<strong>不存在</strong> isGeek() 方法，可以访问 <code>isGee</code> 属性获得其值。然而，<code>isXxx</code> 属性通常更适合作为类的成员对象(属性)，不需放入config中。</p>\n<p>对于 <code>config</code> 中的属性 <code>foo</code>, 框架还会为其自动生成 <code>applyFoo()</code> 和 <code>updateFoo()</code> 方法，这两个方法分别作为 <code>setFoo()</code> 的前置和后置方法被调用，具体使用说明可参考相应API文档。 </p>\n<h3 id=\"4-Statics-和-InheritableStatics\"><a href=\"#4-Statics-和-InheritableStatics\" class=\"headerlink\" title=\"4.Statics 和 InheritableStatics\"></a>4.Statics 和 InheritableStatics</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Computer'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">statics</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">factory</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">brand</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// `this` 指向类本身</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>(brand);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">brand</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.brand = brand || <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;，</div><div class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// `this.statics()` 可以引用到当前类</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> thinkComputer = Computer.factory(<span class=\"string\">'Thinkpad'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(thinkComputer.brand); <span class=\"comment\">// Thinkpad</span></div></pre></td></tr></table></figure>\n<p>关于静态方法，你需要知道：</p>\n<ol>\n<li>在statics方法中，<code>this</code> 指向类本身;</li>\n<li>在其它成员方法中，<code>this.statics()</code> 可以引用到当前类；</li>\n<li>statics对象中的属性/方法，不会被 <code>extend</code> 或 <code>mixin</code>，如有此需求，可使用 <code>InheritableStatics</code> .</li>\n</ol>\n<h3 id=\"5-Mixins\"><a href=\"#5-Mixins\" class=\"headerlink\" title=\"5.Mixins\"></a>5.Mixins</h3><p>ExtJS 提供了掺和模式的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'CanSing'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">sing</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm on the highway to hell...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Ext.define(<span class=\"string\">'Musician'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">mixins</span>: [<span class=\"string\">'CanSing'</span>],</div><div class=\"line\">    <span class=\"attr\">eat</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Everyone is able to eat.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Musician().eat(); <span class=\"comment\">// Everyone is able to eat.</span></div><div class=\"line\"><span class=\"keyword\">new</span> Musician().sing(); <span class=\"comment\">// I'm on the highway to hell...</span></div></pre></td></tr></table></figure>\n<p>你应该通过掺和模式合理的拆分一些较大的类，将其中可共用的行为方法拆分出去。例如你在设计一个Web界面模板类，它可以保存新数据，也可以删除已有数据，另外还有可能会包含数据修改、数据导入导出、查询检索等等一系列操作。你当然可以设计一个大而全的类来实现所有功能，如果某一特殊场景中不需要“导入导出”功能则通过子类将对应功能入口“弱化”掉。这个设计很糟糕，维护这个大类会让人疯狂，尤其面对新的功能扩展时。</p>\n<p>聪明一些的办法则可以通过继承层级划分，在基类中实现“基本功能”并在子类中扩展其它功能。然而我们的例子中如何划分子类呢？它有太多可能的功能组合。你肯定已经想到，掺和模式可以解决此类问题。</p>\n<p><code>mixins</code> 背后的思想即是通过<strong>聚合</strong>而非继承的方式为某类型扩展行为能力。<br>Java 开发人员理应对此极为熟悉。使用 Golang 的开发人员可以将其理解为结构体的嵌入。</p>\n<p>下面展示一个稍复杂的例子，更多的用法希望你通过API文档自行学习：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Jqueryable'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">skill</span>: <span class=\"string\">'jQuery'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Ext.define(<span class=\"string\">'Extjsable'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">skill</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'ExtJS'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Ext.define(<span class=\"string\">'Seajsable'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">cmd</span>: <span class=\"string\">'Seajs'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Ext.define(<span class=\"string\">'JavaScripter'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">extend</span>: <span class=\"string\">'Programmer'</span>,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">skilled</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.skilled = skilled || <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.callParent([<span class=\"string\">'JavaScript'</span>]);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"attr\">mixins</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">writejQuery</span>: <span class=\"string\">'Jqueryable'</span>,</div><div class=\"line\">        <span class=\"attr\">writeExtjs</span>: <span class=\"string\">'Extjsable'</span>,</div><div class=\"line\">        <span class=\"attr\">writeSeajs</span>: <span class=\"string\">'Seajsable'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">skill</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [</div><div class=\"line\">            <span class=\"keyword\">this</span>.code(),</div><div class=\"line\">            <span class=\"string\">'I am good at '</span>,</div><div class=\"line\">            <span class=\"keyword\">this</span>.mixins.writejQuery.skill,</div><div class=\"line\">            <span class=\"string\">','</span>,</div><div class=\"line\">            <span class=\"keyword\">this</span>.mixins.writeExtjs.skill(),</div><div class=\"line\">            <span class=\"string\">','</span>,</div><div class=\"line\">            <span class=\"keyword\">this</span>.mixins.writeSeajs.cmd,</div><div class=\"line\">            <span class=\"string\">'.'</span></div><div class=\"line\">        ].join(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> lisi = <span class=\"keyword\">new</span> JavaScripter(<span class=\"string\">'ExtJS'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(lisi.skill());</div><div class=\"line\"><span class=\"comment\">// I'm coding in JavaScript.I am good at jQuery,ExtJS,Seajs.</span></div></pre></td></tr></table></figure>\n<h3 id=\"6-保留私有作用域空间\"><a href=\"#6-保留私有作用域空间\" class=\"headerlink\" title=\"6.保留私有作用域空间\"></a>6.保留私有作用域空间</h3><p>接下来要展示的代码你应该一看就明白它的用意为何，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// nested scope</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// properties</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>类似的代码结构在使用 ExtJS 之前，你已经无数次使用了。通过给 <code>Ext.define</code> 第二个参数传函数参数的方式，可以在函数中保留私有作用域空间。如果返回对象的属性中包含override等需要预处理的类，必须将上面的函数改为立即执行的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// nested scope</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">override</span>: <span class=\"string\">'Ext.Component'</span>,</div><div class=\"line\">        <span class=\"comment\">// properties</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>唯一需要再次好心叮嘱你的是，使用这种方式一定要注意保证函数造成的闭包空间中，引用到的任何变量一定要能够在合适的时机被GC处理。</p>\n<p>来看一个该用法的示例(注意函数中传入了参数)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Bar'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">statics</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">id</span>: <span class=\"number\">0</span>,</div><div class=\"line\">            <span class=\"attr\">nextId</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ++bar.id;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"comment\">// properties</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Bar.nextId()); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Bar.nextId()); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<h3 id=\"7-定义匿名类\"><a href=\"#7-定义匿名类\" class=\"headerlink\" title=\"7.定义匿名类\"></a>7.定义匿名类</h3><p>可能没太大用处，<code>Ext.define</code> 可以用来定义匿名类，将类名设为 <code>null</code> 即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = Ext.define(<span class=\"literal\">null</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'[ anonymous class ]'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Foo().name); <span class=\"comment\">// [ anonymous class ]</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-单例模式\"><a href=\"#8-单例模式\" class=\"headerlink\" title=\"8.单例模式\"></a>8.单例模式</h3><p>只需将 <code>singleton</code> 属性设置为 <code>true</code> 即可： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Logger'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">singleton</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">log</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"9-覆盖\"><a href=\"#9-覆盖\" class=\"headerlink\" title=\"9.覆盖\"></a>9.覆盖</h3><p>通过 <code>override</code> 属性可以替换掉父类的方法，也可以为其增加新方法(详细的用法请参考API文档，毕竟本教程并非为了介绍API文档而作)。值得一提的是，它有一些很实用的场景，例如，拆分巨大的类 ： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在定义巨大的类时，可以只定义一些基础属性config、statics</span></div><div class=\"line\"><span class=\"comment\">// 以及一些基础的成员方法等</span></div><div class=\"line\">Ext.define(<span class=\"string\">'MyLargeClass'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.initConfig(config);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">config</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: <span class=\"literal\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将MyLargeClass的方法分类，一部分方法放到part1中</span></div><div class=\"line\">Ext.define(<span class=\"string\">'MyLargeClass.part1'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">override</span>: <span class=\"string\">'MyLargeClass'</span>,</div><div class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.callParent(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">jump</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' jumps!'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">code</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' is coding in javascript!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 另一部分方法放到part2中</span></div><div class=\"line\">Ext.define(<span class=\"string\">'MyLargeClass.part2'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">override</span>: <span class=\"string\">'MyLargeClass'</span>,</div><div class=\"line\">    <span class=\"attr\">sing</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' sings a song!'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 一般情况下应该避免像code方法这种多次覆盖的现象</span></div><div class=\"line\">    code: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' is coding in java!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> largeClass = <span class=\"keyword\">new</span> MyLargeClass(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'ZhangSan'</span>&#125;);</div><div class=\"line\">largeClass.jump(); <span class=\"comment\">// ZhangSan jumps!</span></div><div class=\"line\">largeClass.sing(); <span class=\"comment\">// ZhangSan sings a song!</span></div><div class=\"line\">largeClass.code(); <span class=\"comment\">// ZhangSan is coding in java!</span></div></pre></td></tr></table></figure>\n<p>实际应用时，当一个类方法特别特别特别多时(巨大的类)，可以进行合理拆分。同时，结合动态类加载机制，将不同的部分part1、part2放在不同的JS源文件中，主类定义中使用 <code>requires</code> 引用所有的部分。</p>\n<p><code>Ext.define</code> 还提供了定义别名、动态加载、定义向下兼容的类名等多种功能用法，不再一一叙述。</p>\n<h2 id=\"深入一些\"><a href=\"#深入一些\" class=\"headerlink\" title=\"深入一些\"></a>深入一些</h2><p>ExtJS 类系统提供了这么多花哨的功能，怎么实现的呢？下面的内容我将带着你一步一步深入学习 ExtJS 类系统的实现过程。</p>\n<p>ExtJS 在定义类的时候，基本思路为：</p>\n<ol>\n<li>提供一个基类 <code>Ext.Base</code>，所有类继承自此，在此类中定义所有类共有的属性(function对象的属性，亦即所谓静态属性)；</li>\n<li>提供 <code>Ext.Class</code> 类，完成类定义后的前置处理；</li>\n<li>提供 <code>Ext.ClassManager</code> 单例，负责管理框架内的类。Ext.define方法的实际实现也源于此，同时实际的后置处理方法也在此实现；</li>\n<li>提供 <code>Ext.Loader</code> 单例，负责类的动态加载。同时，加载相关的前置处理方法在此实现。</li>\n</ol>\n<p>动态加载的内容将单独讲解，不在此讨论。</p>\n<p>我剥离出实现类定义的<strong>骨干代码</strong>，先来看看：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Ext = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mkCtor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constructor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.constructor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) || <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Class;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Ext.ClassManager = &#123;</div><div class=\"line\">    <span class=\"attr\">create</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ctor = mkCtor();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Class(ctor);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Ext.define = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Ext.ClassManager.create.apply(Ext.ClassManager, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.dir(Ext.define(<span class=\"string\">'Foo'</span>));</div></pre></td></tr></table></figure>\n<p>控制台将打印出：</p>\n<p><img src=\"classsystem_02.png\" alt=\"classsystem_02\"></p>\n<p>从代码中可以看出， <code>Ext.define</code> 通过调用 <code>Ext.ClassManager.create</code> 方法，实际生成的是 <code>Ext.Class</code> 的实例，即 <code>new Ext.Class(ctor);</code>。而根据 <code>new</code> 操作符的特性，当创建 Ext.Class 时实际创建的将是传入的函数对象，即执行 <code>makeCtor()</code> 后生成的 <strong>constructor</strong> 函数对象。</p>\n<p>于是可以知道，ExtJS 类系统实质上创建的都是 <code>makeCtor</code> 函数中的 <code>constructor</code> 对象，其内部只是继续调用当前(this)配置中的 constructor 属性所指向的函数，这么做的好处便是：所得到的 constructor 的原生链非常干净，没有其它多余的属性，同时便于在这一过程中为生成的对象增加属性、做预处理等。</p>\n<p>明白了以上基础代码结构，现在来加个 <code>Ext.Base</code> 类，同时我们实现一个极度简化版的 <code>addMembers</code> 方法(该方法的使用说明参见API文档)和私有属性 <code>$isClass</code> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.Base = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">Ext.Base.$isClass = <span class=\"literal\">true</span>;</div><div class=\"line\">Ext.Base.addMembers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">members</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, member;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> members) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (members.hasOwnProperty(i)) &#123;</div><div class=\"line\">            member = members[i];</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototype[i] = member;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>接下来改造一下 <code>Ext.Class</code> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name;</div><div class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> Ext.Base) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Ext.Base.hasOwnProperty(name)) &#123;</div><div class=\"line\">            Class[name] = Ext.Base[name];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> Class;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>执行代码，控制台将打印出：</p>\n<p><img src=\"classsystem_03.png\" alt=\"classsystem_03\"></p>\n<p>现在，我们的 <code>Foo</code> 类已经获取到 <code>Ext.Base</code> 中的方法了。改变打印输出代码，来用一下新方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Foo = Ext.define(<span class=\"string\">'Foo'</span>);</div><div class=\"line\">Foo.addMembers(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'foo name'</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I\\'m foo'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.dir(Foo);</div></pre></td></tr></table></figure>\n<p>可以看到结果如下，我们成功地给 <code>Foo</code> 增加了原型方法：</p>\n<p><img src=\"classsystem_04.png\" alt=\"classsystem_04\"></p>\n<p>现在把 <code>addMembers</code> 放到我们的框架代码内部调用，并增加 <code>$className</code> 属性，以此表示我们已经有能力按需要扩展所定义的类的属性，于是得到如下<strong>相对完整的代码</strong> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Ext = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mkCtor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constructor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.constructor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) || <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Ext.Base = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">Ext.Base.$isClass = <span class=\"literal\">true</span>;</div><div class=\"line\">Ext.Base.addMembers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">members</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, member;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> members) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (members.hasOwnProperty(i)) &#123;</div><div class=\"line\">            member = members[i];</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototype[i] = member;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name;</div><div class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> Ext.Base) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Ext.Base.hasOwnProperty(name)) &#123;</div><div class=\"line\">            Class[name] = Ext.Base[name];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Class.addMembers(data);  <span class=\"comment\">//  &lt;-----------</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Class;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Ext.ClassManager = &#123;</div><div class=\"line\">    <span class=\"attr\">create</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ctor = mkCtor();</div><div class=\"line\">        data &amp;&amp; (data.$className = className);  <span class=\"comment\">//  &lt;-----------</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Class(ctor, data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Ext.define = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Ext.ClassManager.create.apply(Ext.ClassManager, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.dir(Ext.define(<span class=\"string\">'Foo'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'foo name'</span>,</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I\\'m foo'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;));</div></pre></td></tr></table></figure>\n<p>结果如我们所愿：</p>\n<p><img src=\"classsystem_05.png\" alt=\"classsystem_05\"></p>\n<h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>现在我们已经有了 ExtJS 类系统基本的代码结构，并能为生成的类提供附加的属性。那么，<code>Ext.define</code> 中诸多的功能特性又是怎么实现的呢，例如 <code>extend</code> 、<code>statics</code>、<code>mixins</code> 等？答案就是：预处理器。</p>\n<p>ExtJS 的预处理器分为 <strong>前置处理器</strong> (在类构造前做一些事情)和 <strong>后置处理器</strong> (在类构造成功后正式使用前做一些事情)。前置处理器放在 <code>Ext.Class</code> 对象中，后置处理器放在 <code>Ext.ClassManager</code> 对象中。如果你熟悉 Nodejs 的 Express 框架或是 Python 的 django 框架，ExtJS 预处理器的设计理念对你来说 so easy, 来看看吧。</p>\n<p>我们先来自己实现它。预处理器至少需要三部分组成：</p>\n<ol>\n<li>盛放处理器的容器</li>\n<li>注册处理器的方法</li>\n<li>执行处理器具体处理过程的方法</li>\n</ol>\n<p>先来解决第一个问题：我们用数组 <code>[]</code> 表示容器，用形如 <code>{name: &#39;处理器名称&#39;, fn: 执行的处理方法}</code> 的对象表示一个处理器。容器就分别叫做 <code>preprocessors</code> 和 <code>postprocessors</code> 吧。之后，注册方法就对应地叫做 <code>registerPreprocessor</code> 和 <code>registerPostprocessor</code> ; 执行方法叫 <code>doPreprocessor</code> 和 <code>doPostprocessor</code> 。</p>\n<p>我说了这么多废话，你一看前置处理器的骨干代码，发现“原来如此简单”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.Class.preprocessors = [];</div><div class=\"line\">Ext.Class.registerPreprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</div><div class=\"line\">    Ext.Class.preprocessors.push(&#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: name,</div><div class=\"line\">        <span class=\"attr\">fn</span>: fn</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Ext.Class.doPreprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, len,</div><div class=\"line\">        pre = Ext.Class.preprocessors;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = pre.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        pre[i].fn.call(Ext.Class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>我们在 <code>ExtClass</code> 中加个 <code>preprocessors</code> 数组，注册方法是往数组里放处理器，执行方法则是把数组里的所有处理器取出来调用一下。就是这么简单！对应的后置处理器完全相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.ClassManager.postprocessors = [];</div><div class=\"line\">Ext.ClassManager.registerPostprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</div><div class=\"line\">    Ext.ClassManager.postprocessors.push(&#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: name,</div><div class=\"line\">        <span class=\"attr\">fn</span>: fn</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;  </div><div class=\"line\">Ext.ClassManager.doPostprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i, len,</div><div class=\"line\">        post = Ext.ClassManager.postprocessors;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = post.length; i &lt; len; ++i) &#123;</div><div class=\"line\">        post[i].fn.call(Ext.Class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>处理器有了，调用一下吧。现在改造 <code>Ext.Class</code> ，把已有的代码移到 <code>create</code> 方法中，并为其增加 <code>onCreated</code> 参数，以便回调后置处理器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data, onCreated</span>) </span>&#123;</div><div class=\"line\">    Ext.Class.create(Class, data);</div><div class=\"line\">    Ext.Class.doPreprocessor(Class, data);      <span class=\"comment\">// &lt;----------</span></div><div class=\"line\">    Class.addMembers(data);</div><div class=\"line\">    onCreated.call(Class, Class);               <span class=\"comment\">// &lt;----------</span></div><div class=\"line\">    <span class=\"keyword\">return</span> Class;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Ext.Class.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name;</div><div class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> Ext.Base) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Ext.Base.hasOwnProperty(name)) &#123;</div><div class=\"line\">            Class[name] = Ext.Base[name];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>相应地，加上后置回调函数并在其中调用后置处理器的执行方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.ClassManager.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ctor = mkCtor();</div><div class=\"line\">    data &amp;&amp; (data.$className = className);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Class(ctor, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Ext.ClassManager.doPostprocessor();   <span class=\"comment\">// &lt;----------</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>就是这么简单，快注册几个处理器试试吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.Class.registerPreprocessor(<span class=\"string\">'jump'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I can jump high!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">Ext.Class.registerPreprocessor(<span class=\"string\">'swim'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I can swim fast!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">Ext.ClassManager.registerPostprocessor(<span class=\"string\">'rest'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I have to take a break!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Ext.define(<span class=\"string\">'Qiang'</span>);</div></pre></td></tr></table></figure>\n<p>此时可以看到，当我们定义一个新类( <code>&#39;Qiang&#39;</code> )时，各预处理器被执行：</p>\n<p><img src=\"classsystem_06.png\" alt=\"classsystem_06\"></p>\n<p>其实，ExtJS 实现前置处理器和后置处理器的过程是非常复杂的，不过思路却极为简单，正如我们刚刚看到的。在我们的代码基础上，还可以增加很多辅助方法，例如，调整已注册的处理器顺序、增加更多的钩子方法、注册事件并触发等等。事实上 ExtJS 正是这么做的，它还为我们提供了很多优秀的处理器，不像我们的示例代码只是粗糙的 <code>console.log</code> ，它们非常强大，它们正是之前介绍的 <code>Ext.define</code> 诸多功能的实际实现：</p>\n<p><img src=\"classsystem_07.png\" alt=\"classsystem_07\"></p>\n<h2 id=\"就此结束了吗？\"><a href=\"#就此结束了吗？\" class=\"headerlink\" title=\"就此结束了吗？\"></a>就此结束了吗？</h2><p>还不够，我们应该只处理用户指定的处理器，如下面的调用只执行 <code>swim</code> 处理器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.define(<span class=\"string\">'Swimmer'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">swim</span>: <span class=\"string\">'very fast!'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>另外，<code>Ext.define</code> 创建出的类，只是通过字符串静态指定的类名，我们还应该把它放入全局变量中，同时为其处理好命名空间问题，以便可以直接调用它。</p>\n<p>还有一大堆需要实现的 API 方法，还有无数的细节需要处理。</p>\n<p>我对 ExtJS 系统的讲解结束了，而我希望对你仅仅是开始，希望我的分析讲解可以帮你更深入地理解 ExtJS 类系统，更便于你理解它的源码，更便于你使用、扩展它。</p>\n"},{"title":"","url":"http://zhangqiang.work/js/drawSvg.js","content":"// demo\n(function () {\n    var demoSvg = new Snap('#demo');\n\n    var lRect = demoSvg.rect(0, 0, 305, 80);\n    var rRect = demoSvg.rect(315, 0, 305, 80);\n    var mRect = demoSvg.rect(250, 10, 120, 60);\n\n    var lText = demoSvg.text(160, 40, '此处为选集部分');\n    var rText = demoSvg.text(470, 40, '此处为数据部分');\n    var mText = demoSvg.text(310, 40, '结合区域');\n\n    var rectSet = Snap.set(lRect, rRect);\n    var textSet = Snap.set(lText, rText, mText);\n\n    mRect.attr({\n        fill: '#a1d99b',\n        fillOpacity: .8,\n        stroke: '#71a76c',\n        strokeDasharray: '2,2'\n    });\n\n    rectSet.attr({\n        fill: '#EEE',\n        stroke: '#CCC',\n        strokeDasharray: '2,2'\n    });\n\n    textSet.attr({\n        textAnchor: 'middle',\n        dy: '.35em'\n    });\n}());\n\n\n// thing\n(function () {\n    var thing = new Snap('#thing');\n    var matrix = new Snap.Matrix();\n\n    var rect = thing.rect(0, 0, 53, 20, 6, 6);\n    var text = thing.text(26, 10, 'thing');\n\n    var g = thing.g(rect, text);\n\n    rect.attr({\n        fill: '#d9d9d9',\n        stroke: 'none'\n    });\n\n    text.attr({\n        textAnchor: 'middle',\n        dy: '.35em'\n    });\n    \n    matrix.translate(1, 1);\n    g.transform(matrix);\n\n}());\n\n\n// selection\n(function () {\n    var selection = new Snap('#selection');\n    var matrix = new Snap.Matrix();\n\n    var rect = selection.rect(0, 0, 53, 20, 6, 6);\n    var text = selection.text(26, 10, 'selection');\n\n    var g = selection.g(rect, text);\n\n    rect.attr({\n        fill: '#fff',\n        stroke: '#e6550d',\n        strokeWidth: 1.5\n    });\n\n    text.attr({\n        textAnchor: 'middle',\n        dy: '.35em'\n    });\n    \n    matrix.translate(1, 1);\n    g.transform(matrix);\n}());\n\n\n// array\n(function () {\n    var array = new Snap('#array');\n    var matrix = new Snap.Matrix();\n\n    var rect = array.rect(0, 0, 53, 20, 6, 6);\n    var text = array.text(26, 10, 'array');\n\n    var g = array.g(rect, text);\n\n    rect.attr({\n        fill: '#fff',\n        stroke: '#636363',\n        strokeWidth: 1.5\n    });\n\n    text.attr({\n        textAnchor: 'middle',\n        dy: '.35em'\n    });\n    \n    matrix.translate(1, 1);\n    g.transform(matrix);\n}());\n\n\n// element\n(function () {\n    var element = new Snap('#element');\n    var matrix = new Snap.Matrix();\n\n    var rect = element.rect(0, 0, 53, 20, 6, 6);\n    var text = element.text(26, 10, 'element');\n\n    var g = element.g(rect, text);\n\n    rect.attr({\n        fill: '#bdbdbd',\n        stroke: 'none'\n    });\n\n    text.attr({\n        textAnchor: 'middle',\n        dy: '.35em'\n    });\n    \n    matrix.translate(1, 1);\n    g.transform(matrix);\n}());\n\n\n// connection\n(function () {\n    var connection = new Snap('#connection');\n\n    connection.line(1, 11, 53, 11);\n    connection.attr({\n        stroke: '#969696',\n        strokeWidth: 1.5\n    });\n}());\n\n\n// demo42\n(function () {\n    var demo42 = new Snap('#demo42');\n\n    var rectArray = demo42.rect(0, -10, 35, 20, 6, 6);\n    var textArray = demo42.text(6, 0, 'array');\n    var rectDatum = demo42.rect(0, -10, 32, 20, 6, 6);\n    var textDatum = demo42.text(6, 0, '42');\n    var path = demo42.path('M35,12H100');\n\n    var gArray = demo42.g(rectArray, textArray);\n    var gDatum = demo42.g(rectDatum, textDatum);\n    var gNode = demo42.g(gArray, gDatum);\n    var gLink = demo42.g(path);\n    var gAll = demo42.g(gLink, gNode);\n\n    rectArray.attr({\n        fill: 'white',\n        stroke: '#636363',\n        strokeWidth: 1.5\n    });\n    rectDatum.attr({\n        fill: '#d9d9d9'\n    });\n\n    textArray.attr({dy: '.35em'});\n    textDatum.attr({dy: '.35em'});\n\n    path.attr({\n        stroke: '#969696',\n        strokeWidth: 1.5\n    })\n\n    gArray.transform('translate(0,12)');\n    gDatum.transform('translate(100,12)');\n    gAll.transform('translate(10,0)');\n}());\n\n\n// group1\n(function () {\n    var group = new Snap('#group1');\n\n    var sRect = group.rect(0, -10, 52, 20, 6, 6);\n    var sText = group.text(6, 0, 'selection');\n    var aRect = group.rect(0, -10, 38, 20, 6, 6);\n    var aText = group.text(6, 0, 'group');\n    var eRect = group.rect(0, -10, 34, 20, 6, 6);\n    var eText = group.text(6, 0, 'body');\n    var saPath = group.path('M52,12H100');\n    var aePath = group.path('M138,12H200');\n\n    var textSet = Snap.set(sText, aText, eText);\n    var pathSet = Snap.set(saPath, aePath);\n\n    var gSelection = group.g(sRect, sText);\n    var gArray = group.g(aRect, aText);\n    var gElement = group.g(eRect, eText);\n    var gNode = group.g(gSelection, gArray, gElement);\n    var gLink = group.g(saPath, aePath);\n    var gAll = group.g(gLink, gNode);\n\n    sRect.attr({\n        fill: '#fff',\n        stroke: '#e6550d',\n        strokeWidth: 1.5\n    });\n    aRect.attr({\n        fill: '#fff',\n        stroke: '#636363',\n        strokeWidth: 1.5\n    });\n    eRect.attr({\n        fill: '#bdbdbd'\n    });\n\n    textSet.attr({dy: '.35em'});\n\n    pathSet.attr({\n        stroke: '#969696',\n        strokeWidth: 1.5\n    })\n\n    gSelection.transform('translate(0,12)');\n    gArray.transform('translate(100,12)');\n    gElement.transform('translate(200,12)');\n    gAll.transform('translate(10,0)');\n}());\n\n\n////////////////////////////////////////////////////\n\nvar DrawHelper = {};\n\nDrawHelper.tree = function (svg, data, paths, yAll) {\n    var i, len;\n    var gLink = svg.g();\n    var gNode = svg.g();\n    var gAll = svg.g(gLink, gNode);\n\n    (function self(node, depth) {\n        var i, len, path;\n        var rect = svg.rect(0, -10, node.w || 32, 20, 6, 6);\n        var text = svg.text(6, 0, node.n);\n        var g = svg.g(rect, text);\n        var matrix = new Snap.Matrix();\n       \n        rect.attr({\n            fill: {e:'#bdbdbd'}[node.t] || '#fff',\n            stroke: {s:'#e6550d', a:'#636363'}[node.t] || 'none',\n            strokeWidth: 1.5\n        });\n\n        text.attr({dy: '.35em'});\n\n        matrix.translate(depth * 100, node.y);\n        g.addClass('nodetype-' + node.t);\n        g.transform(matrix);\n\n        gNode.addClass('node');\n        gNode.add(g);\n\n        depth++;\n\n        if (node.c) {\n            for (i = 0, len = node.c.length; i < len; ++i) {\n                self(node.c[i], depth);\n            }\n        }\n    }(data, 0));\n\n    for (i = 0, len = paths.length; i < len; ++i) {\n        if (typeof paths[i] !== 'string') {\n            path = svg.path(paths[i].d);\n            path.addClass('path-level-' + paths[i].l);\n        } else {\n            path = svg.path(paths[i]);\n        }\n        path.attr({\n            fill: 'none',\n            stroke: '#969696',\n            strokeWidth: 1.5\n        });\n        gLink.add(path);\n    }\n\n    gAll.transform('translate(10,' + (yAll || 0) + ')');\n\n    return gAll;\n};\n\n\nDrawHelper.play = function (svg, clickCallback) {\n    var matrix = new Snap.Matrix();\n    var circle = svg.circle(0, 0, 35);\n    var path = svg.path('M-22,-30l60,30l-60,30z');\n    var rect = svg.rect(0, 0, 620, 390);\n    var g = svg.g(circle, path, rect);\n\n    circle.attr({\n        fill: '#fff',\n        stroke: '#000',\n        strokeWidth: 3\n    });\n\n    rect.attr({\n        fill: 'none',\n        pointerEvents: 'all',\n        cursor: 'pointer'\n    });\n\n    matrix.translate(310, 195);\n    matrix.scale(.6);\n\n    circle.transform('translate(310,195)');\n    path.transform(matrix);\n\n    g.hover(function () {\n        path.attr({fill: '#f00'});\n    }, function () {\n        path.attr({fill: '#000'});\n    });\n\n    g.click(function () {\n        circle.attr({fill: '#f00'});\n        path.attr({fill: '#fff'});\n\n        g.animate({opacity: 0}, 200, function () {\n            g.attr({display: 'none'});\n            clickCallback.call(g, g);\n            circle.attr({fill: '#fff'});\n            path.attr({fill: '#000'});\n        });\n    });\n};\n\n////////////////////////////////////////////////////\n\n\n// group2\n(function () {\n    DrawHelper.tree(new Snap('#group2'), {\n        t: 's', n: 'selection', w: 54, y: 48, c: [{\n            t: 'a', n: 'group', w: 39, y: 48, c: [\n                {t: 'e', n: 'h2', y: 12},\n                {t: 'e', n: 'h2', y: 36},\n                {t: 'e', n: 'h2', y: 60},\n                {t: 'e', n: 'h2', y: 84}\n            ]\n        }]\n    }, [\n        'M54,48H100',\n        'M139,48C169,48 169,12 200,12',\n        'M139,48C169,48 169,36 200,36',\n        'M139,48C169,48 169,60 200,60',\n        'M139,48C169,48 169,84 200,84'\n    ]);\n}());\n\n\n// group3\n(function group3() {\n    var svg = new Snap('#group3');\n    var start, end;\n\n    DrawHelper.play(svg, function (play) {\n        end.animate({strokeOpacity: 0, fillOpacity: 0}, 200, function () {\n            end.attr({display: 'none'});\n        });\n\n        start.attr({display: '', strokeOpacity: 0, fillOpacity: 0});\n\n        start.animate({strokeOpacity: 1, fillOpacity: 1}, 800, mina.easein, function () {\n            var toFadeout = start.selectAll('.nodetype-s,.nodetype-a,path');\n            var toTranslate = start.selectAll('.nodetype-e');\n            var toTranslateRect = start.selectAll('.nodetype-e rect');\n\n            Snap.animate(1, 0, function (val) {\n                toFadeout.attr({\n                    strokeOpacity: val,\n                    fillOpacity: val\n                });\n            }, 1000, function (a) {\n                return a < .6 ? 0 : (2.5 * a - 1.5);\n            }, function () {\n                toFadeout.attr({display: 'none'});\n                toTranslateRect.attr({\n                    strokeOpacity: 1, \n                    fillOpacity: 1,\n                    fill: '#fff',\n                    stroke: '#636363'\n                });\n                toTranslate.forEach(function (item, index) {\n                    Snap.animate(\n                        [200, [12, 36, 60, 84][index], 32], \n                        [100, [-96, 0, 96, 192][index], 39],\n                        function (val) {\n                            item.transform('translate(' + val[0] + ',' + val[1] + ')');\n                            item.select('rect').attr({width: val[2]});\n                        }, 400, mina.easein);\n                });\n                setTimeout(function () {\n                    end.attr({display: ''});\n                    end.selectAll('.nodetype-a,.nodetype-s,path.path-level-0')\n                        .animate({strokeOpacity: 1, fillOpacity: 1}, 200, function () {\n                            toTranslate.attr({display: 'none'});\n                            end.selectAll('.nodetype-e').forEach(function (item, index) {\n                                var dy = item.matrix.split().dy;\n                                var y = [48, 144, 240, 336][parseInt(index/4)];\n                                setTimeout(function () {\n                                    Snap.animate([0, 100, y], [1, 200, dy], function (val) {\n                                        item.attr({strokeOpacity: val[0], fillOpacity: val[0]});\n                                        item.transform('translate(' + val[1] + ',' + val[2] + ')');\n                                    }, 250);\n                                }, index * 25);\n                            });\n                            end.selectAll('path.path-level-1').forEach(function (item, index) {\n                                var len = item.getTotalLength();\n                                item.attr({\n                                    strokeOpacity: 1, \n                                    fillOpacity: 1, \n                                    strokeDashoffset: len, \n                                    strokeDasharray: len\n                                });\n                                setTimeout(function () {\n                                    Snap.animate(len, 0, function (val) {\n                                        item.attr({strokeDashoffset: val});\n                                    }, 250);\n                                }, index * 25);\n                            });\n                        });\n                }, 420);\n                setTimeout(function () {\n                    svg.clear();\n                    group3();\n                }, 1200);\n            });\n        });\n    });\n\n    start = DrawHelper.tree(svg, {\n        t: 's', n: 'selection', w: 54, y: 48, c: [{\n            t: 'a', n: 'group', w: 39, y: 48, c: [\n                {t: 'e', n: 'tr', y: 12},\n                {t: 'e', n: 'tr', y: 36},\n                {t: 'e', n: 'tr', y: 60},\n                {t: 'e', n: 'tr', y: 84}\n            ]\n        }]\n    }, [\n        'M54,48H100',\n        'M139,48C169,48 169,12 200,12',\n        'M139,48C169,48 169,36 200,36',\n        'M139,48C169,48 169,60 200,60',\n        'M139,48C169,48 169,84 200,84'\n    ], 144);\n\n    start.attr({display: 'none'});\n\n    end = DrawHelper.tree(svg, {\n        t: 's', n: 'selection', w: 54, y: 192, c: [{\n            t: 'a', n: 'group', w: 39, y: 48, c: [\n                {t: 'e', n: 'td', y: 12},\n                {t: 'e', n: 'td', y: 36},\n                {t: 'e', n: 'td', y: 60},\n                {t: 'e', n: 'td', y: 84}\n            ]\n        }, {\n            t: 'a', n: 'group', w: 39, y: 144, c: [\n                {t: 'e', n: 'td', y: 108},\n                {t: 'e', n: 'td', y: 132},\n                {t: 'e', n: 'td', y: 156},\n                {t: 'e', n: 'td', y: 180}\n            ]\n        }, {\n            t: 'a', n: 'group', w: 39, y: 240, c: [\n                {t: 'e', n: 'td', y: 204},\n                {t: 'e', n: 'td', y: 228},\n                {t: 'e', n: 'td', y: 252},\n                {t: 'e', n: 'td', y: 276}\n            ]\n        }, {\n            t: 'a', n: 'group', w: 39, y: 336, c: [\n                {t: 'e', n: 'td', y: 300},\n                {t: 'e', n: 'td', y: 324},\n                {t: 'e', n: 'td', y: 348},\n                {t: 'e', n: 'td', y: 372}\n            ]\n        }]\n    }, [\n        {d: 'M54,192C77,192 77,48 100,48', l: 0},\n        {d: 'M54,192C77,192 77,144 100,144', l: 0},\n        {d: 'M54,192C77,192 77,240 100,240', l: 0},\n        {d: 'M54,192C77,192 77,336 100,336', l: 0},\n\n        {d: 'M139,48C169,48 169,12 200,12', l: 1},\n        {d: 'M139,48C169,48 169,36 200,36', l: 1},\n        {d: 'M139,48C169,48 169,60 200,60', l: 1},\n        {d: 'M139,48C169,48 169,84 200,84', l: 1},\n\n        {d: 'M139,144C169,144 169,108 200,108', l: 1},\n        {d: 'M139,144C169,144 169,132 200,132', l: 1},\n        {d: 'M139,144C169,144 169,156 200,156', l: 1},\n        {d: 'M139,144C169,144 169,180 200,180', l: 1},\n\n        {d: 'M139,240C169,240 169,204 200,204', l: 1},\n        {d: 'M139,240C169,240 169,228 200,228', l: 1},\n        {d: 'M139,240C169,240 169,252 200,252', l: 1},\n        {d: 'M139,240C169,240 169,276 200,276', l: 1},\n\n        {d: 'M139,336C169,336 169,300 200,300', l: 1},\n        {d: 'M139,336C169,336 169,324 200,324', l: 1},\n        {d: 'M139,336C169,336 169,348 200,348', l: 1},\n        {d: 'M139,336C169,336 169,372 200,372', l: 1}\n    ]);\n}());\n\n\n\n"},{"title":"categories","url":"http://zhangqiang.work/categories/index.html","content":""},{"title":"tags","url":"http://zhangqiang.work/tags/index.html","content":""},{"title":"","url":"http://zhangqiang.work/js/drawLib_b.js","content":"// Snap.svg 0.5.1\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-07\n\n!function(a){var b,c,d=\"0.5.0\",e=\"hasOwnProperty\",f=/[\\.\\/]/,g=/\\s*,\\s*/,h=\"*\",i=function(a,b){return a-b},j={n:{}},k=function(){for(var a=0,b=this.length;b>a;a++)if(\"undefined\"!=typeof this[a])return this[a]},l=function(){for(var a=this.length;--a;)if(\"undefined\"!=typeof this[a])return this[a]},m=Object.prototype.toString,n=String,o=Array.isArray||function(a){return a instanceof Array||\"[object Array]\"==m.call(a)};eve=function(a,d){var e,f=c,g=Array.prototype.slice.call(arguments,2),h=eve.listeners(a),j=0,m=[],n={},o=[],p=b;o.firstDefined=k,o.lastDefined=l,b=a,c=0;for(var q=0,r=h.length;r>q;q++)\"zIndex\"in h[q]&&(m.push(h[q].zIndex),h[q].zIndex<0&&(n[h[q].zindex]=h[q]));for(m.sort(i);m[j]<0;)if(e=n[m[j++]],o.push(e.apply(d,g)),c)return c=\"f,o;for(q=0;r\">q;q++)if(e=h[q],\"zIndex\"in e)if(e.zIndex==m[j]){if(o.push(e.apply(d,g)),c)break;do if(j++,e=n[m[j]],e&&o.push(e.apply(d,g)),c)break;while(e)}else n[e.zIndex]=e;else if(o.push(e.apply(d,g)),c)break;return c=f,b=p,o},eve._events=j,eve.listeners=function(a){var b,c,d,e,g,i,k,l,m=o(a)?a:a.split(f),n=j,p=[n],q=[];for(e=0,g=m.length;g>e;e++){for(l=[],i=0,k=p.length;k>i;i++)for(n=p[i].n,c=[n[m[e]],n[h]],d=2;d--;)b=c[d],b&&(l.push(b),q=q.concat(b.f||[]));p=l}return q},eve.separator=function(a){a?(a=n(a).replace(/(?=[\\.\\^\\]\\[\\-])/g,\"\\\\\"),a=\"[\"+a+\"]\",f=new RegExp(a)):f=/[\\.\\/]/},eve.on=function(a,b){if(\"function\"!=typeof b)return function(){};for(var c=o(a)?o(a[0])?a:[a]:n(a).split(g),d=0,e=c.length;e>d;d++)!function(a){for(var c,d=o(a)?a:n(a).split(f),e=j,g=0,h=d.length;h>g;g++)e=e.n,e=e.hasOwnProperty(d[g])&&e[d[g]]||(e[d[g]]={n:{}});for(e.f=e.f||[],g=0,h=e.f.length;h>g;g++)if(e.f[g]==b){c=!0;break}!c&&e.f.push(b)}(c[d]);return function(a){+a==+a&&(b.zIndex=+a)}},eve.f=function(a){var b=[].slice.call(arguments,1);return function(){eve.apply(null,[a,null].concat(b).concat([].slice.call(arguments,0)))}},eve.stop=function(){c=1},eve.nt=function(a){var c=o(b)?b.join(\".\"):b;return a?new RegExp(\"(?:\\\\.|\\\\/|^)\"+a+\"(?:\\\\.|\\\\/|$)\").test(c):c},eve.nts=function(){return o(b)?b:b.split(f)},eve.off=eve.unbind=function(a,b){if(!a)return void(eve._events=j={n:{}});var c=o(a)?o(a[0])?a:[a]:n(a).split(g);if(c.length>1)for(var d=0,i=c.length;i>d;d++)eve.off(c[d],b);else{c=o(a)?a:n(a).split(f);var k,l,m,d,i,p,q,r=[j],s=[];for(d=0,i=c.length;i>d;d++)for(p=0;p<r.length;p+=m.length-2){if(m=[p,1],k=r[p].n,c[d]!=h)k[c[d]]&&(m.push(k[c[d]]),s.unshift({n:k,name:c[d]}));else for(l=\"\" in=\"\" k)k[e](l)&&(m.push(k[l]),s.unshift({n:k,name:l}));r.splice.apply(r,m)}for(d=\"0,i=r.length;i\">d;d++)for(k=r[d];k.n;){if(b){if(k.f){for(p=0,q=k.f.length;q>p;p++)if(k.f[p]==b){k.f.splice(p,1);break}!k.f.length&&delete k.f}for(l in k.n)if(k.n[e](l)&&k.n[l].f){var t=k.n[l].f;for(p=0,q=t.length;q>p;p++)if(t[p]==b){t.splice(p,1);break}!t.length&&delete k.n[l].f}}else{delete k.f;for(l in k.n)k.n[e](l)&&k.n[l].f&&delete k.n[l].f}k=k.n}a:for(d=0,i=s.length;i>d;d++){k=s[d];for(l in k.n[k.name].f)continue a;for(l in k.n[k.name].n)continue a;delete k.n[k.name]}}},eve.once=function(a,b){var c=function(){return eve.off(a,c),b.apply(this,arguments)};return eve.on(a,c)},eve.version=d,eve.toString=function(){return\"You are running Eve \"+d},\"undefined\"!=typeof module&&module.exports?module.exports=eve:\"function\"==typeof define&&define.amd?define(\"eve\",[],function(){return eve}):a.eve=eve}(this),function(a,b){if(\"function\"==typeof define&&define.amd)define([\"eve\"],function(c){return b(a,c)});else if(\"undefined\"!=typeof exports){var c=require(\"eve\");module.exports=b(a,c)}else b(a,a.eve)}(window||this,function(a,b){var c=function(b){var c,d={},e=a.requestAnimationFrame||a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame||a.msRequestAnimationFrame||function(a){return setTimeout(a,16,(new Date).getTime()),!0},f=Array.isArray||function(a){return a instanceof Array||\"[object Array]\"==Object.prototype.toString.call(a)},g=0,h=\"M\"+(+new Date).toString(36),i=function(){return h+(g++).toString(36)},j=Date.now||function(){return+new Date},k=function(a){var b=this;if(null==a)return b.s;var c=b.s-a;b.b+=b.dur*c,b.B+=b.dur*c,b.s=a},l=function(a){var b=this;return null==a?b.spd:void(b.spd=a)},m=function(a){var b=this;return null==a?b.dur:(b.s=b.s*a/b.dur,void(b.dur=a))},n=function(){var a=this;delete d[a.id],a.update(),b(\"mina.stop.\"+a.id,a)},o=function(){var a=this;a.pdif||(delete d[a.id],a.update(),a.pdif=a.get()-a.b)},p=function(){var a=this;a.pdif&&(a.b=a.get()-a.pdif,delete a.pdif,d[a.id]=a,r())},q=function(){var a,b=this;if(f(b.start)){a=[];for(var c=0,d=b.start.length;d>c;c++)a[c]=+b.start[c]+(b.end[c]-b.start[c])*b.easing(b.s)}else a=+b.start+(b.end-b.start)*b.easing(b.s);b.set(a)},r=function(a){if(!a)return void(c||(c=e(r)));var f=0;for(var g in d)if(d.hasOwnProperty(g)){var h=d[g],i=h.get();f++,h.s=(i-h.b)/(h.dur/h.spd),h.s>=1&&(delete d[g],h.s=1,f--,function(a){setTimeout(function(){b(\"mina.finish.\"+a.id,a)})}(h)),h.update()}c=f?e(r):!1},s=function(a,b,c,e,f,g,h){var j={id:i(),start:a,end:b,b:c,s:0,dur:e-c,spd:1,get:f,set:g,easing:h||s.linear,status:k,speed:l,duration:m,stop:n,pause:o,resume:p,update:q};d[j.id]=j;var t,u=0;for(t in d)if(d.hasOwnProperty(t)&&(u++,2==u))break;return 1==u&&r(),j};return s.time=j,s.getById=function(a){return d[a]||null},s.linear=function(a){return a},s.easeout=function(a){return Math.pow(a,1.7)},s.easein=function(a){return Math.pow(a,.48)},s.easeinout=function(a){if(1==a)return 1;if(0==a)return 0;var b=.48-a/1.04,c=Math.sqrt(.1734+b*b),d=c-b,e=Math.pow(Math.abs(d),1/3)*(0>d?-1:1),f=-c-b,g=Math.pow(Math.abs(f),1/3)*(0>f?-1:1),h=e+g+.5;return 3*(1-h)*h*h+h*h*h},s.backin=function(a){if(1==a)return 1;var b=1.70158;return a*a*((b+1)*a-b)},s.backout=function(a){if(0==a)return 0;a-=1;var b=1.70158;return a*a*((b+1)*a+b)+1},s.elastic=function(a){return a==!!a?a:Math.pow(2,-10*a)*Math.sin((a-.075)*(2*Math.PI)/.3)+1},s.bounce=function(a){var b,c=7.5625,d=2.75;return 1/d>a?b=c*a*a:2/d>a?(a-=1.5/d,b=c*a*a+.75):2.5/d>a?(a-=2.25/d,b=c*a*a+.9375):(a-=2.625/d,b=c*a*a+.984375),b},a.mina=s,s}(\"undefined\"==typeof b?function(){}:b),d=function(a){function c(a,b){if(a){if(a.nodeType)return w(a);if(e(a,\"array\")&&c.set)return c.set.apply(c,a);if(a instanceof s)return a;if(null==b)try{return a=y.doc.querySelector(String(a)),w(a)}catch(d){return null}}return a=null==a?\"100%\":a,b=null==b?\"100%\":b,new v(a,b)}function d(a,b){if(b){if(\"#text\"==a&&(a=y.doc.createTextNode(b.text||b[\"#text\"]||\"\")),\"#comment\"==a&&(a=y.doc.createComment(b.text||b[\"#text\"]||\"\")),\"string\"==typeof a&&(a=d(a)),\"string\"==typeof b)return 1==a.nodeType?\"xlink:\"==b.substring(0,6)?a.getAttributeNS(T,b.substring(6)):\"xml:\"==b.substring(0,4)?a.getAttributeNS(U,b.substring(4)):a.getAttribute(b):\"text\"==b?a.nodeValue:null;if(1==a.nodeType){for(var c in b)if(b[z](c)){var e=A(b[c]);e?\"xlink:\"==c.substring(0,6)?a.setAttributeNS(T,c.substring(6),e):\"xml:\"==c.substring(0,4)?a.setAttributeNS(U,c.substring(4),e):a.setAttribute(c,e):a.removeAttribute(c)}}else\"text\"in b&&(a.nodeValue=b.text)}else a=y.doc.createElementNS(U,a);return a}function e(a,b){return b=A.prototype.toLowerCase.call(b),\"finite\"==b?isFinite(a):\"array\"==b&&(a instanceof Array||Array.isArray&&Array.isArray(a))?!0:\"null\"==b&&null===a||b==typeof a&&null!==a||\"object\"==b&&a===Object(a)||J.call(a).slice(8,-1).toLowerCase()==b}function f(a){if(\"function\"==typeof a||Object(a)!==a)return a;var b=new a.constructor;for(var c in a)a[z](c)&&(b[c]=f(a[c]));return b}function h(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return a.push(a.splice(c,1)[0])}function i(a,b,c){function d(){var e=Array.prototype.slice.call(arguments,0),f=e.join(\"␀\"),g=d.cache=d.cache||{},i=d.count=d.count||[];return g[z](f)?(h(i,f),c?c(g[f]):g[f]):(i.length>=1e3&&delete g[i.shift()],i.push(f),g[f]=a.apply(b,e),c?c(g[f]):g[f])}return d}function j(a,b,c,d,e,f){if(null==e){var g=a-c,h=b-d;return g||h?(180+180*D.atan2(-h,-g)/H+360)%360:0}return j(a,b,e,f)-j(c,d,e,f)}function k(a){return a%360*H/180}function l(a){return 180*a/H%360}function m(a){var b=[];return a=a.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g,function(a,c,d){return d=d.split(/\\s*,\\s*|\\s+/),\"rotate\"==c&&1==d.length&&d.push(0,0),\"scale\"==c&&(d.length>2?d=d.slice(0,2):2==d.length&&d.push(0,0),1==d.length&&d.push(d[0],0,0)),\"skewX\"==c?b.push([\"m\",1,0,D.tan(k(d[0])),1,0,0]):\"skewY\"==c?b.push([\"m\",1,D.tan(k(d[0])),0,1,0,0]):b.push([c.charAt(0)].concat(d)),a}),b}function n(a,b){var d=aa(a),e=new c.Matrix;if(d)for(var f=0,g=d.length;g>f;f++){var h,i,j,k,l,m=d[f],n=m.length,o=A(m[0]).toLowerCase(),p=m[0]!=o,q=p?e.invert():0;\"t\"==o&&2==n?e.translate(m[1],0):\"t\"==o&&3==n?p?(h=q.x(0,0),i=q.y(0,0),j=q.x(m[1],m[2]),k=q.y(m[1],m[2]),e.translate(j-h,k-i)):e.translate(m[1],m[2]):\"r\"==o?2==n?(l=l||b,e.rotate(m[1],l.x+l.width/2,l.y+l.height/2)):4==n&&(p?(j=q.x(m[2],m[3]),k=q.y(m[2],m[3]),e.rotate(m[1],j,k)):e.rotate(m[1],m[2],m[3])):\"s\"==o?2==n||3==n?(l=l||b,e.scale(m[1],m[n-1],l.x+l.width/2,l.y+l.height/2)):4==n?p?(j=q.x(m[2],m[3]),k=q.y(m[2],m[3]),e.scale(m[1],m[1],j,k)):e.scale(m[1],m[1],m[2],m[3]):5==n&&(p?(j=q.x(m[3],m[4]),k=q.y(m[3],m[4]),e.scale(m[1],m[2],j,k)):e.scale(m[1],m[2],m[3],m[4])):\"m\"==o&&7==n&&e.add(m[1],m[2],m[3],m[4],m[5],m[6])}return e}function o(a){var b=a.node.ownerSVGElement&&w(a.node.ownerSVGElement)||a.node.parentNode&&w(a.node.parentNode)||c.select(\"svg\")||c(0,0),d=b.select(\"defs\"),e=null==d?!1:d.node;return e||(e=u(\"defs\",b.node).node),e}function p(a){return a.node.ownerSVGElement&&w(a.node.ownerSVGElement)||c.select(\"svg\")}function q(a,b,c){function e(a){if(null==a)return I;if(a==+a)return a;d(j,{width:a});try{return j.getBBox().width}catch(b){return 0}}function f(a){if(null==a)return I;if(a==+a)return a;d(j,{height:a});try{return j.getBBox().height}catch(b){return 0}}function g(d,e){null==b?i[d]=e(a.attr(d)||0):d==b&&(i=e(null==c?a.attr(d)||0:c))}var h=p(a).node,i={},j=h.querySelector(\".svg---mgr\");switch(j||(j=d(\"rect\"),d(j,{x:-9e9,y:-9e9,width:10,height:10,\"class\":\"svg---mgr\",fill:\"none\"}),h.appendChild(j)),a.type){case\"rect\":g(\"rx\",e),g(\"ry\",f);case\"image\":g(\"width\",e),g(\"height\",f);case\"text\":g(\"x\",e),g(\"y\",f);break;case\"circle\":g(\"cx\",e),g(\"cy\",f),g(\"r\",e);break;case\"ellipse\":g(\"cx\",e),g(\"cy\",f),g(\"rx\",e),g(\"ry\",f);break;case\"line\":g(\"x1\",e),g(\"x2\",e),g(\"y1\",f),g(\"y2\",f);break;case\"marker\":g(\"refX\",e),g(\"markerWidth\",e),g(\"refY\",f),g(\"markerHeight\",f);break;case\"radialGradient\":g(\"fx\",e),g(\"fy\",f);break;case\"tspan\":g(\"dx\",e),g(\"dy\",f);break;default:g(b,e)}return h.removeChild(j),i}function r(a){e(a,\"array\")||(a=Array.prototype.slice.call(arguments,0));for(var b=0,c=0,d=this.node;this[b];)delete this[b++];for(b=0;b<a.length;b++)\"set\"==a[b].type?a[b].foreach(function(a){d.appendchild(a.node)}):d.appendchild(a[b].node);var f=\"d.childNodes;for(b=0;b<f.length;b++)this[c++]=w(f[b]);return\" this}function=\"\" s(a){if(a.snap=\"\" in=\"\" v)return=\"\" v[a.snap];var=\"\" b;try{b=\"a.ownerSVGElement}catch(c){}this.node=a,b&&(this.paper=new\" v(b)),this.type=\"a.tagName||a.nodeName;var\" d=\"this.id=S(this);if(this.anims={},this._={transform:[]},a.snap=d,V[d]=this,\"g\"==this.type&&(this.add=r),this.type\" in{g:1,mask:1,pattern:1,symbol:1})for(var=\"\" e=\"\" v.prototype)v.prototype[z](e)&&(this[e]=\"v.prototype[e])}function\" t(a){this.node=\"a}function\" u(a,b){var=\"\" c=\"d(a);b.appendChild(c);var\" e}function=\"\" v(a,b){var=\"\" c,e,f,g=\"v.prototype;if(a&&a.tagName&&\"svg\"==a.tagName.toLowerCase()){if(a.snap\" h=\"a.ownerDocument;c=new\" s(a),e=\"a.getElementsByTagName(\"desc\")[0],f=a.getElementsByTagName(\"defs\")[0],e||(e=d(\"desc\"),e.appendChild(h.createTextNode(\"Created\" with=\"\" snap\")),c.node.appendchild(e)),f||(f=\"d(\"defs\"),c.node.appendChild(f)),c.defs=f;for(var\" i=\"\" g)g[z](i)&&(c[i]=\"g[i]);c.paper=c.root=c}else\" c}function=\"\" w(a){return=\"\" a?a=\"\" instanceof=\"\" s||a=\"\" t?a:a.tagname&&\"svg\"=\"=a.tagName.toLowerCase()?new\" v(a):a.tagname&&\"object\"=\"=a.tagName.toLowerCase()&&\"image/svg+xml\"==a.type?new\" v(a.contentdocument.getelementsbytagname(\"svg\")[0]):new=\"\" s(a):a}function=\"\" x(a,b){for(var=\"\">c;c++){var e={type:a[c].type,attr:a[c].attr()},f=a[c].children();b.push(e),f.length&&x(f,e.childNodes=[])}}c.version=\"0.5.1\",c.toString=function(){return\"Snap v\"+this.version},c._={};var y={win:a.window,doc:a.window.document};c._.glob=y;var z=\"hasOwnProperty\",A=String,B=parseFloat,C=parseInt,D=Math,E=D.max,F=D.min,G=D.abs,H=(D.pow,D.PI),I=(D.round,\"\"),J=Object.prototype.toString,K=/^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,L=(c._.separator=/[,\\s]+/,/[\\s]*,[\\s]*/),M={hs:1,rg:1},N=/([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/gi,O=/([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/gi,P=/(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/gi,Q=0,R=\"S\"+(+new Date).toString(36),S=function(a){return(a&&a.type?a.type:I)+R+(Q++).toString(36)},T=\"http://www.w3.org/1999/xlink\",U=\"http://www.w3.org/2000/svg\",V={};c.url=function(a){return\"url('#\"+a+\"')\"};c._.$=d,c._.id=S,c.format=function(){var a=/\\{([^\\}]+)\\}/g,b=/(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g,c=function(a,c,d){var e=d;return c.replace(b,function(a,b,c,d,f){b=b||d,e&&(b in e&&(e=e[b]),\"function\"==typeof e&&f&&(e=e()))}),e=(null==e||e==d?a:e)+\"\"};return function(b,d){return A(b).replace(a,function(a,b){return c(a,b,d)})}}(),c._.clone=f,c._.cacher=i,c.rad=k,c.deg=l,c.sin=function(a){return D.sin(c.rad(a))},c.tan=function(a){return D.tan(c.rad(a))},c.cos=function(a){return D.cos(c.rad(a))},c.asin=function(a){return c.deg(D.asin(a))},c.acos=function(a){return c.deg(D.acos(a))},c.atan=function(a){return c.deg(D.atan(a))},c.atan2=function(a){return c.deg(D.atan2(a))},c.angle=j,c.len=function(a,b,d,e){return Math.sqrt(c.len2(a,b,d,e))},c.len2=function(a,b,c,d){return(a-c)*(a-c)+(b-d)*(b-d)},c.closestPoint=function(a,b,c){function d(a){var d=a.x-b,e=a.y-c;return d*d+e*e}for(var e,f,g,h,i=a.node,j=i.getTotalLength(),k=j/i.pathSegList.numberOfItems*.125,l=1/0,m=0;j>=m;m+=k)(h=d(g=i.getPointAtLength(m)))<l&&(e=g,f=m,l=h);for(k*=.5;k>.5;){var n,o,p,q,r,s;(p=f-k)>=0&&(r=d(n=i.getPointAtLength(p)))<l?(e=n,f=p,l=r):(q=f+k)<=j&&(s=d(o=i.getpointatlength(q)))<l?(e=o,f=q,l=s):k*=.5}return e=\"{x:e.x,y:e.y,length:f,distance:Math.sqrt(l)}},c.is=e,c.snapTo=function(a,b,c){if(c=e(c,\"finite\")?c:10,e(a,\"array\")){for(var\" d=\"a.length;d--;)if(G(a[d]-b)<=c)return\" a[d]}else{a=\"+a;var\" f=\"b%a;if(c\">f)return b-f;if(f>a-c)return b-f+a}return b},c.getRGB=i(function(a){if(!a||(a=A(a)).indexOf(\"-\")+1)return{r:-1,g:-1,b:-1,hex:\"none\",error:1,toString:Z};if(\"none\"==a)return{r:-1,g:-1,b:-1,hex:\"none\",toString:Z};if(!(M[z](a.toLowerCase().substring(0,2))||\"#\"==a.charAt())&&(a=W(a)),!a)return{r:-1,g:-1,b:-1,hex:\"none\",error:1,toString:Z};var b,d,f,g,h,i,j=a.match(K);return j?(j[2]&&(f=C(j[2].substring(5),16),d=C(j[2].substring(3,5),16),b=C(j[2].substring(1,3),16)),j[3]&&(f=C((h=j[3].charAt(3))+h,16),d=C((h=j[3].charAt(2))+h,16),b=C((h=j[3].charAt(1))+h,16)),j[4]&&(i=j[4].split(L),b=B(i[0]),\"%\"==i[0].slice(-1)&&(b*=2.55),d=B(i[1]),\"%\"==i[1].slice(-1)&&(d*=2.55),f=B(i[2]),\"%\"==i[2].slice(-1)&&(f*=2.55),\"rgba\"==j[1].toLowerCase().slice(0,4)&&(g=B(i[3])),i[3]&&\"%\"==i[3].slice(-1)&&(g/=100)),j[5]?(i=j[5].split(L),b=B(i[0]),\"%\"==i[0].slice(-1)&&(b/=100),d=B(i[1]),\"%\"==i[1].slice(-1)&&(d/=100),f=B(i[2]),\"%\"==i[2].slice(-1)&&(f/=100),(\"deg\"==i[0].slice(-3)||\"°\"==i[0].slice(-1))&&(b/=360),\"hsba\"==j[1].toLowerCase().slice(0,4)&&(g=B(i[3])),i[3]&&\"%\"==i[3].slice(-1)&&(g/=100),c.hsb2rgb(b,d,f,g)):j[6]?(i=j[6].split(L),b=B(i[0]),\"%\"==i[0].slice(-1)&&(b/=100),d=B(i[1]),\"%\"==i[1].slice(-1)&&(d/=100),f=B(i[2]),\"%\"==i[2].slice(-1)&&(f/=100),(\"deg\"==i[0].slice(-3)||\"°\"==i[0].slice(-1))&&(b/=360),\"hsla\"==j[1].toLowerCase().slice(0,4)&&(g=B(i[3])),i[3]&&\"%\"==i[3].slice(-1)&&(g/=100),c.hsl2rgb(b,d,f,g)):(b=F(D.round(b),255),d=F(D.round(d),255),f=F(D.round(f),255),g=F(E(g,0),1),j={r:b,g:d,b:f,toString:Z},j.hex=\"#\"+(16777216|f|d<<8|b<<16).tostring(16).slice(1),j.opacity=e(g,\"finite\")?g:1,j)):{r:-1,g:-1,b:-1,hex:\"none\",error:1,tostring:z}},c),c.hsb=i(function(a,b,d){return 1=\"=this.opacity||null==this.opacity?this.hex:\"rgba(\"+[this.r,this.g,this.b,this.opacity]+\")\"},$=function(a,b,d){if(null==b&&e(a,\"object\")&&\"r\"in\" c.hsb2rgb(a,b,d).hex}),c.hsl=\"i(function(a,b,d){return\" c.hsl2rgb(a,b,d).hex}),c.rgb=\"i(function(a,b,c,d){if(e(d,\"finite\")){var\" f=\"D.round;return\"rgba(\"+[f(a),f(b),f(c),+d.toFixed(2)]+\")\"}return\"#\"+(16777216|c|b<<8|a<<16).toString(16).slice(1)});var\" w=\"function(a){var\" b=\"y.doc.getElementsByTagName(\"head\")[0]||y.doc.getElementsByTagName(\"svg\")[0],c=\"rgb(255,\" 0,=\"\" 0)\";return(w=\"i(function(a){if(\"red\"==a.toLowerCase())return\" c;b.style.color=\"c,b.style.color=a;var\" d=\"y.doc.defaultView.getComputedStyle(b,I).getPropertyValue(\"color\");return\" a&&\"g\"in=\"\" a&&\"b\"in=\"\" a&&(d=\"a.b,b=a.g,a=a.r),null==b&&e(a,string)){var\">1||b>1||d>1)&&(a/=255,b/=255,d/=255),[a,b,d]},_=function(a,b,d,f){a=D.round(255*a),b=D.round(255*b),d=D.round(255*d);var g={r:a,g:b,b:d,opacity:e(f,\"finite\")?f:1,hex:c.rgb(a,b,d),toString:Z};return e(f,\"finite\")&&(g.opacity=f),g};c.color=function(a){var b;return e(a,\"object\")&&\"h\"in a&&\"s\"in a&&\"b\"in a?(b=c.hsb2rgb(a),a.r=b.r,a.g=b.g,a.b=b.b,a.opacity=1,a.hex=b.hex):e(a,\"object\")&&\"h\"in a&&\"s\"in a&&\"l\"in a?(b=c.hsl2rgb(a),a.r=b.r,a.g=b.g,a.b=b.b,a.opacity=1,a.hex=b.hex):(e(a,\"string\")&&(a=c.getRGB(a)),e(a,\"object\")&&\"r\"in a&&\"g\"in a&&\"b\"in a&&!(\"error\"in a)?(b=c.rgb2hsl(a),a.h=b.h,a.s=b.s,a.l=b.l,b=c.rgb2hsb(a),a.v=b.b):(a={hex:\"none\"},a.r=a.g=a.b=a.h=a.s=a.v=a.l=-1,a.error=1)),a.toString=Z,a},c.hsb2rgb=function(a,b,c,d){e(a,\"object\")&&\"h\"in a&&\"s\"in a&&\"b\"in a&&(c=a.b,b=a.s,d=a.o,a=a.h),a*=360;var f,g,h,i,j;return a=a%360/60,j=c*b,i=j*(1-G(a%2-1)),f=g=h=c-j,a=~~a,f+=[j,i,0,0,i,j][a],g+=[i,j,j,i,0,0][a],h+=[0,0,i,j,j,i][a],_(f,g,h,d)},c.hsl2rgb=function(a,b,c,d){e(a,\"object\")&&\"h\"in a&&\"s\"in a&&\"l\"in a&&(c=a.l,b=a.s,a=a.h),(a>1||b>1||c>1)&&(a/=360,b/=100,c/=100),a*=360;var f,g,h,i,j;return a=a%360/60,j=2*b*(.5>c?c:1-c),i=j*(1-G(a%2-1)),f=g=h=c-j/2,a=~~a,f+=[j,i,0,0,i,j][a],g+=[i,j,j,i,0,0][a],h+=[0,0,i,j,j,i][a],_(f,g,h,d)},c.rgb2hsb=function(a,b,c){c=$(a,b,c),a=c[0],b=c[1],c=c[2];var d,e,f,g;return f=E(a,b,c),g=f-F(a,b,c),d=0==g?null:f==a?(b-c)/g:f==b?(c-a)/g+2:(a-b)/g+4,d=(d+360)%6*60/360,e=0==g?0:g/f,{h:d,s:e,b:f,toString:X}},c.rgb2hsl=function(a,b,c){c=$(a,b,c),a=c[0],b=c[1],c=c[2];var d,e,f,g,h,i;return g=E(a,b,c),h=F(a,b,c),i=g-h,d=0==i?null:g==a?(b-c)/i:g==b?(c-a)/i+2:(a-b)/i+4,d=(d+360)%6*60/360,f=(g+h)/2,e=0==i?0:.5>f?i/(2*f):i/(2-2*f),{h:d,s:e,l:f,toString:Y}},c.parsePathString=function(a){if(!a)return null;var b=c.path(a);if(b.arr)return c.path.clone(b.arr);var d={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},f=[];return e(a,\"array\")&&e(a[0],\"array\")&&(f=c.path.clone(a)),f.length||A(a).replace(N,function(a,b,c){var e=[],g=b.toLowerCase();if(c.replace(P,function(a,b){b&&e.push(+b)}),\"m\"==g&&e.length>2&&(f.push([b].concat(e.splice(0,2))),g=\"l\",b=\"m\"==b?\"l\":\"L\"),\"o\"==g&&1==e.length&&f.push([b,e[0]]),\"r\"==g)f.push([b].concat(e));else for(;e.length>=d[g]&&(f.push([b].concat(e.splice(0,d[g]))),d[g]););}),f.toString=c.path.toString,b.arr=c.path.clone(f),f};var aa=c.parseTransformString=function(a){if(!a)return null;var b=[];return e(a,\"array\")&&e(a[0],\"array\")&&(b=c.path.clone(a)),b.length||A(a).replace(O,function(a,c,d){var e=[];c.toLowerCase();d.replace(P,function(a,b){b&&e.push(+b)}),b.push([c].concat(e))}),b.toString=c.path.toString,b};c._.svgTransform2string=m,c._.rgTransform=/^[a-z][\\s]*-?\\.?\\d/i,c._.transform2matrix=n,c._unit2px=q;y.doc.contains||y.doc.compareDocumentPosition?function(a,b){var c=9==a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a==d||!(!d||1!=d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)for(;b;)if(b=b.parentNode,b==a)return!0;return!1};c._.getSomeDefs=o,c._.getSomeSVG=p,c.select=function(a){return a=A(a).replace(/([^\\\\]):/g,\"$1\\\\:\"),w(y.doc.querySelector(a))},c.selectAll=function(a){for(var b=y.doc.querySelectorAll(a),d=(c.set||Array)(),e=0;e<b.length;e++)d.push(w(b[e]));return d},setinterval(function(){for(var=\"\" a=\"\" in=\"\" v)if(v[z](a)){var=\"\" b=\"V[a],c=b.node;(\"svg\"!=b.type&&!c.ownerSVGElement||\"svg\"==b.type&&(!c.parentNode||\"ownerSVGElement\"in\" c.parentnode&&!c.ownersvgelement))&&delete=\"\" v[a]}},1e4),s.prototype.attr=\"function(a,c){var\" d=\"this,f=d.node;if(!a){if(1!=f.nodeType)return{text:f.nodeValue};for(var\" g=\"f.attributes,h={},i=0,j=g.length;j\">i;i++)h[g[i].nodeName]=g[i].nodeValue;return h}if(e(a,\"string\")){if(!(arguments.length>1))return b(\"snap.util.getattr.\"+a,d).firstDefined();var k={};k[a]=c,a=k}for(var l in a)a[z](l)&&b(\"snap.util.attr.\"+l,d,a[l]);return d},c.parse=function(a){var b=y.doc.createDocumentFragment(),c=!0,d=y.doc.createElement(\"div\");if(a=A(a),a.match(/^\\s*<\\s*svg(?:\\s|>)/)||(a=\"<svg>\"+a+\"</svg>\",c=!1),d.innerHTML=a,a=d.getElementsByTagName(\"svg\")[0])if(c)b=a;else for(;a.firstChild;)b.appendChild(a.firstChild);return new t(b)},c.fragment=function(){for(var a=Array.prototype.slice.call(arguments,0),b=y.doc.createDocumentFragment(),d=0,e=a.length;e>d;d++){var f=a[d];f.node&&f.node.nodeType&&b.appendChild(f.node),f.nodeType&&b.appendChild(f),\"string\"==typeof f&&b.appendChild(c.parse(f).node)}return new t(b)},c._.make=u,c._.wrap=w,v.prototype.el=function(a,b){var c=u(a,this.node);return b&&c.attr(b),c},s.prototype.children=function(){for(var a=[],b=this.node.childNodes,d=0,e=b.length;e>d;d++)a[d]=c(b[d]);return a},s.prototype.toJSON=function(){var a=[];return x([this],a),a[0]},b.on(\"snap.util.getattr\",function(){var a=b.nt();a=a.substring(a.lastIndexOf(\".\")+1);var c=a.replace(/[A-Z]/g,function(a){return\"-\"+a.toLowerCase()});return ba[z](c)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(c):d(this.node,a)});var ba={\"alignment-baseline\":0,\"baseline-shift\":0,clip:0,\"clip-path\":0,\"clip-rule\":0,color:0,\"color-interpolation\":0,\"color-interpolation-filters\":0,\"color-profile\":0,\"color-rendering\":0,cursor:0,direction:0,display:0,\"dominant-baseline\":0,\"enable-background\":0,fill:0,\"fill-opacity\":0,\"fill-rule\":0,filter:0,\"flood-color\":0,\"flood-opacity\":0,font:0,\"font-family\":0,\"font-size\":0,\"font-size-adjust\":0,\"font-stretch\":0,\"font-style\":0,\"font-variant\":0,\"font-weight\":0,\"glyph-orientation-horizontal\":0,\"glyph-orientation-vertical\":0,\"image-rendering\":0,kerning:0,\"letter-spacing\":0,\"lighting-color\":0,marker:0,\"marker-end\":0,\"marker-mid\":0,\"marker-start\":0,mask:0,opacity:0,overflow:0,\"pointer-events\":0,\"shape-rendering\":0,\"stop-color\":0,\"stop-opacity\":0,stroke:0,\"stroke-dasharray\":0,\"stroke-dashoffset\":0,\"stroke-linecap\":0,\"stroke-linejoin\":0,\"stroke-miterlimit\":0,\"stroke-opacity\":0,\"stroke-width\":0,\"text-anchor\":0,\"text-decoration\":0,\"text-rendering\":0,\"unicode-bidi\":0,visibility:0,\"word-spacing\":0,\"writing-mode\":0};b.on(\"snap.util.attr\",function(a){var c=b.nt(),e={};c=c.substring(c.lastIndexOf(\".\")+1),e[c]=a;var f=c.replace(/-(\\w)/gi,function(a,b){return b.toUpperCase()}),g=c.replace(/[A-Z]/g,function(a){return\"-\"+a.toLowerCase()});ba[z](g)?this.node.style[f]=null==a?I:a:d(this.node,e)}),function(a){}(v.prototype),c.ajax=function(a,c,d,f){var g=new XMLHttpRequest,h=S();if(g){if(e(c,\"function\"))f=d,d=c,c=null;else if(e(c,\"object\")){var i=[];for(var j in c)c.hasOwnProperty(j)&&i.push(encodeURIComponent(j)+\"=\"+encodeURIComponent(c[j]));c=i.join(\"&\")}return g.open(c?\"POST\":\"GET\",a,!0),c&&(g.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\"),g.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\")),d&&(b.once(\"snap.ajax.\"+h+\".0\",d),b.once(\"snap.ajax.\"+h+\".200\",d),b.once(\"snap.ajax.\"+h+\".304\",d)),g.onreadystatechange=function(){4==g.readyState&&b(\"snap.ajax.\"+h+\".\"+g.status,f,g)},4==g.readyState?g:(g.send(c),g)}},c.load=function(a,b,d){c.ajax(a,function(a){var e=c.parse(a.responseText);d?b.call(d,e):b(e)})};var ca=function(a){var b=a.getBoundingClientRect(),c=a.ownerDocument,d=c.body,e=c.documentElement,f=e.clientTop||d.clientTop||0,h=e.clientLeft||d.clientLeft||0,i=b.top+(g.win.pageYOffset||e.scrollTop||d.scrollTop)-f,j=b.left+(g.win.pageXOffset||e.scrollLeft||d.scrollLeft)-h;return{y:i,x:j}};return c.getElementByPoint=function(a,b){var c=this,d=(c.canvas,y.doc.elementFromPoint(a,b));if(y.win.opera&&\"svg\"==d.tagName){var e=ca(d),f=d.createSVGRect();f.x=a-e.x,f.y=b-e.y,f.width=f.height=1;var g=d.getIntersectionList(f,null);g.length&&(d=g[g.length-1])}return d?w(d):null},c.plugin=function(a){a(c,s,v,y,t)},y.win.Snap=c,c}(a||this);return d.plugin(function(c,d,e,f,g){function h(a,b){if(null==b){var d=!0;if(b=\"linearGradient\"==a.type||\"radialGradient\"==a.type?a.node.getAttribute(\"gradientTransform\"):\"pattern\"==a.type?a.node.getAttribute(\"patternTransform\"):a.node.getAttribute(\"transform\"),!b)return new c.Matrix;b=c._.svgTransform2string(b)}else b=c._.rgTransform.test(b)?m(b).replace(/\\.{3}|\\u2026/g,a._.transform||\"\"):c._.svgTransform2string(b),l(b,\"array\")&&(b=c.path?c.path.toString.call(b):m(b)),a._.transform=b;var e=c._.transform2matrix(b,a.getBBox(1));return d?e:void(a.matrix=e)}function i(a){function b(a,b){var d=o(a.node,b);d=d&&d.match(g),d=d&&d[2],d&&\"#\"==d.charAt()&&(d=d.substring(1),d&&(i[d]=(i[d]||[]).concat(function(d){var e={};e[b]=c.url(d),o(a.node,e)})))}function d(a){var b=o(a.node,\"xlink:href\");b&&\"#\"==b.charAt()&&(b=b.substring(1),b&&(i[b]=(i[b]||[]).concat(function(b){a.attr(\"xlink:href\",\"#\"+b)})))}for(var e,f=a.selectAll(\"*\"),g=/^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,h=[],i={},j=0,k=f.length;k>j;j++){e=f[j],b(e,\"fill\"),b(e,\"stroke\"),b(e,\"filter\"),b(e,\"mask\"),b(e,\"clip-path\"),d(e);var l=o(e.node,\"id\");l&&(o(e.node,{id:e.id}),h.push({old:l,id:e.id}))}for(j=0,k=h.length;k>j;j++){var m=i[h[j].old];if(m)for(var n=0,p=m.length;p>n;n++)m[n](h[j].id)}}function j(a){return function(){var b=a?\"<\"+this.type:\"\",c=this.node.attributes,d=this.node.childnodes;if(a)for(var e=\"0,f=c.length;f\">e;e++)b+=\" \"+c[e].name+'=\"'+c[e].value.replace(/\"/g,'\\\\\"')+'\"';if(d.length){for(a&&(b+=\">\"),e=0,f=d.length;f>e;e++)3==d[e].nodeType?b+=d[e].nodeValue:1==d[e].nodeType&&(b+=s(d[e]).toString());a&&(b+=\"\")}else a&&(b+=\"/>\");return b}}var k=d.prototype,l=c.is,m=String,n=c._unit2px,o=c._.$,p=c._.make,q=c._.getSomeDefs,r=\"hasOwnProperty\",s=c._.wrap;k.getBBox=function(a){if(\"tspan\"==this.type)return c._.box(this.node.getClientRects().item(0));if(!c.Matrix||!c.path)return this.node.getBBox();var b=this,d=new c.Matrix;if(b.removed)return c._.box();for(;\"use\"==b.type;)if(a||(d=d.add(b.transform().localMatrix.translate(b.attr(\"x\")||0,b.attr(\"y\")||0))),b.original)b=b.original;else{var e=b.attr(\"xlink:href\");b=b.original=b.node.ownerDocument.getElementById(e.substring(e.indexOf(\"#\")+1))}var f=b._,g=c.path.get[b.type]||c.path.get.deflt;try{return a?(f.bboxwt=g?c.path.getBBox(b.realPath=g(b)):c._.box(b.node.getBBox()),c._.box(f.bboxwt)):(b.realPath=g(b),b.matrix=b.transform().localMatrix,f.bbox=c.path.getBBox(c.path.map(b.realPath,d.add(b.matrix))),c._.box(f.bbox))}catch(h){return c._.box()}};var t=function(){return this.string};k.transform=function(a){var b=this._;if(null==a){for(var d,e=this,f=new c.Matrix(this.node.getCTM()),g=h(this),i=[g],j=new c.Matrix,k=g.toTransformString(),l=m(g)==m(this.matrix)?m(b.transform):k;\"svg\"!=e.type&&(e=e.parent());)i.push(h(e));for(d=i.length;d--;)j.add(i[d]);return{string:l,globalMatrix:f,totalMatrix:j,localMatrix:g,diffMatrix:f.clone().add(g.invert()),global:f.toTransformString(),total:j.toTransformString(),local:k,toString:t}}return a instanceof c.Matrix?(this.matrix=a,this._.transform=a.toTransformString()):h(this,a),this.node&&(\"linearGradient\"==this.type||\"radialGradient\"==this.type?o(this.node,{gradientTransform:this.matrix}):\"pattern\"==this.type?o(this.node,{patternTransform:this.matrix}):o(this.node,{transform:this.matrix})),this},k.parent=function(){return s(this.node.parentNode)},k.append=k.add=function(a){if(a){if(\"set\"==a.type){var b=this;return a.forEach(function(a){b.add(a)}),this}a=s(a),this.node.appendChild(a.node),a.paper=this.paper}return this},k.appendTo=function(a){return a&&(a=s(a),a.append(this)),this},k.prepend=function(a){if(a){if(\"set\"==a.type){var b,c=this;return a.forEach(function(a){b?b.after(a):c.prepend(a),b=a}),this}a=s(a);var d=a.parent();this.node.insertBefore(a.node,this.node.firstChild),this.add&&this.add(),a.paper=this.paper,this.parent()&&this.parent().add(),d&&d.add()}return this},k.prependTo=function(a){return a=s(a),a.prepend(this),this},k.before=function(a){if(\"set\"==a.type){var b=this;return a.forEach(function(a){var c=a.parent();b.node.parentNode.insertBefore(a.node,b.node),c&&c.add()}),this.parent().add(),this}a=s(a);var c=a.parent();return this.node.parentNode.insertBefore(a.node,this.node),this.parent()&&this.parent().add(),c&&c.add(),a.paper=this.paper,this},k.after=function(a){a=s(a);var b=a.parent();return this.node.nextSibling?this.node.parentNode.insertBefore(a.node,this.node.nextSibling):this.node.parentNode.appendChild(a.node),this.parent()&&this.parent().add(),b&&b.add(),a.paper=this.paper,this},k.insertBefore=function(a){a=s(a);var b=this.parent();return a.node.parentNode.insertBefore(this.node,a.node),this.paper=a.paper,b&&b.add(),a.parent()&&a.parent().add(),this},k.insertAfter=function(a){a=s(a);var b=this.parent();return a.node.parentNode.insertBefore(this.node,a.node.nextSibling),this.paper=a.paper,b&&b.add(),a.parent()&&a.parent().add(),this},k.remove=function(){var a=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,a&&a.add(),this},k.select=function(a){return s(this.node.querySelector(a))},k.selectAll=function(a){for(var b=this.node.querySelectorAll(a),d=(c.set||Array)(),e=0;e<b.length;e++)d.push(s(b[e]));return d},k.aspx=\"function(a,b){return\" null=\"=b&&(b=this.attr(a)),+n(this,a,b)},k.use=function(){var\" a,b=\"this.node.id;return\" b||(b=\"this.id,o(this.node,{id:b})),a=\"linearGradient\"==this.type||\"radialGradient\"==this.type||\"pattern\"==this.type?p(this.type,this.node.parentNode):p(\"use\",this.node.parentNode),o(a.node,{\"xlink:href\":\"#\"+b}),a.original=this,a},k.clone=function(){var\" a=\"s(this.node.cloneNode(!0));return\" o(a.node,\"id\")&&o(a.node,{id:a.id}),i(a),a.insertafter(this),a},k.todefs=\"function(){var\" a.appendchild(this.node),this},k.pattern=\"k.toPattern=function(a,b,c,d){var\" e=\"p(\"pattern\",q(this));return\" a&&(b=\"a.y,c=a.width,d=a.height,a=a.x),o(e.node,{x:a,y:b,width:c,height:d,patternUnits:\"userSpaceOnUse\",id:e.id,viewBox:[a,b,c,d].join(\"\" \")}),e.node.appendchild(this.node),e},k.marker=\"function(a,b,c,d,e,f){var\" g=\"p(\"marker\",q(this));return\" \"),markerwidth:c,markerheight:d,orient:\"auto\",refx:e||0,refy:f||0,id:g.id}),g.node.appendchild(this.node),g};var=\"\" u=\"{};k.data=function(a,d){var\" b(\"snap.data.get.\"+this.id,this,e,null),e;if(1=\"=arguments.length){if(c.is(a,\"object\")){for(var\" f=\"\" in=\"\" a)a[r](f)&&this.data(f,a[f]);return=\"\" this}return=\"\" b(\"snap.data.get.\"+this.id,this,e[a],a),e[a]}return=\"\" e[a]=\"d,b(\"snap.data.set.\"+this.id,this,d,a),this},k.removeData=function(a){return\" u[this.id][a],this},k.outersvg=\"k.toString=j(1),k.innerSVG=j(),k.toDataURL=function(){if(a&&a.btoa){var\" b=\"this.getBBox(),d=c.format('<svg\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewbox=\"{x} {y} {width} {height}\">{contents}',{x:+b.x.toFixed(3),y:+b.y.toFixed(3),width:+b.width.toFixed(3),height:+b.height.toFixed(3),\ncontents:this.outerSVG()});return\"data:image/svg+xml;base64,\"+btoa(unescape(encodeURIComponent(d)))}},g.prototype.select=k.select,g.prototype.selectAll=k.selectAll}),d.plugin(function(a,d,e,f,g){function h(a,b,c){return function(d){var e=d.slice(a,b);return 1==e.length&&(e=e[0]),c?c(e):e}}var i=d.prototype,j=a.is,k=String,l=\"hasOwnProperty\",m=function(a,b,d,e){\"function\"!=typeof d||d.length||(e=d,d=c.linear),this.attr=a,this.dur=b,d&&(this.easing=d),e&&(this.callback=e)};a._.Animation=m,a.animation=function(a,b,c,d){return new m(a,b,c,d)},i.inAnim=function(){var a=this,b=[];for(var c in a.anims)a.anims[l](c)&&!function(a){b.push({anim:new m(a._attrs,a.dur,a.easing,a._callback),mina:a,curStatus:a.status(),status:function(b){return a.status(b)},stop:function(){a.stop()}})}(a.anims[c]);return b},a.animate=function(a,d,e,f,g,h){\"function\"!=typeof g||g.length||(h=g,g=c.linear);var i=c.time(),j=c(a,d,i,i+f,c.time,e,g);return h&&b.once(\"mina.finish.\"+j.id,h),j},i.stop=function(){for(var a=this.inAnim(),b=0,c=a.length;c>b;b++)a[b].stop();return this},i.animate=function(a,d,e,f){\"function\"!=typeof e||e.length||(f=e,e=c.linear),a instanceof m&&(f=a.callback,e=a.easing,d=a.dur,a=a.attr);var g,i,n,o,p=[],q=[],r={},s=this;for(var t in a)if(a[l](t)){s.equal?(o=s.equal(t,k(a[t])),g=o.from,i=o.to,n=o.f):(g=+s.attr(t),i=+a[t]);var u=j(g,\"array\")?g.length:1;r[t]=h(p.length,p.length+u,n),p=p.concat(g),q=q.concat(i)}var v=c.time(),w=c(p,q,v,v+d,c.time,function(a){var b={};for(var c in r)r[l](c)&&(b[c]=r[c](a));s.attr(b)},e);return s.anims[w.id]=w,w._attrs=a,w._callback=f,b(\"snap.animcreated.\"+s.id,w),b.once(\"mina.finish.\"+w.id,function(){b.off(\"mina.*.\"+w.id),delete s.anims[w.id],f&&f.call(s)}),b.once(\"mina.stop.\"+w.id,function(){b.off(\"mina.*.\"+w.id),delete s.anims[w.id]}),s}}),d.plugin(function(a,b,c,d,e){function f(a,b,c,d,e,f){return null==b&&\"[object SVGMatrix]\"==g.call(a)?(this.a=a.a,this.b=a.b,this.c=a.c,this.d=a.d,this.e=a.e,void(this.f=a.f)):void(null!=a?(this.a=+a,this.b=+b,this.c=+c,this.d=+d,this.e=+e,this.f=+f):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0))}var g=Object.prototype.toString,h=String,i=Math,j=\"\";!function(b){function c(a){return a[0]*a[0]+a[1]*a[1]}function d(a){var b=i.sqrt(c(a));a[0]&&(a[0]/=b),a[1]&&(a[1]/=b)}b.add=function(a,b,c,d,e,g){if(a&&a instanceof f)return this.add(a.a,a.b,a.c,a.d,a.e,a.f);var h=a*this.a+b*this.c,i=a*this.b+b*this.d;return this.e+=e*this.a+g*this.c,this.f+=e*this.b+g*this.d,this.c=c*this.a+d*this.c,this.d=c*this.b+d*this.d,this.a=h,this.b=i,this},f.prototype.multLeft=function(a,b,c,d,e,g){if(a&&a instanceof f)return this.multLeft(a.a,a.b,a.c,a.d,a.e,a.f);var h=a*this.a+c*this.b,i=a*this.c+c*this.d,j=a*this.e+c*this.f+e;return this.b=b*this.a+d*this.b,this.d=b*this.c+d*this.d,this.f=b*this.e+d*this.f+g,this.a=h,this.c=i,this.e=j,this},b.invert=function(){var a=this,b=a.a*a.d-a.b*a.c;return new f(a.d/b,-a.b/b,-a.c/b,a.a/b,(a.c*a.f-a.d*a.e)/b,(a.b*a.e-a.a*a.f)/b)},b.clone=function(){return new f(this.a,this.b,this.c,this.d,this.e,this.f)},b.translate=function(a,b){return this.e+=a*this.a+b*this.c,this.f+=a*this.b+b*this.d,this},b.scale=function(a,b,c,d){return null==b&&(b=a),(c||d)&&this.translate(c,d),this.a*=a,this.b*=a,this.c*=b,this.d*=b,(c||d)&&this.translate(-c,-d),this},b.rotate=function(b,c,d){b=a.rad(b),c=c||0,d=d||0;var e=+i.cos(b).toFixed(9),f=+i.sin(b).toFixed(9);return this.add(e,f,-f,e,c,d),this.add(1,0,0,1,-c,-d)},b.skewX=function(a){return this.skew(a,0)},b.skewY=function(a){return this.skew(0,a)},b.skew=function(b,c){b=b||0,c=c||0,b=a.rad(b),c=a.rad(c);var d=i.tan(b).toFixed(9),e=i.tan(c).toFixed(9);return this.add(1,e,d,1,0,0)},b.x=function(a,b){return a*this.a+b*this.c+this.e},b.y=function(a,b){return a*this.b+b*this.d+this.f},b.get=function(a){return+this[h.fromCharCode(97+a)].toFixed(4)},b.toString=function(){return\"matrix(\"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+\")\"},b.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},b.determinant=function(){return this.a*this.d-this.b*this.c},b.split=function(){var b={};b.dx=this.e,b.dy=this.f;var e=[[this.a,this.b],[this.c,this.d]];b.scalex=i.sqrt(c(e[0])),d(e[0]),b.shear=e[0][0]*e[1][0]+e[0][1]*e[1][1],e[1]=[e[1][0]-e[0][0]*b.shear,e[1][1]-e[0][1]*b.shear],b.scaley=i.sqrt(c(e[1])),d(e[1]),b.shear/=b.scaley,this.determinant()<0&&(b.scalex=-b.scalex);var 0=\"\" f=\"e[0][1],g=e[1][1];return\">g?(b.rotate=a.deg(i.acos(g)),0>f&&(b.rotate=360-b.rotate)):b.rotate=a.deg(i.asin(f)),b.isSimple=!(+b.shear.toFixed(9)||b.scalex.toFixed(9)!=b.scaley.toFixed(9)&&b.rotate),b.isSuperSimple=!+b.shear.toFixed(9)&&b.scalex.toFixed(9)==b.scaley.toFixed(9)&&!b.rotate,b.noRotation=!+b.shear.toFixed(9)&&!b.rotate,b},b.toTransformString=function(a){var b=a||this.split();return+b.shear.toFixed(9)?\"m\"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(b.scalex=+b.scalex.toFixed(4),b.scaley=+b.scaley.toFixed(4),b.rotate=+b.rotate.toFixed(4),(b.dx||b.dy?\"t\"+[+b.dx.toFixed(4),+b.dy.toFixed(4)]:j)+(b.rotate?\"r\"+[+b.rotate.toFixed(4),0,0]:j)+(1!=b.scalex||1!=b.scaley?\"s\"+[b.scalex,b.scaley,0,0]:j))}}(f.prototype),a.Matrix=f,a.matrix=function(a,b,c,d,e,g){return new f(a,b,c,d,e,g)}}),d.plugin(function(a,c,d,e,f){function g(d){return function(e){if(b.stop(),e instanceof f&&1==e.node.childNodes.length&&(\"radialGradient\"==e.node.firstChild.tagName||\"linearGradient\"==e.node.firstChild.tagName||\"pattern\"==e.node.firstChild.tagName)&&(e=e.node.firstChild,n(this).appendChild(e),e=l(e)),e instanceof c)if(\"radialGradient\"==e.type||\"linearGradient\"==e.type||\"pattern\"==e.type){e.node.id||p(e.node,{id:e.id});var g=q(e.node.id)}else g=e.attr(d);else if(g=a.color(e),g.error){var h=a(n(this).ownerSVGElement).gradient(e);h?(h.node.id||p(h.node,{id:h.id}),g=q(h.node.id)):g=e}else g=r(g);var i={};i[d]=g,p(this.node,i),this.node.style[d]=t}}function h(a){b.stop(),a==+a&&(a+=\"px\"),this.node.style.fontSize=a}function i(a){for(var b=[],c=a.childNodes,d=0,e=c.length;e>d;d++){var f=c[d];3==f.nodeType&&b.push(f.nodeValue),\"tspan\"==f.tagName&&(1==f.childNodes.length&&3==f.firstChild.nodeType?b.push(f.firstChild.nodeValue):b.push(i(f)))}return b}function j(){return b.stop(),this.node.style.fontSize}var k=a._.make,l=a._.wrap,m=a.is,n=a._.getSomeDefs,o=/^url\\((['\"]?)([^)]+)\\1\\)$/,p=a._.$,q=a.url,r=String,s=a._.separator,t=\"\";a.deurl=function(a){var b=String(a).match(o);return b?b[2]:a},b.on(\"snap.util.attr.mask\",function(a){if(a instanceof c||a instanceof f){if(b.stop(),a instanceof f&&1==a.node.childNodes.length&&(a=a.node.firstChild,n(this).appendChild(a),a=l(a)),\"mask\"==a.type)var d=a;else d=k(\"mask\",n(this)),d.node.appendChild(a.node);!d.node.id&&p(d.node,{id:d.id}),p(this.node,{mask:q(d.id)})}}),function(a){b.on(\"snap.util.attr.clip\",a),b.on(\"snap.util.attr.clip-path\",a),b.on(\"snap.util.attr.clipPath\",a)}(function(a){if(a instanceof c||a instanceof f){b.stop();for(var d,e=a.node;e;){if(\"clipPath\"===e.nodeName){d=new c(e);break}if(\"svg\"===e.nodeName){d=void 0;break}e=e.parentNode}d||(d=k(\"clipPath\",n(this)),d.node.appendChild(a.node),!d.node.id&&p(d.node,{id:d.id})),p(this.node,{\"clip-path\":q(d.node.id||d.id)})}}),b.on(\"snap.util.attr.fill\",g(\"fill\")),b.on(\"snap.util.attr.stroke\",g(\"stroke\"));var u=/^([lr])(?:\\(([^)]*)\\))?(.*)$/i;b.on(\"snap.util.grad.parse\",function(a){function b(a,b){for(var c=(b-h)/(a-i),d=i;a>d;d++)f[d].offset=+(+h+c*(d-i)).toFixed(2);i=a,h=b}a=r(a);var c=a.match(u);if(!c)return null;var d=c[1],e=c[2],f=c[3];e=e.split(/\\s*,\\s*/).map(function(a){return+a==a?+a:a}),1==e.length&&0==e[0]&&(e=[]),f=f.split(\"-\"),f=f.map(function(a){a=a.split(\":\");var b={color:a[0]};return a[1]&&(b.offset=parseFloat(a[1])),b});var g=f.length,h=0,i=0;g--;for(var j=0;g>j;j++)\"offset\"in f[j]&&b(j,f[j].offset);return f[g].offset=f[g].offset||100,b(g,f[g].offset),{type:d,params:e,stops:f}}),b.on(\"snap.util.attr.d\",function(c){b.stop(),m(c,\"array\")&&m(c[0],\"array\")&&(c=a.path.toString.call(c)),c=r(c),c.match(/[ruo]/i)&&(c=a.path.toAbsolute(c)),p(this.node,{d:c})})(-1),b.on(\"snap.util.attr.#text\",function(a){b.stop(),a=r(a);for(var c=e.doc.createTextNode(a);this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(c)})(-1),b.on(\"snap.util.attr.path\",function(a){b.stop(),this.attr({d:a})})(-1),b.on(\"snap.util.attr.class\",function(a){b.stop(),this.node.className.baseVal=a})(-1),b.on(\"snap.util.attr.viewBox\",function(a){var c;c=m(a,\"object\")&&\"x\"in a?[a.x,a.y,a.width,a.height].join(\" \"):m(a,\"array\")?a.join(\" \"):a,p(this.node,{viewBox:c}),b.stop()})(-1),b.on(\"snap.util.attr.transform\",function(a){this.transform(a),b.stop()})(-1),b.on(\"snap.util.attr.r\",function(a){\"rect\"==this.type&&(b.stop(),p(this.node,{rx:a,ry:a}))})(-1),b.on(\"snap.util.attr.textpath\",function(a){if(b.stop(),\"text\"==this.type){var d,e,f;if(!a&&this.textPath){for(e=this.textPath;e.node.firstChild;)this.node.appendChild(e.node.firstChild);return e.remove(),void delete this.textPath}if(m(a,\"string\")){var g=n(this),h=l(g.parentNode).path(a);g.appendChild(h.node),d=h.id,h.attr({id:d})}else a=l(a),a instanceof c&&(d=a.attr(\"id\"),d||(d=a.id,a.attr({id:d})));if(d)if(e=this.textPath,f=this.node,e)e.attr({\"xlink:href\":\"#\"+d});else{for(e=p(\"textPath\",{\"xlink:href\":\"#\"+d});f.firstChild;)e.appendChild(f.firstChild);f.appendChild(e),this.textPath=l(e)}}})(-1),b.on(\"snap.util.attr.text\",function(a){if(\"text\"==this.type){for(var c=this.node,d=function(a){var b=p(\"tspan\");if(m(a,\"array\"))for(var c=0;c<a.length;c++)b.appendchild(d(a[c]));else 1=\"=a.length?a[0]:a}})(-1),b.on(\"snap.util.getattr.#text\",function(){return\" b.appendchild(e.doc.createtextnode(a));return=\"\" b.normalize&&b.normalize(),b};c.firstchild;)c.removechild(c.firstchild);for(var=\"\" f=\"d(a);f.firstChild;)c.appendChild(f.firstChild)}b.stop()})(-1),b.on(\"snap.util.attr.fontSize\",h)(-1),b.on(\"snap.util.attr.font-size\",h)(-1),b.on(\"snap.util.getattr.transform\",function(){return\" b.stop(),this.transform()})(-1),b.on(\"snap.util.getattr.textpath\",function(){return=\"\" b.stop(),this.textpath})(-1),function(){function=\"\" c(c){return=\"\" function(){b.stop();var=\"\" d=\"e.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue(\"marker-\"+c);return\"none\"==d?d:a(e.doc.getElementById(d.match(o)[1]))}}function\" d(a){return=\"\" function(c){b.stop();var=\"\" +a.charat(0).touppercase()+a.substring(1);if(\"\"=\"=c||!c)return\" void(this.node.style[d]=\"none\" );if(\"marker\"=\"=c.type){var\" e=\"c.node.id;return\" e||p(c.node,{id:c.id}),void(this.node.style[d]=\"q(e))}}}b.on(\"snap.util.getattr.marker-end\",c(\"end\"))(-1),b.on(\"snap.util.getattr.markerEnd\",c(\"end\"))(-1),b.on(\"snap.util.getattr.marker-start\",c(\"start\"))(-1),b.on(\"snap.util.getattr.markerStart\",c(\"start\"))(-1),b.on(\"snap.util.getattr.marker-mid\",c(\"mid\"))(-1),b.on(\"snap.util.getattr.markerMid\",c(\"mid\"))(-1),b.on(\"snap.util.attr.marker-end\",d(\"end\"))(-1),b.on(\"snap.util.attr.markerEnd\",d(\"end\"))(-1),b.on(\"snap.util.attr.marker-start\",d(\"start\"))(-1),b.on(\"snap.util.attr.markerStart\",d(\"start\"))(-1),b.on(\"snap.util.attr.marker-mid\",d(\"mid\"))(-1),b.on(\"snap.util.attr.markerMid\",d(\"mid\"))(-1)}(),b.on(\"snap.util.getattr.r\",function(){return\"rect\"==this.type&&p(this.node,\"rx\")==p(this.node,\"ry\")?(b.stop(),p(this.node,\"rx\")):void\" 0})(-1),b.on(\"snap.util.getattr.text\",function(){if(\"text\"=\"=this.type||\"tspan\"==this.type){b.stop();var\" a=\"i(this.node);return\" this.node.textcontent})(-1),b.on(\"snap.util.getattr.fill\",function(c){if(!c){b.stop();var=\"\" a(a.deurl(d))||d}})(-1),b.on(\"snap.util.getattr.stroke\",function(c){if(!c){b.stop();var=\"\" a(a.deurl(d))||d}})(-1),b.on(\"snap.util.getattr.viewbox\",function(){b.stop();var=\"\" c=\"p(this.node,\"viewBox\");return\" c?(c=\"c.split(s),a._.box(+c[0],+c[1],+c[2],+c[3])):void\" 0})(-1),b.on(\"snap.util.getattr.points\",function(){var=\"\" b.stop(),a?a.split(s):void=\"\" 0})(-1),b.on(\"snap.util.getattr.path\",function(){var=\"\" b.stop(),a})(-1),b.on(\"snap.util.getattr.class\",function(){return=\"\" this.node.classname.baseval})(-1),b.on(\"snap.util.getattr.fontsize\",j)(-1),b.on(\"snap.util.getattr.font-size\",j)(-1)}),d.plugin(function(a,b,c,d,e){var=\"\" b,c,d,e,h=\"g(a||\"\").match(f)||[],i=this.node,j=i.className.baseVal,k=j.match(f)||[];if(h.length){for(b=0;d=h[b++];)c=k.indexOf(d),~c||k.push(d);e=k.join(\"\" \"),j!=\"e&&(i.className.baseVal=e)}return\" this},h.removeclass=\"function(a){var\" this},h.hasclass=\"function(a){var\" b=\"this.node,c=b.className.baseVal,d=c.match(f)||[];return!!~d.indexOf(a)},h.toggleClass=function(a,b){if(null!=b)return\" b?this.addclass(a):this.removeclass(a);var=\"\" c,d,e,g,h=\"(a||\"\").match(f)||[],i=this.node,j=i.className.baseVal,k=j.match(f)||[];for(c=0;e=h[c++];)d=k.indexOf(e),~d?k.splice(d,1):k.push(e);return\" g=\"k.join(\"\" g(a){return=\"\" a}function=\"\" h(a){return=\"\" function(b){return+b.tofixed(3)+a}}var=\"\" i=\"{\"+\":function(a,b){return\" a+b},\"-\":function(a,b){return=\"\" a-b},\"=\"\" \":function(a,b){return=\"\" b},\"*\":function(a,b){return=\"\" a*b}},j=\"String,k=/[a-z]+$/i,l=/^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;b.on(\"snap.util.attr\",function(a){var\" h=\"c[3]||\"\",m=f.match(k),n=i[c[1]];if(m&&m==h?a=n(parseFloat(f),+c[2]):(f=this.asPX(e),a=n(this.asPX(e),this.asPX(e,c[2]+h))),isNaN(f)||isNaN(a))return;g[e]=a,this.attr(g)}})(-10),b.on(\"snap.util.equal\",function(a,c){var\" m&&m=\"=f?{from:parseFloat(d),to:n(parseFloat(d),+e[2]),f:h(m)}:(d=this.asPX(a),{from:d,to:n(d,this.asPX(a,e[2]+f)),f:g})}})(-10)}),d.plugin(function(c,d,e,f,g){var\" g;return=\"\" null=\"=f&&(f=e),i(a,\"object\")&&\"[object\" object]\"=\"=a?g=a:null!=a&&(g={x:a,y:b,width:c,height:d},null!=e&&(g.rx=e,g.ry=f)),this.el(\"rect\",g)},h.circle=function(a,b,c){var\" d;return=\"\" i(a,\"object\")&&\"[object=\"\" j=\"function(){function\" a(){this.parentnode.removechild(this)}return=\"\" function(b,c){var=\"\" a)g.attr(a);else=\"\" if(null!=\"a){var\" g},h.ellipse=\"function(a,b,c,d){var\" e;return=\"\" b;return=\"\" i(a,\"object\")&&!i(a,\"array\")?b=\"a:a&&(b={d:a}),this.el(\"path\",b)},h.group=h.g=function(a){var\" i(a,\"object\")&&null=\"=b?j=a:(null!=a&&(j.x=a),null!=b&&(j.y=b),null!=c&&(j.width=c),null!=d&&(j.height=d),null!=e&&null!=f&&null!=g&&null!=h&&(j.viewBox=[e,f,g,h])),this.el(\"svg\",j)},h.mask=function(a){var\" this.el(\"pattern\",j)},h.use=\"function(a){return\" null!=\"a?(a\" instanceof=\"\" d&&(a.attr(\"id\")||a.attr({id:c._.id(a)}),a=\"a.attr(\"id\")),\"#\"==String(a).charAt()&&(a=a.substring(1)),this.el(\"use\",{\"xlink:href\":\"#\"+a})):d.prototype.use.call(this)},h.symbol=function(a,b,c,d){var\" i(a,\"object\")?d=\"a:null!=a&&(d={x:a,y:b,text:c||\"\"}),this.el(\"text\",d)},h.line=function(a,b,c,d){var\" i(a,\"object\")?e=\"a:null!=a&&(e={x1:a,x2:c,y1:b,y2:d}),this.el(\"line\",e)},h.polyline=function(a){arguments.length\">1&&(a=Array.prototype.slice.call(arguments,0));var b={};return i(a,\"object\")&&!i(a,\"array\")?b=a:null!=a&&(b={points:a}),this.el(\"polyline\",b)},h.polygon=function(a){arguments.length>1&&(a=Array.prototype.slice.call(arguments,0));var b={};return i(a,\"object\")&&!i(a,\"array\")?b=a:null!=a&&(b={points:a}),this.el(\"polygon\",b)},function(){function d(){return this.selectAll(\"stop\")}function e(a,b){var d=l(\"stop\"),e={offset:+b+\"%\"};a=c.color(a),e[\"stop-color\"]=a.hex,a.opacity<1&&(e[\"stop-opacity\"]=a.opacity),l(d,e);for(var f,g=\"this.stops(),h=0;h<g.length;h++){var\" i=\"parseFloat(g[h].attr(\"offset\"));if(i\">b){this.node.insertBefore(d,g[h].node),f=!0;break}}return f||this.node.appendChild(d),this}function f(){if(\"linearGradient\"==this.type){var a=l(this.node,\"x1\")||0,b=l(this.node,\"x2\")||1,d=l(this.node,\"y1\")||0,e=l(this.node,\"y2\")||0;return c._.box(a,d,math.abs(b-a),math.abs(e-d))}var f=this.node.cx||.5,g=this.node.cy||.5,h=this.node.r||0;return c._.box(f-h,g-h,2*h,2*h)}function g(a){var d=a,e=this.stops();if(\"string\"==typeof a&&(d=b(\"snap.util.grad.parse\",null,\"l(0,0,0,1)\"+a).firstDefined().stops),c.is(d,\"array\")){for(var f=0;f<e.length;f++)if(d[f]){var g=\"c.color(d[f].color),h={offset:d[f].offset+\"%\"};h[\"stop-color\"]=g.hex,g.opacity<1&&(h[\"stop-opacity\"]=g.opacity),e[f].attr(h)}else\" e[f].remove();for(f=\"e.length;f<d.length;f++)this.addStop(d[f].color,d[f].offset);return\" this}}function=\"\" i(a,c){var=\"\" d,e=\"b(\"snap.util.grad.parse\",null,c).firstDefined();if(!e)return\" null;e.params.unshift(a),d=\"l\" ==\"e.type.toLowerCase()?j.apply(0,e.params):k.apply(0,e.params),e.type!=e.type.toLowerCase()&&l(d.node,{gradientUnits:\"userSpaceOnUse\"});for(var\" f=\"e.stops,g=f.length,h=0;g\">h;h++){var i=f[h];d.addStop(i.color,i.offset)}return d}function j(a,b,h,i,j){var k=c._.make(\"linearGradient\",a);return k.stops=d,k.addStop=e,k.getBBox=f,k.setStops=g,null!=b&&l(k.node,{x1:b,y1:h,x2:i,y2:j}),k}function k(a,b,g,h,i,j){var k=c._.make(\"radialGradient\",a);return k.stops=d,k.addStop=e,k.getBBox=f,null!=b&&l(k.node,{cx:b,cy:g,r:h}),null!=i&&null!=j&&l(k.node,{fx:i,fy:j}),k}var l=c._.$;h.gradient=function(a){return i(this.defs,a)},h.gradientLinear=function(a,b,c,d){return j(this.defs,a,b,c,d)},h.gradientRadial=function(a,b,c,d,e){return k(this.defs,a,b,c,d,e)},h.toString=function(){var a,b=this.node.ownerDocument,d=b.createDocumentFragment(),e=b.createElement(\"div\"),f=this.node.cloneNode(!0);return d.appendChild(e),e.appendChild(f),c._.$(f,{xmlns:\"http://www.w3.org/2000/svg\"}),a=e.innerHTML,d.removeChild(d.firstChild),a},h.toDataURL=function(){return a&&a.btoa?\"data:image/svg+xml;base64,\"+btoa(unescape(encodeURIComponent(this))):void 0},h.clear=function(){for(var a,b=this.node.firstChild;b;)a=b.nextSibling,\"defs\"!=b.tagName?b.parentNode.removeChild(b):h.clear.call({node:b}),b=a}}()}),d.plugin(function(a,b,c,d){function e(a){var b=e.ps=e.ps||{};return b[a]?b[a].sleep=100:b[a]={sleep:100},setTimeout(function(){for(var c in b)b[M](c)&&c!=a&&(b[c].sleep--,!b[c].sleep&&delete b[c])}),b[a]}function f(a,b,c,d){return null==a&&(a=b=c=d=0),null==b&&(b=a.y,c=a.width,d=a.height,a=a.x),{x:a,y:b,width:c,w:c,height:d,h:d,x2:a+c,y2:b+d,cx:a+c/2,cy:b+d/2,r1:P.min(c,d)/2,r2:P.max(c,d)/2,r0:P.sqrt(c*c+d*d)/2,path:y(a,b,c,d),vb:[a,b,c,d].join(\" \")}}function g(){return this.join(\",\").replace(N,\"$1\")}function h(a){var b=L(a);return b.toString=g,b}function i(a,b,c,d,e,f,g,h,i){return null==i?p(a,b,c,d,e,f,g,h):k(a,b,c,d,e,f,g,h,q(a,b,c,d,e,f,g,h,i))}function j(c,d){function e(a){return+(+a).toFixed(3)}return a._.cacher(function(a,f,g){a instanceof b&&(a=a.attr(\"d\")),a=G(a);for(var h,j,l,m,n,o=\"\",p={},q=0,r=0,s=a.length;s>r;r++){if(l=a[r],\"M\"==l[0])h=+l[1],j=+l[2];else{if(m=i(h,j,l[1],l[2],l[3],l[4],l[5],l[6]),q+m>f){if(d&&!p.start){if(n=i(h,j,l[1],l[2],l[3],l[4],l[5],l[6],f-q),o+=[\"C\"+e(n.start.x),e(n.start.y),e(n.m.x),e(n.m.y),e(n.x),e(n.y)],g)return o;p.start=o,o=[\"M\"+e(n.x),e(n.y)+\"C\"+e(n.n.x),e(n.n.y),e(n.end.x),e(n.end.y),e(l[5]),e(l[6])].join(),q+=m,h=+l[5],j=+l[6];continue}if(!c&&!d)return n=i(h,j,l[1],l[2],l[3],l[4],l[5],l[6],f-q)}q+=m,h=+l[5],j=+l[6]}o+=l.shift()+l}return p.end=o,n=c?q:d?p:k(h,j,l[0],l[1],l[2],l[3],l[4],l[5],1)},null,a._.clone)}function k(a,b,c,d,e,f,g,h,i){var j=1-i,k=T(j,3),l=T(j,2),m=i*i,n=m*i,o=k*a+3*l*i*c+3*j*i*i*e+n*g,p=k*b+3*l*i*d+3*j*i*i*f+n*h,q=a+2*i*(c-a)+m*(e-2*c+a),r=b+2*i*(d-b)+m*(f-2*d+b),s=c+2*i*(e-c)+m*(g-2*e+c),t=d+2*i*(f-d)+m*(h-2*f+d),u=j*a+i*c,v=j*b+i*d,w=j*e+i*g,x=j*f+i*h,y=90-180*P.atan2(q-s,r-t)/Q;return{x:o,y:p,m:{x:q,y:r},n:{x:s,y:t},start:{x:u,y:v},end:{x:w,y:x},alpha:y}}function l(b,c,d,e,g,h,i,j){a.is(b,\"array\")||(b=[b,c,d,e,g,h,i,j]);var k=F.apply(null,b);return f(k.min.x,k.min.y,k.max.x-k.min.x,k.max.y-k.min.y)}function m(a,b,c){return b>=a.x&&b<=a.x+a.width&&c>=a.y&&c<=a.y+a.height}function n(a,b){return=\"\" a=\"f(a),b=f(b),m(b,a.x,a.y)||m(b,a.x2,a.y)||m(b,a.x,a.y2)||m(b,a.x2,a.y2)||m(a,b.x,b.y)||m(a,b.x2,b.y)||m(a,b.x,b.y2)||m(a,b.x2,b.y2)||(a.x<b.x2&&a.x\">b.x||b.x<a.x2&&b.x>a.x)&&(a.y<b.y2&&a.y>b.y||b.y<a.y2&&b.y>a.y)}function o(a,b,c,d,e){var f=-3*b+9*c-9*d+3*e,g=a*f+6*b-12*c+6*d;return a*g-3*b+3*c}function p(a,b,c,d,e,f,g,h,i){null==i&&(i=1),i=i>1?1:0>i?0:i;for(var j=i/2,k=12,l=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],m=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],n=0,p=0;k>p;p++){var q=j*l[p]+j,r=o(q,a,c,e,g),s=o(q,b,d,f,h),t=r*r+s*s;n+=m[p]*P.sqrt(t)}return j*n}function q(a,b,c,d,e,f,g,h,i){if(!(0>i||p(a,b,c,d,e,f,g,h)<i)){var j,k=\"1,l=k/2,m=k-l,n=.01;for(j=p(a,b,c,d,e,f,g,h,m);U(j-i)\">n;)l/=2,m+=(i>j?1:-1)*l,j=p(a,b,c,d,e,f,g,h,m);return m}}function r(a,b,c,d,e,f,g,h){if(!(S(a,c)<r(e,g)||r(a,c)>S(e,g)||S(b,d)<r(f,h)||r(b,d)>S(f,h))){var i=(a*d-b*c)*(e-g)-(a-c)*(e*h-f*g),j=(a*d-b*c)*(f-h)-(b-d)*(e*h-f*g),k=(a-c)*(f-h)-(b-d)*(e-g);if(k){var l=i/k,m=j/k,n=+l.toFixed(2),o=+m.toFixed(2);if(!(n<+r(a,c).tofixed(2)||n>+S(a,c).toFixed(2)||n<+r(e,g).tofixed(2)||n>+S(e,g).toFixed(2)||o<+r(b,d).tofixed(2)||o>+S(b,d).toFixed(2)||o<+r(f,h).tofixed(2)||o>+S(f,h).toFixed(2)))return{x:l,y:m}}}}function s(a,b,c){var d=l(a),e=l(b);if(!n(d,e))return c?0:[];for(var f=p.apply(0,a),g=p.apply(0,b),h=~~(f/8),i=~~(g/8),j=[],m=[],o={},q=c?0:[],s=0;h+1>s;s++){var t=k.apply(0,a.concat(s/h));j.push({x:t.x,y:t.y,t:s/h})}for(s=0;i+1>s;s++)t=k.apply(0,b.concat(s/i)),m.push({x:t.x,y:t.y,t:s/i});for(s=0;h>s;s++)for(var u=0;i>u;u++){var v=j[s],w=j[s+1],x=m[u],y=m[u+1],z=U(w.x-v.x)<.001?\"y\":\"x\",a=u(y.x-x.x)<.001?\"y\":\"x\",b=r(v.x,v.y,w.x,w.y,x.x,x.y,y.x,y.y);if(b){if(o[b.x.tofixed(4)]==b.y.tofixed(4))continue;o[b.x.tofixed(4)]=b.y.tofixed(4);var c=\"v.t+U((B[z]-v[z])/(w[z]-v[z]))*(w.t-v.t),D=x.t+U((B[A]-x[A])/(y[A]-x[A]))*(y.t-x.t);C\">=0&&1>=C&&D>=0&&1>=D&&(c?q++:q.push({x:B.x,y:B.y,t1:C,t2:D}))}}return q}function t(a,b){return v(a,b)}function u(a,b){return v(a,b,1)}function v(a,b,c){a=G(a),b=G(b);for(var d,e,f,g,h,i,j,k,l,m,n=c?0:[],o=0,p=a.length;p>o;o++){var q=a[o];if(\"M\"==q[0])d=h=q[1],e=i=q[2];else{\"C\"==q[0]?(l=[d,e].concat(q.slice(1)),d=l[6],e=l[7]):(l=[d,e,d,e,h,i,h,i],d=h,e=i);for(var r=0,t=b.length;t>r;r++){var u=b[r];if(\"M\"==u[0])f=j=u[1],g=k=u[2];else{\"C\"==u[0]?(m=[f,g].concat(u.slice(1)),f=m[6],g=m[7]):(m=[f,g,f,g,j,k,j,k],f=j,g=k);var v=s(l,m,c);if(c)n+=v;else{for(var w=0,x=v.length;x>w;w++)v[w].segment1=o,v[w].segment2=r,v[w].bez1=l,v[w].bez2=m;n=n.concat(v)}}}}}return n}function w(a,b,c){var d=x(a);return m(d,b,c)&&v(a,[[\"M\",b,c],[\"H\",d.x2+10]],1)%2==1}function x(a){var b=e(a);if(b.bbox)return L(b.bbox);if(!a)return f();a=G(a);for(var c,d=0,g=0,h=[],i=[],j=0,k=a.length;k>j;j++)if(c=a[j],\"M\"==c[0])d=c[1],g=c[2],h.push(d),i.push(g);else{var l=F(d,g,c[1],c[2],c[3],c[4],c[5],c[6]);h=h.concat(l.min.x,l.max.x),i=i.concat(l.min.y,l.max.y),d=c[5],g=c[6]}var m=R.apply(0,h),n=R.apply(0,i),o=S.apply(0,h),p=S.apply(0,i),q=f(m,n,o-m,p-n);return b.bbox=L(q),q}function y(a,b,c,d,e){if(e)return[[\"M\",+a+ +e,b],[\"l\",c-2*e,0],[\"a\",e,e,0,0,1,e,e],[\"l\",0,d-2*e],[\"a\",e,e,0,0,1,-e,e],[\"l\",2*e-c,0],[\"a\",e,e,0,0,1,-e,-e],[\"l\",0,2*e-d],[\"a\",e,e,0,0,1,e,-e],[\"z\"]];var f=[[\"M\",a,b],[\"l\",c,0],[\"l\",0,d],[\"l\",-c,0],[\"z\"]];return f.toString=g,f}function z(a,b,c,d,e){if(null==e&&null==d&&(d=c),a=+a,b=+b,c=+c,d=+d,null!=e)var f=Math.PI/180,h=a+c*Math.cos(-d*f),i=a+c*Math.cos(-e*f),j=b+c*Math.sin(-d*f),k=b+c*Math.sin(-e*f),l=[[\"M\",h,j],[\"A\",c,c,0,+(e-d>180),0,i,k]];else l=[[\"M\",a,b],[\"m\",0,-d],[\"a\",c,d,0,1,1,0,2*d],[\"a\",c,d,0,1,1,0,-2*d],[\"z\"]];return l.toString=g,l}function A(b){var c=e(b),d=String.prototype.toLowerCase;if(c.rel)return h(c.rel);a.is(b,\"array\")&&a.is(b&&b[0],\"array\")||(b=a.parsePathString(b));var f=[],i=0,j=0,k=0,l=0,m=0;\"M\"==b[0][0]&&(i=b[0][1],j=b[0][2],k=i,l=j,m++,f.push([\"M\",i,j]));for(var n=m,o=b.length;o>n;n++){var p=f[n]=[],q=b[n];if(q[0]!=d.call(q[0]))switch(p[0]=d.call(q[0]),p[0]){case\"a\":p[1]=q[1],p[2]=q[2],p[3]=q[3],p[4]=q[4],p[5]=q[5],p[6]=+(q[6]-i).toFixed(3),p[7]=+(q[7]-j).toFixed(3);break;case\"v\":p[1]=+(q[1]-j).toFixed(3);break;case\"m\":k=q[1],l=q[2];default:for(var r=1,s=q.length;s>r;r++)p[r]=+(q[r]-(r%2?i:j)).toFixed(3)}else{p=f[n]=[],\"m\"==q[0]&&(k=q[1]+i,l=q[2]+j);for(var t=0,u=q.length;u>t;t++)f[n][t]=q[t]}var v=f[n].length;switch(f[n][0]){case\"z\":i=k,j=l;break;case\"h\":i+=+f[n][v-1];break;case\"v\":j+=+f[n][v-1];break;default:i+=+f[n][v-2],j+=+f[n][v-1]}}return f.toString=g,c.rel=h(f),f}function B(b){var c=e(b);if(c.abs)return h(c.abs);if(K(b,\"array\")&&K(b&&b[0],\"array\")||(b=a.parsePathString(b)),!b||!b.length)return[[\"M\",0,0]];var d,f=[],i=0,j=0,k=0,l=0,m=0;\"M\"==b[0][0]&&(i=+b[0][1],j=+b[0][2],k=i,l=j,m++,f[0]=[\"M\",i,j]);for(var n,o,p=3==b.length&&\"M\"==b[0][0]&&\"R\"==b[1][0].toUpperCase()&&\"Z\"==b[2][0].toUpperCase(),q=m,r=b.length;r>q;q++){if(f.push(n=[]),o=b[q],d=o[0],d!=d.toUpperCase())switch(n[0]=d.toUpperCase(),n[0]){case\"A\":n[1]=o[1],n[2]=o[2],n[3]=o[3],n[4]=o[4],n[5]=o[5],n[6]=+o[6]+i,n[7]=+o[7]+j;break;case\"V\":n[1]=+o[1]+j;break;case\"H\":n[1]=+o[1]+i;break;case\"R\":for(var s=[i,j].concat(o.slice(1)),t=2,u=s.length;u>t;t++)s[t]=+s[t]+i,s[++t]=+s[t]+j;f.pop(),f=f.concat(I(s,p));break;case\"O\":f.pop(),s=z(i,j,o[1],o[2]),s.push(s[0]),f=f.concat(s);break;case\"U\":f.pop(),f=f.concat(z(i,j,o[1],o[2],o[3])),n=[\"U\"].concat(f[f.length-1].slice(-2));break;case\"M\":k=+o[1]+i,l=+o[2]+j;default:for(t=1,u=o.length;u>t;t++)n[t]=+o[t]+(t%2?i:j)}else if(\"R\"==d)s=[i,j].concat(o.slice(1)),f.pop(),f=f.concat(I(s,p)),n=[\"R\"].concat(o.slice(-2));else if(\"O\"==d)f.pop(),s=z(i,j,o[1],o[2]),s.push(s[0]),f=f.concat(s);else if(\"U\"==d)f.pop(),f=f.concat(z(i,j,o[1],o[2],o[3])),n=[\"U\"].concat(f[f.length-1].slice(-2));else for(var v=0,w=o.length;w>v;v++)n[v]=o[v];if(d=d.toUpperCase(),\"O\"!=d)switch(n[0]){case\"Z\":i=+k,j=+l;break;case\"H\":i=n[1];break;case\"V\":j=n[1];break;case\"M\":k=n[n.length-2],l=n[n.length-1];default:i=n[n.length-2],j=n[n.length-1]}}return f.toString=g,c.abs=h(f),f}function C(a,b,c,d){return[a,b,c,d,c,d]}function D(a,b,c,d,e,f){var g=1/3,h=2/3;return[g*a+h*c,g*b+h*d,g*e+h*c,g*f+h*d,e,f]}function E(b,c,d,e,f,g,h,i,j,k){var l,m=120*Q/180,n=Q/180*(+f||0),o=[],p=a._.cacher(function(a,b,c){var d=a*P.cos(c)-b*P.sin(c),e=a*P.sin(c)+b*P.cos(c);return{x:d,y:e}});if(!d||!e)return[b,c,i,j,i,j];if(k)y=k[0],z=k[1],w=k[2],x=k[3];else{l=p(b,c,-n),b=l.x,c=l.y,l=p(i,j,-n),i=l.x,j=l.y;var q=(P.cos(Q/180*f),P.sin(Q/180*f),(b-i)/2),r=(c-j)/2,s=q*q/(d*d)+r*r/(e*e);s>1&&(s=P.sqrt(s),d=s*d,e=s*e);var t=d*d,u=e*e,v=(g==h?-1:1)*P.sqrt(U((t*u-t*r*r-u*q*q)/(t*r*r+u*q*q))),w=v*d*r/e+(b+i)/2,x=v*-e*q/d+(c+j)/2,y=P.asin(((c-x)/e).toFixed(9)),z=P.asin(((j-x)/e).toFixed(9));y=w>b?Q-y:y,z=w>i?Q-z:z,0>y&&(y=2*Q+y),0>z&&(z=2*Q+z),h&&y>z&&(y-=2*Q),!h&&z>y&&(z-=2*Q)}var A=z-y;if(U(A)>m){var B=z,C=i,D=j;z=y+m*(h&&z>y?1:-1),i=w+d*P.cos(z),j=x+e*P.sin(z),o=E(i,j,d,e,f,0,h,C,D,[z,B,w,x])}A=z-y;var F=P.cos(y),G=P.sin(y),H=P.cos(z),I=P.sin(z),J=P.tan(A/4),K=4/3*d*J,L=4/3*e*J,M=[b,c],N=[b+K*G,c-L*F],O=[i+K*I,j-L*H],R=[i,j];if(N[0]=2*M[0]-N[0],N[1]=2*M[1]-N[1],k)return[N,O,R].concat(o);o=[N,O,R].concat(o).join().split(\",\");for(var S=[],T=0,V=o.length;V>T;T++)S[T]=T%2?p(o[T-1],o[T],n).y:p(o[T],o[T+1],n).x;return S}function F(a,b,c,d,e,f,g,h){for(var i,j,k,l,m,n,o,p,q=[],r=[[],[]],s=0;2>s;++s)if(0==s?(j=6*a-12*c+6*e,i=-3*a+9*c-9*e+3*g,k=3*c-3*a):(j=6*b-12*d+6*f,i=-3*b+9*d-9*f+3*h,k=3*d-3*b),U(i)<1e-12){if(u(j)<1e-12)continue;l=-k j,l=\"\">0&&1>l&&q.push(l)}else o=j*j-4*k*i,p=P.sqrt(o),0>o||(m=(-j+p)/(2*i),m>0&&1>m&&q.push(m),n=(-j-p)/(2*i),n>0&&1>n&&q.push(n));for(var t,u=q.length,v=u;u--;)l=q[u],t=1-l,r[0][u]=t*t*t*a+3*t*t*l*c+3*t*l*l*e+l*l*l*g,r[1][u]=t*t*t*b+3*t*t*l*d+3*t*l*l*f+l*l*l*h;return r[0][v]=a,r[1][v]=b,r[0][v+1]=g,r[1][v+1]=h,r[0].length=r[1].length=v+2,{min:{x:R.apply(0,r[0]),y:R.apply(0,r[1])},max:{x:S.apply(0,r[0]),y:S.apply(0,r[1])}}}function G(a,b){var c=!b&&e(a);if(!b&&c.curve)return h(c.curve);for(var d=B(a),f=b&&B(b),g={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},i={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},j=(function(a,b,c){var d,e;if(!a)return[\"C\",b.x,b.y,b.x,b.y,b.x,b.y];switch(!(a[0]in{T:1,Q:1})&&(b.qx=b.qy=null),a[0]){case\"M\":b.X=a[1],b.Y=a[2];break;case\"A\":a=[\"C\"].concat(E.apply(0,[b.x,b.y].concat(a.slice(1))));break;case\"S\":\"C\"==c||\"S\"==c?(d=2*b.x-b.bx,e=2*b.y-b.by):(d=b.x,e=b.y),a=[\"C\",d,e].concat(a.slice(1));break;case\"T\":\"Q\"==c||\"T\"==c?(b.qx=2*b.x-b.qx,b.qy=2*b.y-b.qy):(b.qx=b.x,b.qy=b.y),a=[\"C\"].concat(D(b.x,b.y,b.qx,b.qy,a[1],a[2]));break;case\"Q\":b.qx=a[1],b.qy=a[2],a=[\"C\"].concat(D(b.x,b.y,a[1],a[2],a[3],a[4]));break;case\"L\":a=[\"C\"].concat(C(b.x,b.y,a[1],a[2]));break;case\"H\":a=[\"C\"].concat(C(b.x,b.y,a[1],b.y));break;case\"V\":a=[\"C\"].concat(C(b.x,b.y,b.x,a[1]));break;case\"Z\":a=[\"C\"].concat(C(b.x,b.y,b.X,b.Y))}return a}),k=function(a,b){if(a[b].length>7){a[b].shift();for(var c=a[b];c.length;)m[b]=\"A\",f&&(n[b]=\"A\"),a.splice(b++,0,[\"C\"].concat(c.splice(0,6)));a.splice(b,1),r=S(d.length,f&&f.length||0)}},l=function(a,b,c,e,g){a&&b&&\"M\"==a[g][0]&&\"M\"!=b[g][0]&&(b.splice(g,0,[\"M\",e.x,e.y]),c.bx=0,c.by=0,c.x=a[g][1],c.y=a[g][2],r=S(d.length,f&&f.length||0))},m=[],n=[],o=\"\",p=\"\",q=0,r=S(d.length,f&&f.length||0);r>q;q++){d[q]&&(o=d[q][0]),\"C\"!=o&&(m[q]=o,q&&(p=m[q-1])),d[q]=j(d[q],g,p),\"A\"!=m[q]&&\"C\"==o&&(m[q]=\"C\"),k(d,q),f&&(f[q]&&(o=f[q][0]),\"C\"!=o&&(n[q]=o,q&&(p=n[q-1])),f[q]=j(f[q],i,p),\"A\"!=n[q]&&\"C\"==o&&(n[q]=\"C\"),k(f,q)),l(d,f,g,i,q),l(f,d,i,g,q);var s=d[q],t=f&&f[q],u=s.length,v=f&&t.length;g.x=s[u-2],g.y=s[u-1],g.bx=O(s[u-4])||g.x,g.by=O(s[u-3])||g.y,i.bx=f&&(O(t[v-4])||i.x),i.by=f&&(O(t[v-3])||i.y),i.x=f&&t[v-2],i.y=f&&t[v-1]}return f||(c.curve=h(d)),f?[d,f]:d}function H(a,b){if(!b)return a;var c,d,e,f,g,h,i;for(a=G(a),e=0,g=a.length;g>e;e++)for(i=a[e],f=1,h=i.length;h>f;f+=2)c=b.x(i[f],i[f+1]),d=b.y(i[f],i[f+1]),i[f]=c,i[f+1]=d;return a}function I(a,b){for(var c=[],d=0,e=a.length;e-2*!b>d;d+=2){var f=[{x:+a[d-2],y:+a[d-1]},{x:+a[d],y:+a[d+1]},{x:+a[d+2],y:+a[d+3]},{x:+a[d+4],y:+a[d+5]}];b?d?e-4==d?f[3]={x:+a[0],y:+a[1]}:e-2==d&&(f[2]={x:+a[0],y:+a[1]},f[3]={x:+a[2],y:+a[3]}):f[0]={x:+a[e-2],y:+a[e-1]}:e-4==d?f[3]=f[2]:d||(f[0]={x:+a[d],y:+a[d+1]}),c.push([\"C\",(-f[0].x+6*f[1].x+f[2].x)/6,(-f[0].y+6*f[1].y+f[2].y)/6,(f[1].x+6*f[2].x-f[3].x)/6,(f[1].y+6*f[2].y-f[3].y)/6,f[2].x,f[2].y])}return c}var J=b.prototype,K=a.is,L=a._.clone,M=\"hasOwnProperty\",N=/,?([a-z]),?/gi,O=parseFloat,P=Math,Q=P.PI,R=P.min,S=P.max,T=P.pow,U=P.abs,V=j(1),W=j(),X=j(0,1),Y=a._unit2px,Z={path:function(a){return a.attr(\"path\")},circle:function(a){var b=Y(a);return z(b.cx,b.cy,b.r)},ellipse:function(a){var b=Y(a);\nreturn z(b.cx||0,b.cy||0,b.rx,b.ry)},rect:function(a){var b=Y(a);return y(b.x||0,b.y||0,b.width,b.height,b.rx,b.ry)},image:function(a){var b=Y(a);return y(b.x||0,b.y||0,b.width,b.height)},line:function(a){return\"M\"+[a.attr(\"x1\")||0,a.attr(\"y1\")||0,a.attr(\"x2\"),a.attr(\"y2\")]},polyline:function(a){return\"M\"+a.attr(\"points\")},polygon:function(a){return\"M\"+a.attr(\"points\")+\"z\"},deflt:function(a){var b=a.node.getBBox();return y(b.x,b.y,b.width,b.height)}};a.path=e,a.path.getTotalLength=V,a.path.getPointAtLength=W,a.path.getSubpath=function(a,b,c){if(this.getTotalLength(a)-c<1e-6)return x(a,b).end;var=\"\" d=\"X(a,c,1);return\" b?x(d,b).end:d},j.gettotallength=\"function(){return\" this.node.gettotallength?this.node.gettotallength():void=\"\" 0},j.getpointatlength=\"function(a){return\" w(this.attr(\"d\"),a)},j.getsubpath=\"function(b,c){return\" a.path.getsubpath(this.attr(\"d\"),b,c)},a._.box=\"f,a.path.findDotsAtSegment=k,a.path.bezierBBox=l,a.path.isPointInsideBBox=m,a.closest=function(b,c,d,e){for(var\" g=\"100,h=f(b-g/2,c-g/2,g,g),i=[],j=d[0].hasOwnProperty(\"x\")?function(a){return{x:d[a].x,y:d[a].y}}:function(a){return{x:d[a],y:e[a]}},k=0;1e6\">=g&&!k;){for(var l=0,n=d.length;n>l;l++){var o=j(l);if(m(h,o.x,o.y)){k++,i.push(o);break}}k||(g*=2,h=f(b-g/2,c-g/2,g,g))}if(1e6!=g){var p,q=1/0;for(l=0,n=i.length;n>l;l++){var r=a.len(b,c,i[l].x,i[l].y);q>r&&(q=r,i[l].len=r,p=i[l])}return p}},a.path.isBBoxIntersect=n,a.path.intersection=t,a.path.intersectionNumber=u,a.path.isPointInside=w,a.path.getBBox=x,a.path.get=Z,a.path.toRelative=A,a.path.toAbsolute=B,a.path.toCubic=G,a.path.map=H,a.path.toString=g,a.path.clone=h}),d.plugin(function(a,d,e,f){var g=Math.max,h=Math.min,i=function(a){if(this.items=[],this.bindings={},this.length=0,this.type=\"set\",a)for(var b=0,c=a.length;c>b;b++)a[b]&&(this[this.items.length]=this.items[this.items.length]=a[b],this.length++)},j=i.prototype;j.push=function(){for(var a,b,c=0,d=arguments.length;d>c;c++)a=arguments[c],a&&(b=this.items.length,this[b]=this.items[b]=a,this.length++);return this},j.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},j.forEach=function(a,b){for(var c=0,d=this.items.length;d>c;c++)if(a.call(b,this.items[c],c)===!1)return this;return this},j.animate=function(d,e,f,g){\"function\"!=typeof f||f.length||(g=f,f=c.linear),d instanceof a._.Animation&&(g=d.callback,f=d.easing,e=f.dur,d=d.attr);var h=arguments;if(a.is(d,\"array\")&&a.is(h[h.length-1],\"array\"))var i=!0;var j,k=function(){j?this.b=j:j=this.b},l=0,m=this,n=g&&function(){++l==m.length&&g.call(this)};return this.forEach(function(a,c){b.once(\"snap.animcreated.\"+a.id,k),i?h[c]&&a.animate.apply(a,h[c]):a.animate(d,e,f,n)})},j.remove=function(){for(;this.length;)this.pop().remove();return this},j.bind=function(a,b,c){var d={};if(\"function\"==typeof b)this.bindings[a]=b;else{var e=c||a;this.bindings[a]=function(a){d[e]=a,b.attr(d)}}return this},j.attr=function(a){var b={};for(var c in a)this.bindings[c]?this.bindings[c](a[c]):b[c]=a[c];for(var d=0,e=this.items.length;e>d;d++)this.items[d].attr(b);return this},j.clear=function(){for(;this.length;)this.pop()},j.splice=function(a,b,c){a=0>a?g(this.length+a,0):a,b=g(0,h(this.length-a,b));var d,e=[],f=[],j=[];for(d=2;d<arguments.length;d++)j.push(arguments[d]);for(d=0;b>d;d++)f.push(this[a+d]);for(;d<this.length-a;d++)e.push(this[a+d]);var k=\"j.length;for(d=0;d<k+e.length;d++)this.items[a+d]=this[a+d]=k\">d?j[d]:e[d-k];for(d=this.items.length=this.length-=b-k;this[d];)delete this[d++];return new i(f)},j.exclude=function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]==a)return this.splice(b,1),!0;return!1},j.insertAfter=function(a){for(var b=this.items.length;b--;)this.items[b].insertAfter(a);return this},j.getBBox=function(){for(var a=[],b=[],c=[],d=[],e=this.items.length;e--;)if(!this.items[e].removed){var f=this.items[e].getBBox();a.push(f.x),b.push(f.y),c.push(f.x+f.width),d.push(f.y+f.height)}return a=h.apply(0,a),b=h.apply(0,b),c=g.apply(0,c),d=g.apply(0,d),{x:a,y:b,x2:c,y2:d,width:c-a,height:d-b,cx:a+(c-a)/2,cy:b+(d-b)/2}},j.clone=function(a){a=new i;for(var b=0,c=this.items.length;c>b;b++)a.push(this.items[b].clone());return a},j.toString=function(){return\"Snap‘s set\"},j.type=\"set\",a.Set=i,a.set=function(){var a=new i;return arguments.length&&a.push.apply(a,Array.prototype.slice.call(arguments,0)),a}}),d.plugin(function(a,c,d,e){function f(a){var b=a[0];switch(b.toLowerCase()){case\"t\":return[b,0,0];case\"m\":return[b,1,0,0,1,0,0];case\"r\":return 4==a.length?[b,0,a[2],a[3]]:[b,0];case\"s\":return 5==a.length?[b,1,1,a[3],a[4]]:3==a.length?[b,1,1]:[b,1]}}function g(b,c,d){b=b||new a.Matrix,c=c||new a.Matrix,b=a.parseTransformString(b.toTransformString())||[],c=a.parseTransformString(c.toTransformString())||[];for(var e,g,h,i,j=Math.max(b.length,c.length),k=[],n=[],o=0;j>o;o++){if(h=b[o]||f(c[o]),i=c[o]||f(h),h[0]!=i[0]||\"r\"==h[0].toLowerCase()&&(h[2]!=i[2]||h[3]!=i[3])||\"s\"==h[0].toLowerCase()&&(h[3]!=i[3]||h[4]!=i[4])){b=a._.transform2matrix(b,d()),c=a._.transform2matrix(c,d()),k=[[\"m\",b.a,b.b,b.c,b.d,b.e,b.f]],n=[[\"m\",c.a,c.b,c.c,c.d,c.e,c.f]];break}for(k[o]=[],n[o]=[],e=0,g=Math.max(h.length,i.length);g>e;e++)e in h&&(k[o][e]=h[e]),e in i&&(n[o][e]=i[e])}return{from:m(k),to:m(n),f:l(k)}}function h(a){return a}function i(a){return function(b){return+b.toFixed(3)+a}}function j(a){return a.join(\" \")}function k(b){return a.rgb(b[0],b[1],b[2],b[3])}function l(a){var b,c,d,e,f,g,h=0,i=[];for(b=0,c=a.length;c>b;b++){for(f=\"[\",g=['\"'+a[b][0]+'\"'],d=1,e=a[b].length;e>d;d++)g[d]=\"val[\"+h++ +\"]\";f+=g+\"]\",i[b]=f}return Function(\"val\",\"return Snap.path.toString.call([\"+i+\"])\")}function m(a){for(var b=[],c=0,d=a.length;d>c;c++)for(var e=1,f=a[c].length;f>e;e++)b.push(a[c][e]);return b}function n(a){return isFinite(a)}function o(b,c){return a.is(b,\"array\")&&a.is(c,\"array\")?b.toString()==c.toString():!1}var p={},q=/[%a-z]+$/i,r=String;p.stroke=p.fill=\"colour\",c.prototype.equal=function(a,c){return b(\"snap.util.equal\",this,a,c).firstDefined()},b.on(\"snap.util.equal\",function(b,c){var d,e,f=r(this.attr(b)||\"\"),s=this;if(\"colour\"==p[b])return d=a.color(f),e=a.color(c),{from:[d.r,d.g,d.b,d.opacity],to:[e.r,e.g,e.b,e.opacity],f:k};if(\"viewBox\"==b)return d=this.attr(b).vb.split(\" \").map(Number),e=c.split(\" \").map(Number),{from:d,to:e,f:j};if(\"transform\"==b||\"gradientTransform\"==b||\"patternTransform\"==b)return\"string\"==typeof c&&(c=r(c).replace(/\\.{3}|\\u2026/g,f)),f=this.matrix,c=a._.rgTransform.test(c)?a._.transform2matrix(c,this.getBBox()):a._.transform2matrix(a._.svgTransform2string(c),this.getBBox()),g(f,c,function(){return s.getBBox(1)});if(\"d\"==b||\"path\"==b)return d=a.path.toCubic(f,c),{from:m(d[0]),to:m(d[1]),f:l(d[0])};if(\"points\"==b)return d=r(f).split(a._.separator),e=r(c).split(a._.separator),{from:d,to:e,f:function(a){return a}};if(n(f)&&n(c))return{from:parseFloat(f),to:parseFloat(c),f:h};var t=f.match(q),u=r(c).match(q);return t&&o(t,u)?{from:parseFloat(f),to:parseFloat(c),f:i(t)}:{from:this.asPX(b),to:this.asPX(b,c),f:h}})}),d.plugin(function(a,c,d,e){for(var f=c.prototype,g=\"hasOwnProperty\",h=(\"createTouch\"in e.doc),i=[\"click\",\"dblclick\",\"mousedown\",\"mousemove\",\"mouseout\",\"mouseover\",\"mouseup\",\"touchstart\",\"touchmove\",\"touchend\",\"touchcancel\"],j={mousedown:\"touchstart\",mousemove:\"touchmove\",mouseup:\"touchend\"},k=(function(a,b){var c=\"y\"==a?\"scrollTop\":\"scrollLeft\",d=b&&b.node?b.node.ownerDocument:e.doc;return d[c in d.documentElement?\"documentElement\":\"body\"][c]}),l=function(){return this.originalEvent.preventDefault()},m=function(){return this.originalEvent.stopPropagation()},n=function(a,b,c,d){var e=h&&j[b]?j[b]:b,f=function(e){var f=k(\"y\",d),i=k(\"x\",d);if(h&&j[g](b))for(var n=0,o=e.targetTouches&&e.targetTouches.length;o>n;n++)if(e.targetTouches[n].target==a||a.contains(e.targetTouches[n].target)){var p=e;e=e.targetTouches[n],e.originalEvent=p,e.preventDefault=l,e.stopPropagation=m;break}var q=e.clientX+i,r=e.clientY+f;return c.call(d,e,q,r)};return b!==e&&a.addEventListener(b,f,!1),a.addEventListener(e,f,!1),function(){return b!==e&&a.removeEventListener(b,f,!1),a.removeEventListener(e,f,!1),!0}},o=[],p=function(a){for(var c,d=a.clientX,e=a.clientY,f=k(\"y\"),g=k(\"x\"),i=o.length;i--;){if(c=o[i],h){for(var j,l=a.touches&&a.touches.length;l--;)if(j=a.touches[l],j.identifier==c.el._drag.id||c.el.node.contains(j.target)){d=j.clientX,e=j.clientY,(a.originalEvent?a.originalEvent:a).preventDefault();break}}else a.preventDefault();var m=c.el.node;m.nextSibling,m.parentNode,m.style.display;d+=g,e+=f,b(\"snap.drag.move.\"+c.el.id,c.move_scope||c.el,d-c.el._drag.x,e-c.el._drag.y,d,e,a)}},q=function(c){a.unmousemove(p).unmouseup(q);for(var d,e=o.length;e--;)d=o[e],d.el._drag={},b(\"snap.drag.end.\"+d.el.id,d.end_scope||d.start_scope||d.move_scope||d.el,c),b.off(\"snap.drag.*.\"+d.el.id);o=[]},r=i.length;r--;)!function(b){a[b]=f[b]=function(c,d){if(a.is(c,\"function\"))this.events=this.events||[],this.events.push({name:b,f:c,unbind:n(this.node||document,b,c,d||this)});else for(var e=0,f=this.events.length;f>e;e++)if(this.events[e].name==b)try{this.events[e].f.call(this)}catch(g){}return this},a[\"un\"+b]=f[\"un\"+b]=function(a){for(var c=this.events||[],d=c.length;d--;)if(c[d].name==b&&(c[d].f==a||!a))return c[d].unbind(),c.splice(d,1),!c.length&&delete this.events,this;return this}}(i[r]);f.hover=function(a,b,c,d){return this.mouseover(a,c).mouseout(b,d||c)},f.unhover=function(a,b){return this.unmouseover(a).unmouseout(b)};var s=[];f.drag=function(c,d,e,f,g,h){function i(i,j,l){(i.originalEvent||i).preventDefault(),k._drag.x=j,k._drag.y=l,k._drag.id=i.identifier,!o.length&&a.mousemove(p).mouseup(q),o.push({el:k,move_scope:f,start_scope:g,end_scope:h}),d&&b.on(\"snap.drag.start.\"+k.id,d),c&&b.on(\"snap.drag.move.\"+k.id,c),e&&b.on(\"snap.drag.end.\"+k.id,e),b(\"snap.drag.start.\"+k.id,g||f||k,j,l,i)}function j(a,c,d){b(\"snap.draginit.\"+k.id,k,a,c,d)}var k=this;if(!arguments.length){var l;return k.drag(function(a,b){this.attr({transform:l+(l?\"T\":\"t\")+[a,b]})},function(){l=this.transform().local})}return b.on(\"snap.draginit.\"+k.id,i),k._drag={},s.push({el:k,start:i,init:j}),k.mousedown(j),k},f.undrag=function(){for(var c=s.length;c--;)s[c].el==this&&(this.unmousedown(s[c].init),s.splice(c,1),b.unbind(\"snap.drag.*.\"+this.id),b.unbind(\"snap.draginit.\"+this.id));return!s.length&&a.unmousemove(p).unmouseup(q),this}}),d.plugin(function(a,c,d,e){var f=(c.prototype,d.prototype),g=/^\\s*url\\((.+)\\)/,h=String,i=a._.$;a.filter={},f.filter=function(b){var d=this;\"svg\"!=d.type&&(d=d.paper);var e=a.parse(h(b)),f=a._.id(),g=(d.node.offsetWidth,d.node.offsetHeight,i(\"filter\"));return i(g,{id:f,filterUnits:\"userSpaceOnUse\"}),g.appendChild(e.node),d.defs.appendChild(g),new c(g)},b.on(\"snap.util.getattr.filter\",function(){b.stop();var c=i(this.node,\"filter\");if(c){var d=h(c).match(g);return d&&a.select(d[1])}}),b.on(\"snap.util.attr.filter\",function(d){if(d instanceof c&&\"filter\"==d.type){b.stop();var e=d.node.id;e||(i(d.node,{id:d.id}),e=d.id),i(this.node,{filter:a.url(e)})}d&&\"none\"!=d||(b.stop(),this.node.removeAttribute(\"filter\"))}),a.filter.blur=function(b,c){null==b&&(b=2);var d=null==c?b:[b,c];return a.format('<fegaussianblur stddeviation=\"{def}\">',{def:d})},a.filter.blur.toString=function(){return this()},a.filter.shadow=function(b,c,d,e,f){return null==f&&(null==e?(f=d,d=4,e=\"#000\"):(f=e,e=d,d=4)),null==d&&(d=4),null==f&&(f=1),null==b&&(b=0,c=2),null==c&&(c=b),e=a.color(e),a.format('<fegaussianblur in=\"SourceAlpha\" stddeviation=\"{blur}\"><feoffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"><feflood flood-color=\"{color}\"><fecomposite in2=\"offsetblur\" operator=\"in\"><fecomponenttransfer><fefunca type=\"linear\" slope=\"{opacity}\"></fefunca></fecomponenttransfer><femerge><femergenode><femergenode in=\"SourceGraphic\"></femergenode></femergenode></femerge>',{color:e,dx:b,dy:c,blur:d,opacity:f})},a.filter.shadow.toString=function(){return this()},a.filter.grayscale=function(b){return null==b&&(b=1),a.format('<fecolormatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\">',{a:.2126+.7874*(1-b),b:.7152-.7152*(1-b),c:.0722-.0722*(1-b),d:.2126-.2126*(1-b),e:.7152+.2848*(1-b),f:.0722-.0722*(1-b),g:.2126-.2126*(1-b),h:.0722+.9278*(1-b)})},a.filter.grayscale.toString=function(){return this()},a.filter.sepia=function(b){return null==b&&(b=1),a.format('<fecolormatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\">',{a:.393+.607*(1-b),b:.769-.769*(1-b),c:.189-.189*(1-b),d:.349-.349*(1-b),e:.686+.314*(1-b),f:.168-.168*(1-b),g:.272-.272*(1-b),h:.534-.534*(1-b),i:.131+.869*(1-b)})},a.filter.sepia.toString=function(){return this()},a.filter.saturate=function(b){return null==b&&(b=1),a.format('<fecolormatrix type=\"saturate\" values=\"{amount}\">',{amount:1-b})},a.filter.saturate.toString=function(){return this()},a.filter.hueRotate=function(b){return b=b||0,a.format('<fecolormatrix type=\"hueRotate\" values=\"{angle}\">',{angle:b})},a.filter.hueRotate.toString=function(){return this()},a.filter.invert=function(b){return null==b&&(b=1),a.format('<fecomponenttransfer><fefuncr type=\"table\" tablevalues=\"{amount} {amount2}\"><fefuncg type=\"table\" tablevalues=\"{amount} {amount2}\"><fefuncb type=\"table\" tablevalues=\"{amount} {amount2}\"></fefuncb></fefuncg></fefuncr></fecomponenttransfer>',{amount:b,amount2:1-b})},a.filter.invert.toString=function(){return this()},a.filter.brightness=function(b){return null==b&&(b=1),a.format('<fecomponenttransfer><fefuncr type=\"linear\" slope=\"{amount}\"><fefuncg type=\"linear\" slope=\"{amount}\"><fefuncb type=\"linear\" slope=\"{amount}\"></fefuncb></fefuncg></fefuncr></fecomponenttransfer>',{amount:b})},a.filter.brightness.toString=function(){return this()},a.filter.contrast=function(b){return null==b&&(b=1),a.format('<fecomponenttransfer><fefuncr type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"><fefuncg type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"><fefuncb type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"></fefuncb></fefuncg></fefuncr></fecomponenttransfer>',{amount:b,amount2:.5-b/2})},a.filter.contrast.toString=function(){return this()}}),d.plugin(function(a,b,c,d,e){var f=a._.box,g=a.is,h=/^[^a-z]*([tbmlrc])/i,i=function(){return\"T\"+this.dx+\",\"+this.dy};b.prototype.getAlign=function(a,b){null==b&&g(a,\"string\")&&(b=a,a=null),a=a||this.paper;var c=a.getBBox?a.getBBox():f(a),d=this.getBBox(),e={};switch(b=b&&b.match(h),b=b?b[1].toLowerCase():\"c\"){case\"t\":e.dx=0,e.dy=c.y-d.y;break;case\"b\":e.dx=0,e.dy=c.y2-d.y2;break;case\"m\":e.dx=0,e.dy=c.cy-d.cy;break;case\"l\":e.dx=c.x-d.x,e.dy=0;break;case\"r\":e.dx=c.x2-d.x2,e.dy=0;break;default:e.dx=c.cx-d.cx,e.dy=0}return e.toString=i,e},b.prototype.align=function(a,b){return this.transform(\"...\"+this.getAlign(a,b))}}),d.plugin(function(b,c,d,e){function f(a){a=a.split(/(?=#)/);var b=new String(a[5]);return b[50]=a[0],b[100]=a[1],b[200]=a[2],b[300]=a[3],b[400]=a[4],b[500]=a[5],b[600]=a[6],b[700]=a[7],b[800]=a[8],b[900]=a[9],a[10]&&(b.A100=a[10],b.A200=a[11],b.A400=a[12],b.A700=a[13]),b}var g=\"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",h=\"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",i=\"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",j=\"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",k=\"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",l=\"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",m=\"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",n=\"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",o=\"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",p=\"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",q=\"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",r=\"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",s=\"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",t=\"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",u=\"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",v=\"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",w=\"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",x=\"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",y=\"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";b.mui={},b.flat={},b.mui.red=f(g),b.mui.pink=f(h),b.mui.purple=f(i),b.mui.deeppurple=f(j),b.mui.indigo=f(k),b.mui.blue=f(l),b.mui.lightblue=f(m),b.mui.cyan=f(n),b.mui.teal=f(o),b.mui.green=f(p),b.mui.lightgreen=f(q),b.mui.lime=f(r),b.mui.yellow=f(s),b.mui.amber=f(t),b.mui.orange=f(u),b.mui.deeporange=f(v),b.mui.brown=f(w),b.mui.grey=f(x),b.mui.bluegrey=f(y),b.flat.turquoise=\"#1abc9c\",b.flat.greensea=\"#16a085\",b.flat.sunflower=\"#f1c40f\",b.flat.orange=\"#f39c12\",b.flat.emerland=\"#2ecc71\",b.flat.nephritis=\"#27ae60\",b.flat.carrot=\"#e67e22\",b.flat.pumpkin=\"#d35400\",b.flat.peterriver=\"#3498db\",b.flat.belizehole=\"#2980b9\",b.flat.alizarin=\"#e74c3c\",b.flat.pomegranate=\"#c0392b\",b.flat.amethyst=\"#9b59b6\",b.flat.wisteria=\"#8e44ad\",b.flat.clouds=\"#ecf0f1\",b.flat.silver=\"#bdc3c7\",b.flat.wetasphalt=\"#34495e\",b.flat.midnightblue=\"#2c3e50\",b.flat.concrete=\"#95a5a6\",b.flat.asbestos=\"#7f8c8d\",b.importMUIColors=function(){for(var c in b.mui)b.mui.hasOwnProperty(c)&&(a[c]=b.mui[c])}}),d});</fecolormatrix></fecolormatrix></fecolormatrix></fecolormatrix></fecomposite></feflood></feoffset></fegaussianblur></fegaussianblur></this.length-a;d++)e.push(this[a+d]);var></arguments.length;d++)j.push(arguments[d]);for(d=0;b></1e-6)return></1e-12){if(u(j)<1e-12)continue;l=-k></.001?\"y\":\"x\",a=u(y.x-x.x)<.001?\"y\":\"x\",b=r(v.x,v.y,w.x,w.y,x.x,x.y,y.x,y.y);if(b){if(o[b.x.tofixed(4)]==b.y.tofixed(4))continue;o[b.x.tofixed(4)]=b.y.tofixed(4);var></+r(f,h).tofixed(2)||o></+r(b,d).tofixed(2)||o></+r(e,g).tofixed(2)||n></+r(a,c).tofixed(2)||n></r(f,h)||r(b,d)></r(e,g)||r(a,c)></i)){var></a.y2&&b.y></b.y2&&a.y></a.x2&&b.x></=a.y+a.height}function></=a.x+a.width&&c></e.length;f++)if(d[f]){var></1&&(e[\"stop-opacity\"]=a.opacity),l(d,e);for(var></a.length;c++)b.appendchild(d(a[c]));else></0&&(b.scalex=-b.scalex);var></b.length;e++)d.push(s(b[e]));return></\"+this.type:\"\",c=this.node.attributes,d=this.node.childnodes;if(a)for(var></\\s*svg(?:\\s|></b.length;e++)d.push(w(b[e]));return></8|b<<16).tostring(16).slice(1),j.opacity=e(g,\"finite\")?g:1,j)):{r:-1,g:-1,b:-1,hex:\"none\",error:1,tostring:z}},c),c.hsb=i(function(a,b,d){return></l?(e=n,f=p,l=r):(q=f+k)<=j&&(s=d(o=i.getpointatlength(q)))<l?(e=o,f=q,l=s):k*=.5}return></l&&(e=g,f=m,l=h);for(k*=.5;k></a.length;b++)\"set\"==a[b].type?a[b].foreach(function(a){d.appendchild(a.node)}):d.appendchild(a[b].node);var></r.length;p+=m.length-2){if(m=[p,1],k=r[p].n,c[d]!=h)k[c[d]]&&(m.push(k[c[d]]),s.unshift({n:k,name:c[d]}));else></0&&(n[h[q].zindex]=h[q]));for(m.sort(i);m[j]<0;)if(e=n[m[j++]],o.push(e.apply(d,g)),c)return>"},{"title":"","url":"http://zhangqiang.work/js/drawLib.js","content":"// Snap.svg 0.5.1\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-07\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            } catch (e) {\n                return null;\n            }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path></path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation 1\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathlength;=\"\" scanlength=\"\" +=\"precision)\" {=\"\" if=\"\" ((scandistance=\"distance2(scan\" ==\"\" pathnode.getpointatlength(scanlength)))=\"\" <=\"\" bestdistance)=\"\" best=\"scan;\" bestlength=\"scanLength;\" bestdistance=\"scanDistance;\" }=\"\" binary=\"\" search=\"\" for=\"\" precise=\"\" estimate=\"\" precision=\"\" *=\".5;\" while=\"\" (precision=\"\"> .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathlength=\"\" &&=\"\" (afterdistance=\"distance2(after\" ==\"\" pathnode.getpointatlength(afterlength)))=\"\" <=\"\" bestdistance)=\"\" {=\"\" best=\"after;\" bestlength=\"afterLength;\" bestdistance=\"afterDistance;\" }=\"\" else=\"\" precision=\"\" *=\".5;\" x:=\"\" best.x,=\"\" y:=\"\" best.y,=\"\" length:=\"\" bestlength,=\"\" distance:=\"\" math.sqrt(bestdistance)=\"\" };=\"\" return=\"\" best;=\"\" *\\=\"\" snap.is=\"\" [=\"\" method=\"\" ]=\"\" **=\"\" handy=\"\" replacement=\"\" for=\"\" the=\"\" `typeof`=\"\" operator=\"\" -=\"\" o=\"\" (…)=\"\" any=\"\" object=\"\" or=\"\" primitive=\"\" type=\"\" (string)=\"\" name=\"\" of=\"\" type,=\"\" e.g.,=\"\" `string`,=\"\" `function`,=\"\" `number`,=\"\" etc.=\"(boolean)\" `true`=\"\" if=\"\" given=\"\" value=\"\" is=\"\" \\*=\"\" snap.snapto=\"\" snaps=\"\" to=\"\" grid=\"\" values=\"\" (array|number)=\"\" array=\"\" step=\"\" (number)=\"\" adjust=\"\" tolerance=\"\" #optional=\"\" maximum=\"\" distance=\"\" target=\"\" that=\"\" would=\"\" trigger=\"\" snap.=\"\" default `10`.=\"(number)\" adjusted=\"\" (values,=\"\" value,=\"\" tolerance)=\"\" \"finite\")=\"\" ?=\"\" :=\"\" 10;=\"\" (is(values,=\"\" \"array\"))=\"\" var=\"\" i=\"values.length;\" while=\"\" (i--)=\"\" (abs(values[i]=\"\" value)=\"\" values[i];=\"\" rem=\"value\" %=\"\" values;=\"\" (rem=\"\" rem;=\"\"> values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use></use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use></use>` element linked to the current element\n     **\n     = (Element) the `<use></use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" +=\"\" this.type=\"\" :=\"\" \"\",=\"\" attr=\"this.node.attributes,\" chld=\"this.node.childNodes;\" if=\"\" (type)=\"\" {=\"\" for=\"\" (var=\"\" i=\"0,\" ii=\"attr.length;\" <=\"\" ii;=\"\" i++)=\"\" res=\"\" attr[i].name=\"\" '=\"' +\n                            attr[i].value.replace(/\" g,=\"\" '\\\\\"')=\"\" '\"';=\"\" }=\"\" (chld.length)=\"\" type=\"\" &&=\"\" (res=\"\" );=\"\" (i=\"0,\" (chld[i].nodetype=\"=\" 3)=\"\" else=\"\" 1)=\"\" \"=\"\">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewbox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path></path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path></path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\" target=\"_blank\" rel=\"external\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\" target=\"_blank\" rel=\"external\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\" target=\"_blank\" rel=\"external\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use></use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x=\"\" +=\"\" bbox.width=\"\" &&=\"\" y=\"\">= bbox.y &&\n                y <= bbox.y=\"\" +=\"\" bbox.height;=\"\" }=\"\" function=\"\" isbboxintersect(bbox1,=\"\" bbox2)=\"\" {=\"\" bbox1=\"box(bbox1);\" bbox2=\"box(bbox2);\" return=\"\" ispointinsidebbox(bbox2,=\"\" bbox1.x,=\"\" bbox1.y)=\"\" ||=\"\" bbox1.x2,=\"\" bbox1.y2)=\"\" ispointinsidebbox(bbox1,=\"\" bbox2.x,=\"\" bbox2.y)=\"\" bbox2.x2,=\"\" bbox2.y2)=\"\" (bbox1.x=\"\" <=\"\" bbox2.x2=\"\" &&=\"\" bbox1.x=\"\"> bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1=\"\" &&=\"\" t2=\"\">= 0 && t2 <= 0=\"\" 2=\"=\" 1)=\"\" {=\"\" if=\"\" (justcount)=\"\" res++;=\"\" }=\"\" else=\"\" res.push({=\"\" x:=\"\" is.x,=\"\" y:=\"\" is.y,=\"\" t1:=\"\" t1,=\"\" t2:=\"\" t2=\"\" });=\"\" return=\"\" res;=\"\" function=\"\" pathintersection(path1,=\"\" path2)=\"\" interpathhelper(path1,=\"\" path2);=\"\" pathintersectionnumber(path1,=\"\" path2,=\"\" 1);=\"\" justcount)=\"\" path1=\"path2curve(path1);\" path2=\"path2curve(path2);\" var=\"\" x1,=\"\" y1,=\"\" x2,=\"\" y2,=\"\" x1m,=\"\" y1m,=\"\" x2m,=\"\" y2m,=\"\" bez1,=\"\" bez2,=\"\" res=\"justCount\" ?=\"\" :=\"\" [];=\"\" for=\"\" (var=\"\" i=\"0,\" ii=\"path1.length;\" <=\"\" ii;=\"\" i++)=\"\" pi=\"path1[i];\" (pi[0]=\"=\" \"m\")=\"\" x1=\"x1m\" ==\"\" pi[1];=\"\" y1=\"y1m\" pi[2];=\"\" \"c\")=\"\" bez1=\"[x1,\" y1].concat(pi.slice(1));=\"\" y1m];=\"\" j=\"0,\" jj=\"path2.length;\" jj;=\"\" j++)=\"\" pj=\"path2[j];\" (pj[0]=\"=\" x2=\"x2m\" pj[1];=\"\" y2=\"y2m\" pj[2];=\"\" bez2=\"[x2,\" y2].concat(pj.slice(1));=\"\" y2m];=\"\" intr=\"interHelper(bez1,\" justcount);=\"\" +=\"intr;\" k=\"0,\" kk=\"intr.length;\" kk;=\"\" k++)=\"\" intr[k].segment1=\"i;\" intr[k].segment2=\"j;\" intr[k].bez1=\"bez1;\" intr[k].bez2=\"bez2;\" ispointinsidepath(path,=\"\" x,=\"\" y)=\"\" bbox=\"pathBBox(path);\" ispointinsidebbox(bbox,=\"\" &&=\"\" interpathhelper(path,=\"\" [[\"m\",=\"\" y],=\"\" [\"h\",=\"\" bbox.x2=\"\" 10]],=\"\" %=\"\" 1;=\"\" pathbbox(path)=\"\" pth=\"paths(path);\" (pth.bbox)=\"\" clone(pth.bbox);=\"\" (!path)=\"\" box();=\"\" path=\"path2curve(path);\" x=\"0,\" y=\"0,\" p;=\"\" p=\"path[i];\" (p[0]=\"=\" x.push(x);=\"\" y.push(y);=\"\" dim=\"curveDim(x,\" y,=\"\" p[1],=\"\" p[2],=\"\" p[3],=\"\" p[4],=\"\" p[5],=\"\" p[6]);=\"\" dim.max.x);=\"\" dim.max.y);=\"\" xmin=\"mmin.apply(0,\" x),=\"\" ymin=\"mmin.apply(0,\" y),=\"\" xmax=\"mmax.apply(0,\" ymax=\"mmax.apply(0,\" bb=\"box(xmin,\" ymin,=\"\" -=\"\" xmin,=\"\" ymin);=\"\" pth.bbox=\"clone(bb);\" bb;=\"\" rectpath(x,=\"\" w,=\"\" h,=\"\" r)=\"\" (r)=\"\" [=\"\" [\"m\",=\"\" +x=\"\" +r,=\"\" [\"l\",=\"\" w=\"\" r=\"\" *=\"\" 2,=\"\" 0],=\"\" [\"a\",=\"\" r,=\"\" 0,=\"\" 1,=\"\" r],=\"\" h=\"\" 2],=\"\" -r,=\"\" -r],=\"\" h],=\"\" [\"z\"]=\"\" ];=\"\" -w,=\"\" [\"z\"]];=\"\" res.tostring=\"toString;\" ellipsepath(x,=\"\" rx,=\"\" ry,=\"\" a)=\"\" (a=\"=\" null=\"\" ry=\"=\" null)=\"\" rx=\"+rx;\" !=\"null)\" rad=\"Math.PI\" 180,=\"\" math.cos(-ry=\"\" rad),=\"\" math.cos(-a=\"\" math.sin(-ry=\"\" math.sin(-a=\"\" y1],=\"\" +(a=\"\"> 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path></path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6=\"\" &&=\"\" !found)=\"\" {=\"\" for=\"\" (var=\"\" i=\"0,\" ii=\"X.length;\" <=\"\" ii;=\"\" i++)=\"\" var=\"\" xy=\"getter(i);\" if=\"\" (ispointinsidebbox(b,=\"\" xy.x,=\"\" xy.y))=\"\" found++;=\"\" inside.push(xy);=\"\" break;=\"\" }=\"\" (!found)=\"\" r=\"\" *=\"2;\" b=\"box(x\" -=\"\" 2,=\"\" y=\"\" r,=\"\" r)=\"\" (r=\"=\" 1e6)=\"\" return;=\"\" len=\"Infinity,\" res;=\"\" (i=\"0,\" l=\"Snap.len(x,\" y,=\"\" inside[i].x,=\"\" inside[i].y);=\"\" (len=\"\"> l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<fegaussianblur stddeviation=\"2\">'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<fegaussianblur stddeviation=\"{def}\">', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<fegaussianblur in=\"SourceAlpha\" stddeviation=\"{blur}\"><feoffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"><feflood flood-color=\"{color}\"><fecomposite in2=\"offsetblur\" operator=\"in\"><fecomponenttransfer><fefunca type=\"linear\" slope=\"{opacity}\"></fefunca></fecomponenttransfer><femerge><femergenode><femergenode in=\"SourceGraphic\"></femergenode></femergenode></femerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<fecolormatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\">', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<fecolormatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\">', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<fecolormatrix type=\"saturate\" values=\"{amount}\">', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<fecolormatrix type=\"hueRotate\" values=\"{angle}\">', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <fecolormatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\">\n        return Snap.format('<fecomponenttransfer><fefuncr type=\"table\" tablevalues=\"{amount} {amount2}\"><fefuncg type=\"table\" tablevalues=\"{amount} {amount2}\"><fefuncb type=\"table\" tablevalues=\"{amount} {amount2}\"></fefuncb></fefuncg></fefuncr></fecomponenttransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<fecomponenttransfer><fefuncr type=\"linear\" slope=\"{amount}\"><fefuncg type=\"linear\" slope=\"{amount}\"><fefuncb type=\"linear\" slope=\"{amount}\"></fefuncb></fefuncg></fefuncr></fecomponenttransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<fecomponenttransfer><fefuncr type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"><fefuncg type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"><fefuncb type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"></fefuncb></fefuncg></fefuncr></fecomponenttransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\" target=\"_blank\" rel=\"external\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\" target=\"_blank\" rel=\"external\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\" target=\"_blank\" rel=\"external\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));</svg></svg></fecolormatrix></fecolormatrix></fecolormatrix></fecolormatrix></fecolormatrix></fecomposite></feflood></feoffset></fegaussianblur></fegaussianblur></fegaussianblur></filter></id></id></id></id></id></id></id></id></=></=></=></=></=></defs></colors></type></colors></coords></type></tspan></symbol></\"></marker></marker></pattern></pattern></defs></\\s*svg(?:\\s|></=></=></name>"}]