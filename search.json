[{"title":"《文学理论教程》笔记","url":"http://zhangqiang.work/posts/620201606/","content":"<h2 id=\"1-文学理论的性质和形态\"><a href=\"#1-文学理论的性质和形态\" class=\"headerlink\" title=\"1. 文学理论的性质和形态\"></a>1. 文学理论的性质和形态</h2><p><code>文艺学</code> 研究文学及其规律的学科。</p>\n"},{"title":"(转) 0-3 岁宝宝 27 项生活自理能力养成法","url":"http://zhangqiang.work/posts/619201606/","content":"<p>自理能力，是指凭自己的能力能够独立完成的事项。请不要小看0～3岁的幼儿，虽然他们年龄不大，但也会主动表现出照顾自己的情形，比如伸手去扶奶瓶、自己拿汤匙进食、喝水、主动表达尿布湿了或想上厕所等。</p>\n<p>当幼儿表现出一定的自理意愿时，如果父母能适时加以协助、引导，就能使幼儿更好、更快地培养出良好的生活自理能力。有研究表明，凡是生活自理能力比较强的幼儿，将更有信心面对种种挑战。因此，为了让孩子在未来的生活和学习中有着更好的表现，就从现在开始培养27项自理能力吧！</p>\n<h2 id=\"Part1-0～3个月\"><a href=\"#Part1-0～3个月\" class=\"headerlink\" title=\"Part1 0～3个月\"></a>Part1 0～3个月</h2><h3 id=\"能力1：吸吮\"><a href=\"#能力1：吸吮\" class=\"headerlink\" title=\"能力1：吸吮\"></a>能力1：吸吮</h3><p>对宝宝而言，吸吮能力是一项必备的技能，他们正是通过吸吮反射来摄取维持生存所必需的养分。如果吸吮能力不佳，不仅营养摄取受到限制，原始口腔欲望也无法得到满足，还可能对情绪发展及行为发展造成障碍，并且影响日后的吞咽、咀嚼与说话能力。</p>\n<p><strong>准备工作：安静的环境</strong></p>\n<p>新生儿6个星期之前混合喂养，最容易引起乳头错觉，要么孩子拒绝乳头，要么因为衔乳姿势不正确，导致乳头皲裂，给妈妈带来痛苦。即使需要也应该让孩子先吸吮妈妈的乳头，再吃奶瓶，让宝宝知道，必须通过努力吸吮才能吃到奶。因为吸吮奶嘴比吸吮乳头省力，一旦习惯奶嘴，就不太愿意费力吸乳头。更因为吸吮奶嘴和吸吮乳头是两种截然不同的技巧。</p>\n<p>让宝宝有正确的衔乳姿势，做到她的脸完全对准乳头、身体完全侧过来，做到她的嘴含住大部分的乳晕、下颏紧贴着乳房、下方的乳晕含的比上方多（因为乳汁是依靠婴儿下颌挤压乳晕而泌出的）下嘴唇完全翻过来贴在下颏。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>让宝宝横躺在你怀里，整个身体对着你的身体，脸对着你的乳房。注意宝宝不应该扭转头和脖子来找奶头，他的头应该枕在你的前臂或者肘窝里，你的前臂托住他的背，你的手托住他的屁股或者腿。</li>\n<li>用另外一只手握住乳房，拇指在上方，另外四只手指头捧住下方，形成一个C字。注意手指头要离开乳晕一段距离。</li>\n<li>用乳头逗引宝宝的下唇，或者，如果宝宝的脸转向另一边，轻轻地划过他的脸颊，觅食的本能会令宝宝转头向你。再次逗引他的下唇，轻声鼓励宝宝张大嘴。等到宝宝嘴张的最大时，迅速地搂紧他，让他来含住乳房。乳头应该长驱直入他的嘴里，压在他舌头上方，乳晕也至少应含入1英寸（2.5厘米）。他的鼻尖应该碰到你的乳房。即使你们贴得很近，他也不会呼吸困难；婴儿的鼻子向上翘，鼻孔冲外，因此他们吃母乳时可以顺畅呼吸。他的下巴也应碰到你的乳房，他的嘴唇应该呈外翻形状。你可能要试几次才成功，如果宝宝不耐烦，暂时停下来，待到宝宝平静下来再试。</li>\n<li>宝宝不仅要含住你的乳头，更重要的是，要含住大部分的乳晕，你的乳头应该完全越过宝宝的牙床。仅仅吸吮乳头不仅不会使宝宝吃到奶，而且会引起乳头皲裂。正确的姿势有助于宝宝挤压乳晕下的输奶管，以获取大量乳汁。一旦发现宝宝的衔乳方式不对，应该用小手指伸进宝宝下唇和乳房之间，断开衔接，重新来。</li>\n<li>注意宝宝应该吸吮你的乳房，而不是他的舌头或下唇。如果发现宝宝的下唇窝在嘴里，可以用手轻轻拨弄他的下巴和嘴，将下唇释放出来。宝宝吸吮的，应该是你的乳晕，这样才能有效地刺激乳腺分泌乳汁。</li>\n</ol>\n<h2 id=\"Part2-4～6个月\"><a href=\"#Part2-4～6个月\" class=\"headerlink\" title=\"Part2 4～6个月\"></a>Part2 4～6个月</h2><h3 id=\"能力2：伸手抓握奶瓶\"><a href=\"#能力2：伸手抓握奶瓶\" class=\"headerlink\" title=\"能力2：伸手抓握奶瓶\"></a>能力2：伸手抓握奶瓶</h3><p>请不要小看宝宝伸手抓握奶瓶的意义，在生理上，这不仅表示他已具有“吸吮”与“双手可碰在一起”的能力，在心理上更有助于培养注意力。当宝宝会伸手帮忙拿奶瓶时，可说是正式踏出自我照顾的第一步。</p>\n<p><strong>准备工作：奶瓶、安静的环境</strong></p>\n<p>每当宝宝要喝奶时，不要急着把奶瓶塞在宝宝口中，可先拿着奶瓶让他看几秒，同时对他说：“喝奶的时间到啦，看，这就是你的奶瓶。”然后慢慢将奶瓶移到宝宝的脸边，让他可以感觉到，此时只要宝宝出现看奶瓶的动作，就可以开始喂食。</p>\n<p><strong>培养建议</strong></p>\n<p>刚一开始，宝宝可能无法抓住奶瓶，此时妈妈可帮他把手放在奶瓶上，为日后自己扶住奶瓶做好准备。奶瓶要有温温的感觉，宝宝才会喜欢把手放上去。在喂食时不要把宝宝的双手挡住，这样他才能将一只手或双手放在奶瓶上。</p>\n<p>如果宝宝能够把手放到奶瓶上，就可以进行下一步的练习。大人只握住奶瓶底部，留下中间位置让宝宝去抓握，再视状况调整奶瓶角度。有时宝宝拒绝去抓握奶瓶，表示还存在依赖心理，父母可适时帮忙扶住奶瓶，让宝宝有被支持的感觉。</p>\n<p>如果宝宝一直不喜欢抓握奶瓶，则可以给奶瓶套上一些不同材质的东西，如小袜子或运动用的护手圈，吸引宝宝想要触摸的欲望，同时增加不同的触觉体验。</p>\n<h3 id=\"能力3：接受用汤匙喂食\"><a href=\"#能力3：接受用汤匙喂食\" class=\"headerlink\" title=\"能力3：接受用汤匙喂食\"></a>能力3：接受用汤匙喂食</h3><p>相比天生的吸吮能力来说，吞咽能力必须依靠后天的学习而获得。吞咽能力不仅影响到营养摄取及口腔发育，也关系到肠胃道消化功能和说话能力。因此，在宝宝能够添加辅食时（一般从4个月大起），就可开始练习用汤匙喂食。</p>\n<p><strong>准备工作：婴儿专用餐具、果泥、安静的环境</strong></p>\n<p>父母与宝宝面对面，让盛有果泥的汤匙出现在宝宝的视线内（可靠近宝宝唇边），同时发出一些声音，以嗅觉、视觉与味觉吸引宝宝的注意。然后，父母做出张开嘴巴吞入食物的动作（表情可以夸张一点），激发宝宝模仿的兴趣。</p>\n<p>在喂食时，先将汤匙平放在宝宝舌头上轻轻按一下，再把汤匙拿出，此时应鼓励宝宝做出合唇动作，以利用上唇把食物从汤匙上抿下来。刚开始宝宝可能会用舌头推出汤匙或去吸汤匙中的食物，父母一定要有耐心，陪着宝宝多多练习。</p>\n<p><strong>培养建议</strong></p>\n<p>如果宝宝无法顺利使用汤匙进食，父母可利用玩偶玩喂食游戏，用夸张的表情和声音示范吞入食物的动作，让宝宝因感觉有趣而愿意尝试。如果宝宝的口腔感觉过于敏感，可在喂食前先按摩其双颊及唇边肌肉。如果宝宝的合唇动作不佳，在进食时可用食指与中指轻压其上下唇，以帮助合唇。</p>\n<h2 id=\"Part3-7～12个月\"><a href=\"#Part3-7～12个月\" class=\"headerlink\" title=\"Part3 7～12个月\"></a>Part3 7～12个月</h2><h3 id=\"能力4：自己拿住奶瓶进食\"><a href=\"#能力4：自己拿住奶瓶进食\" class=\"headerlink\" title=\"能力4：自己拿住奶瓶进食\"></a>能力4：自己拿住奶瓶进食</h3><p>原本只是像配角一样扶住奶瓶的宝宝，现在已经能够像主角一样，依靠自己的力量拿住奶瓶，甚至能主动调整奶瓶的倾斜度。当然，即便宝宝已经具有自己拿奶瓶的能力，但是在宝宝喝奶时，大人最好仍陪在旁边，以避免发生呛奶等意外。</p>\n<p><strong>培养建议</strong></p>\n<p>如果宝宝还不能自己拿奶瓶，黄绮虹医师建议父母采取如下措施：</p>\n<ol>\n<li>在喂食时，父母先帮忙扶着奶瓶，顺势拉着宝宝的手扶住奶瓶，再慢慢移动自己的手至奶瓶底部。</li>\n<li>注意宝宝的喝奶姿势，避免呛奶或感染中耳炎。可在宝宝头上或上背部放一个枕头或软垫，使宝宝头部保持直立。</li>\n<li>可以考虑使用比较轻的奶瓶，以便宝宝更好地抓握。如果宝宝的手臂控制力不佳，则建议改用带有握把的奶瓶。</li>\n</ol>\n<h3 id=\"能力5：吞咽糊状辅食\"><a href=\"#能力5：吞咽糊状辅食\" class=\"headerlink\" title=\"能力5：吞咽糊状辅食\"></a>能力5：吞咽糊状辅食</h3><p>经过一段时间的汤匙喂食，相信大多数宝宝已经能够用舌头移动食物，并可吞下比较黏稠的食品。此时可以给宝宝提供煮得烂一点的粥、捣碎的香蕉、梨子等黏稠度较高的食物，鼓励宝宝的唇、舌做出主动进食的动作，甚至可把食物从不同方向的嘴角送入，让宝宝用舌头练习“舔”的动作。</p>\n<p><strong>培养建议</strong></p>\n<p>假如宝宝的吞咽动作一直不熟练，黄绮虹医师建议采取如下措施：</p>\n<ol>\n<li>如果宝宝一直吐着舌头将食物顶出，可用小而浅的汤匙向下轻压其舌头的中间部分，并以手指帮宝宝把下唇轻轻合上，让他吞下食物。</li>\n<li>如果宝宝的舌头移动有困难，可用手指或压舌板在宝宝的口腔内朝各边轻推，帮助宝宝练习移动舌头。</li>\n<li>大人使用舌头做出夸张的动作，并且故意让宝宝看到，激发其模仿的兴趣。</li>\n<li>可鼓励宝宝吃手与玩具，请放心，1岁之内吃手可以帮助口腔动作有更好的发展，不必担忧因此而养成坏习惯。</li>\n</ol>\n<h3 id=\"能力6：自己拿食物吃\"><a href=\"#能力6：自己拿食物吃\" class=\"headerlink\" title=\"能力6：自己拿食物吃\"></a>能力6：自己拿食物吃</h3><p>随着宝宝大小肌肉的发展及手眼协调能力的日益成熟，他自己已经能够拿着固体食物送入口中，这表示宝宝开始学习用牙龈咬固体食物。此时不需要牙齿，只是利用舌头把食物顶到嘴巴上方，再通过腭部做出上下咬合的动作，这一连串的动作有助于日后发展出比较成熟的咀嚼动作。</p>\n<p><strong>培养建议</strong></p>\n<p>为了让宝宝尽快拥有自己拿食物吃的能力，黄绮虹医师提醒父母注意以下几点：</p>\n<ol>\n<li>可以多提供一些半固体的食物，如小面包、起司片、凝胶状食物、煮得较烂的红萝卜条或切成条状的香蕉等，这些食物不需要真正的咬合即可溶化，能让宝宝轻松获得使用牙龈咬食物的乐趣。</li>\n<li>不要提供坚硬、小碎块的食物，如花生、糖果、爆米花等，以免呛到宝宝。另外，在宝宝躺着、哭闹及移动时，不要让宝宝单独进食。</li>\n<li>为了让宝宝的能力有更好的发展，不要怕孩子吃得一团糟。另外，还要留出足够的时间让宝宝去咬、吞，千万不要催促。</li>\n</ol>\n<h3 id=\"能力7：拉下头上的帽子\"><a href=\"#能力7：拉下头上的帽子\" class=\"headerlink\" title=\"能力7：拉下头上的帽子\"></a>能力7：拉下头上的帽子</h3><p>在练习穿衣服之前，“脱”是一个很重要的动作，当宝宝能主动拉下帽子时，就表示他有了主动参与的意愿，不再一直处于被动状态。请试着在宝宝头上戴上帽子，并抱着他照镜子，指着帽子说：“宝宝戴帽子。”然后示范把帽子拿开，并说：“宝宝摘帽子。”再帮宝宝戴上帽子，引导他自行拉下帽子。只要宝宝出现了拉扯动作，就算具备了该项能力。</p>\n<h2 id=\"Part4-13～18个月\"><a href=\"#Part4-13～18个月\" class=\"headerlink\" title=\"Part4 13～18个月\"></a>Part4 13～18个月</h2><h3 id=\"能力8：用学习杯喝水\"><a href=\"#能力8：用学习杯喝水\" class=\"headerlink\" title=\"能力8：用学习杯喝水\"></a>能力8：用学习杯喝水</h3><p>虽然吸吮是一种天生的反射动作，但是如果练习机会不足，依然可能出现障碍，特别是不足34周的早产生儿，更容易因肌肉张力不足而缺乏良好的吸吮能力。所以，在从吸吮奶嘴过渡到用杯子喝水时，更有必要让宝宝多多练习。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>市面上有许多采用不同设计的学习杯，可挑选有趣、鲜艳的样式，以吸引宝宝的学习兴趣。</li>\n<li>由于拿杯子需要使用到腕力，可挑选有把手的杯子，以方便宝宝抓握。</li>\n<li>喝水需要抿嘴、吞咽，如果宝宝在1岁之后还是经常流口水，则表示其嘴巴闭合功能较差，需要多练习抿嘴动作，父母平时可跟宝宝玩嘴巴游戏，如发“呣”“啊”等声音，以练习张嘴、闭嘴的动作。</li>\n<li>要增加嘴部肌肉的张力，可让宝宝玩吹乒乓球的游戏，或是多咀嚼一些比较硬的食物。</li>\n</ol>\n<h3 id=\"能力9：用吸管喝水\"><a href=\"#能力9：用吸管喝水\" class=\"headerlink\" title=\"能力9：用吸管喝水\"></a>能力9：用吸管喝水</h3><p>从用学习杯过渡到用吸管喝水，又是宝宝吸吮能力的一大进步。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>刚开始可用较细的吸管来练习，因为细、短的吸管更容易让宝宝的口腔肌肉发力，等到熟练之后，再换用长一点、粗一点的吸管。</li>\n<li>“吹”的动作比较容易学习，但“吸”的动作则相对困难一些。父母可用软包装的饮料帮助宝宝练习，当宝宝无法顺利做出“吸”的动作时，可稍微挤一下饮料盒，这样饮料就被挤到宝宝口中，让宝宝感受到“吸”的作用。</li>\n</ol>\n<p>口腔能力攸关其日后的构音，实在有必要多练习！</p>\n<h3 id=\"能力10：自行使用汤匙或叉子\"><a href=\"#能力10：自行使用汤匙或叉子\" class=\"headerlink\" title=\"能力10：自行使用汤匙或叉子\"></a>能力10：自行使用汤匙或叉子</h3><p>随着宝宝的小肌肉发展越来越好，可以放手让他练习自行使用汤匙或叉子进食。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可以先提供握柄比较粗、短的汤匙，以方便宝宝抓握。刚开始不必纠正宝宝的握姿，只要能够做出握汤匙的动作即可。随着宝宝的手腕动作越来越灵活，其抓握动作也会逐渐规范起来。</li>\n<li>在使用汤匙时，请注意让其他餐具保持稳定，因为宝宝刚使用汤匙时，从碗中舀起食物的动作更像“戳”，稍不留意就容易把碗打翻。因此，不妨使用防滑垫或底部加有止滑垫的餐具。</li>\n<li>为了让宝宝顺利用汤匙舀起食物，可先从泥状或糊状食物开始练习。如果要使用叉子，可将食物切成容易叉取的小块。</li>\n</ol>\n<h3 id=\"能力11：咀嚼半固体食物\"><a href=\"#能力11：咀嚼半固体食物\" class=\"headerlink\" title=\"能力11：咀嚼半固体食物\"></a>能力11：咀嚼半固体食物</h3><p>随着咀嚼能力的提升，宝宝的进食种类也随之增加，这样不但能够获取更加丰富而均衡的营养，还能丰富口腔经验，加速口腔肌肉发育，对日后的语言学习大有帮助。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可先让宝宝自行拿取入口即可溶化的食物，如牙饼，让他慢慢摸索吃东西的方法。</li>\n<li>逐渐提供小块、较软的食物让宝宝尝试，即便宝宝拒绝尝试，也不要很快放弃该食物，可以试着变换其他的拿取方式，只要宝宝愿意尝试，即使用手抓着吃也没关系。</li>\n<li>提供多样化食物，鼓励宝宝积极尝试，以丰富咀嚼经验，比如含有纤维质的食物。只要宝宝能吃上几口，就要及时给予鼓励，这样宝宝对于吃东西就有了良好的感受，进而愿意继续尝试。</li>\n</ol>\n<h3 id=\"能力12：表示尿湿了或已经排便\"><a href=\"#能力12：表示尿湿了或已经排便\" class=\"headerlink\" title=\"能力12：表示尿湿了或已经排便\"></a>能力12：表示尿湿了或已经排便</h3><p>在对宝宝进行如厕训练之前，最重要的就是他能够明确表达自己的生理状况，知道什么是尿尿或便便，并主动告诉父母。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>父母应尽量掌握宝宝的排泄状况，可通过宝宝的动作（如双脚交叉、扭动）、表情（涨红的脸）来加以判断，把握其排泄规律，准确预测需要换尿布的时间，并在适当时机先询问宝宝：“你是不是尿尿了？”让他理解尿尿与便便的意思是什么。</li>\n<li>在比较准确地掌握宝宝的排便规律之后，慢慢把更换尿布的时间提前，引导宝宝直接在坐便器上解决大小便，为日后的如厕训练预做准备。</li>\n</ol>\n<h3 id=\"能力13：用毛巾擦嘴\"><a href=\"#能力13：用毛巾擦嘴\" class=\"headerlink\" title=\"能力13：用毛巾擦嘴\"></a>能力13：用毛巾擦嘴</h3><p>养成良好的卫生习惯，是宝宝需要建立的生活规范之一。在吃完东西后，可引导宝宝主动用毛巾擦嘴，逐渐养成保持自身清洁的好习惯。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>进食前可在宝宝身边准备一条小方巾，以方便随时使用。</li>\n<li>吃完之后，不必急着让宝宝用毛巾擦嘴，可先让他用舌头舔去嘴边的渍痕，这也是建立本体觉的方式之一。让宝宝感受嘴边有残留饭粒，再用舌头灵活地舔去，舌头的活动能力得到强化，日后学习正确发音也更为顺畅。</li>\n<li>刚开始使用毛巾时，父母可轻拉宝宝的手拿毛巾，做出擦拭动作，让宝宝了解擦嘴巴的意义，慢慢熟练这一动作。</li>\n</ol>\n<h3 id=\"能力14：洗手\"><a href=\"#能力14：洗手\" class=\"headerlink\" title=\"能力14：洗手\"></a>能力14：洗手</h3><p>早日协助宝宝养成勤洗手的习惯，可以降低很多疾病的发生几率。除了教宝宝学会洗手之外，也应教导他外出回家后第一件事就是洗手，在饭前、便后或摸过脏东西后也要洗手。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>爱玩水可说是宝宝的天性，可以作为引导宝宝学习洗手的一大工具。</li>\n<li>事先分解洗手的步骤，一步步教会宝宝。比如先踩在椅子上够到洗手台——拉起衣服袖子——湿手+打肥皂+搓手——打开水龙头冲水——擦干手。</li>\n<li>在打肥皂时，可顺势教宝宝认识手掌、手背、各个指头及指缝。</li>\n<li>不论用扭还是用扳的方式打开水龙头，都是一种手指训练，可试着让宝宝自己来，以便早日学会独立洗手。</li>\n</ol>\n<h2 id=\"Part5-19～24个月\"><a href=\"#Part5-19～24个月\" class=\"headerlink\" title=\"Part5 19～24个月\"></a>Part5 19～24个月</h2><h3 id=\"能力15：用汤匙进食\"><a href=\"#能力15：用汤匙进食\" class=\"headerlink\" title=\"能力15：用汤匙进食\"></a>能力15：用汤匙进食</h3><p>当宝宝能自行用汤匙进食时，表示其手腕动作的成熟度已与成人相近，自理能力也已发展到一定的水准。此时对宝宝的要求可以高一些，不仅能够使用汤匙，还需要培养一些用餐礼仪，如吃东西时一手拿餐具，一手扶住碗；吃完才能离开餐桌；食物不能洒落太多等。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先带着宝宝练习使用汤匙，拉着他的手做出“舀”的动作，并协助其把汤匙中的食物送至口中。</li>\n<li>可搭配玩具进行练习，增强宝宝的学习动机。让宝宝从练习喂玩具娃娃开始，再运用到自己身上。</li>\n<li>平常可多玩一些运用到手腕动作的游戏，如铲沙子，增加手腕活动的灵活度。</li>\n<li>创造机会让宝宝与其他孩子一起用餐，增强其观察、模仿的意愿，尽快学会使用汤匙进食。</li>\n</ol>\n<h3 id=\"能力16：咀嚼固体食物\"><a href=\"#能力16：咀嚼固体食物\" class=\"headerlink\" title=\"能力16：咀嚼固体食物\"></a>能力16：咀嚼固体食物</h3><p>宝宝的口腔肌肉越来越灵活，加上牙齿的咀嚼能力日益提升，能吃的食物种类越来越丰富，对于均衡摄取各种营养大有帮助。需要注意的是，要随时提醒宝宝养成细嚼慢咽的习惯。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可提供切成片的苹果或稍微硬一点的饼干，让宝宝练习用门牙咬断、用舌往后送并且吞咽，逐渐养成先吞下一口、再吃一口的习惯。</li>\n<li>食物不要切得太细，多给宝宝提供练习机会，以学习咬断食物。比如肉条、烫过的西芹等切成小段的食品，都是宝宝练习咬断食物的好食材。</li>\n</ol>\n<h3 id=\"能力17：在大人协助下练习刷牙\"><a href=\"#能力17：在大人协助下练习刷牙\" class=\"headerlink\" title=\"能力17：在大人协助下练习刷牙\"></a>能力17：在大人协助下练习刷牙</h3><p>刷牙不仅是良好的卫生习惯，也能让幼儿提升手部运作的能力。虽然宝宝此时还不能刷得很好，不过重点在于让宝宝接受刷牙。因此，父母务必要有耐心，持续协助宝宝刷牙，直到他养成习惯为止。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>把牙刷放进口中，刚开始可能会让宝宝感觉不舒服，可先以牙刷套套在宝宝手指上，让他慢慢接受刷牙。一开始可以不用牙膏，避免造成宝宝不适，刷牙后直接用清水漱口即可。</li>\n<li>父母与宝宝一起刷牙，让他模仿父母的动作。由于刷牙牵涉手、嘴、眼的协调动作，所以不妨对着镜子练习，以便宝宝更好地掌握姿势。</li>\n<li>刷牙时先从前面的牙齿刷起，再刷后面的牙齿。</li>\n<li>鼓励宝宝自己刷牙很重要，但是碍于能力不足，宝宝刚开始很难真正刷干净，还需要父母的协助。因此，可以先让宝宝自己刷，最后再帮他从前到后完整地刷一次，确保口腔卫生。</li>\n</ol>\n<h3 id=\"能力18：在大人协助下脱外套、裤子及鞋子\"><a href=\"#能力18：在大人协助下脱外套、裤子及鞋子\" class=\"headerlink\" title=\"能力18：在大人协助下脱外套、裤子及鞋子\"></a>能力18：在大人协助下脱外套、裤子及鞋子</h3><p>在会穿衣裤之前，必须先学会脱衣裤，因为“脱”比“穿”的动作更容易。<br>可先让宝宝用玩偶进行练习，经过实际操作后再运用到自身。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>短袖衣服、短裤比长袖衣服、长裤更容易脱，建议从短裤、短袖衣服开始练习，不论用什么姿势，只要宝宝能顺利脱下衣服都可以。</li>\n<li>脱衣服需要运用到关节动作，可依照宝宝的习惯帮他分解各种动作，以开襟式衣服为例，先解开衣服扣子或拉链，脱之前把衣服往前拉，再把手伸离袖子。父母可适时提供协助，让宝宝对脱衣服建立自信心，并提升学习意愿。</li>\n<li>脱裤子时，先让他站着，协助他把裤子往下拉至大腿处，再让他坐下来，自己把裤子拉到脚踝处，然后把脚伸出裤管。</li>\n</ol>\n<h3 id=\"能力19：在大人协助下穿衣服\"><a href=\"#能力19：在大人协助下穿衣服\" class=\"headerlink\" title=\"能力19：在大人协助下穿衣服\"></a>能力19：在大人协助下穿衣服</h3><p>从容易穿脱的衣物开始练习，其中开襟式与套头式衣物的穿法不同，开襟式衣物比较容易穿脱，而套头式衣物则等宝宝两三岁时再练习。在开襟式衣物中，背心又比短袖衣物更方便练习。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先让宝宝分辨衣物的前后与正反面，协助他穿上一边，另外一边则可让他试着自己穿上。</li>\n<li>穿裤子时，先让宝宝坐着，把脚伸进裤管，再把裤子拉至大腿处，然后起身把裤子往上拉，接着做最后的整理工作。</li>\n<li>根据宝宝的能力发展，逐步提供难度高一点的衣物加以练习。</li>\n<li>要给宝宝留出足够的练习时间，不要因为急着出门或其他原因而催促宝宝，更不要因为宝宝穿得不好而责备他，那样会打击其自信心，进而丧失继续学习的动力。</li>\n</ol>\n<h3 id=\"能力20：帮忙做简单家务\"><a href=\"#能力20：帮忙做简单家务\" class=\"headerlink\" title=\"能力20：帮忙做简单家务\"></a>能力20：帮忙做简单家务</h3><p>不论收拾玩具或做其他家务，父母都应先带头做出表率，使宝宝有一个好的模仿、学习对象，提升参与的动机。另外，父母不要用成人标准去要求宝宝，只要宝宝愿意做，就应给予鼓励。<br>　　<br><strong>培养建议</strong></p>\n<ol>\n<li>在收拾玩具之前，要让宝宝知道玩具应该放在哪里，玩具的摆放位置最好是固定一处，让宝宝有明确的印象。每次玩玩具时，父母应陪着宝宝在固定的地方玩，并陪着他一起收拾。</li>\n<li>做其他家务也是一样，父母一边做，一边让宝宝在旁边观看，时间一长，宝宝也想自己做做看。此时可准备宝宝的专属工具，如小抹布，邀请他和父母一起擦桌子，事后给予及时鼓励。</li>\n</ol>\n<h3 id=\"能力21：练习如厕及表达需求\"><a href=\"#能力21：练习如厕及表达需求\" class=\"headerlink\" title=\"能力21：练习如厕及表达需求\"></a>能力21：练习如厕及表达需求</h3><p>如厕需求的表达需要宝宝的括约肌及排泄器官发育成熟后，才能感受到尿意与便意，再加上语言发展成熟，才能明确用语言表达出来。在这个过程中，父母一定要耐心陪伴，千万不可操之过急。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先为宝宝准备可爱有趣的坐便训练器，在父母上厕所时，可带着他一起进厕所，让他学习大人的动作，事先了解成人怎样如厕。</li>\n<li>尽量抓准宝宝大小便的频率，感觉宝宝差不多要排便的时候，可先询问他是否需要上厕所，然后让他在坐便训练器坐上三五分钟，如果能够顺利排尿排便，一定要加以鼓励，以建立其自信心。</li>\n<li>学习如厕的时间最好在夏天，万一弄脏衣裤也方便清洗。</li>\n<li>由于男女如厕方式不同，所以父母应共同承担起带子女学习上厕所的责任，让男孩女孩各自学习到合适的如厕方式。</li>\n</ol>\n<h2 id=\"Part6-25～36个月\"><a href=\"#Part6-25～36个月\" class=\"headerlink\" title=\"Part6 25～36个月\"></a>Part6 25～36个月</h2><h3 id=\"能力22：模仿梳头、刷牙、洗衣等至少3件事情\"><a href=\"#能力22：模仿梳头、刷牙、洗衣等至少3件事情\" class=\"headerlink\" title=\"能力22：模仿梳头、刷牙、洗衣等至少3件事情\"></a>能力22：模仿梳头、刷牙、洗衣等至少3件事情</h3><p><strong>培养建议</strong></p>\n<ol>\n<li>父母平时做这些事情的时候，不论自己梳洗还是帮宝宝做，都要尽量让宝宝看到，以便他对这些事情产生印象。</li>\n<li>很快，你会看到宝宝不时模仿大人的动作，比如给玩具娃娃梳头、刷牙等。这时，可在合适的时机（如早上起床后要梳头、吃过食物后要刷牙）主动把梳子、牙刷交到宝宝手上，让他对着镜子梳头、刷牙，或是在手洗贴身衣物时，让宝宝跟着一起洗自己的小手帕。</li>\n<li>刚开始宝宝的动作不会太熟练，但是只要他愿意做，就尽量给他创造做的机会。可以把一连串的动作拆解成几个步骤，让宝宝从最简单的动作做起。</li>\n</ol>\n<h3 id=\"能力23：上厕所会脱下裤子\"><a href=\"#能力23：上厕所会脱下裤子\" class=\"headerlink\" title=\"能力23：上厕所会脱下裤子\"></a>能力23：上厕所会脱下裤子</h3><p>厕所会脱裤子，这是如厕能力的再次提升。平日可穿松紧带式的裤子，以方便宝宝学习。每次带宝宝如厕时，可以一边做一边说：“先把外面的裤子拉下来，再拉下里面的小内裤。”等到上完厕所，再告诉宝宝：“要先拉上里面的小内裤，再拉上外面的裤子。”经过几次训练之后，宝宝就能熟悉脱、穿衣服的顺序，然后再慢慢训练他将衣服整齐地塞在裤子里。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>父母先示范如何使用双手，将拇指伸进裤子、然后抓住裤子的两侧，最后将裤子脱下。</li>\n<li>刚开始练习时，也许宝宝一时还不能把裤子脱到屁股底下。如果宝宝无法同时使用双手将裤子往下拉，那么可先教他将裤子的一边往下拉，随后再拉另一边，就这样重复拉扯，一直到脱下裤子为止。</li>\n<li>将裤子拉下来后，让宝宝坐在小椅子上，或靠着墙以支撑身体，便于脱下裤子。</li>\n<li>父母示范如何抬起一只脚，把裤管拉下，然后再换另一只脚，将另一只裤管拉下。</li>\n</ol>\n<h3 id=\"能力24：明确表示要上厕所\"><a href=\"#能力24：明确表示要上厕所\" class=\"headerlink\" title=\"能力24：明确表示要上厕所\"></a>能力24：明确表示要上厕所</h3><p><strong>培养建议</strong></p>\n<ol>\n<li>孩子是否能清楚表达自身的生理状况，与其表达能力有着密切关系，而表达能力需要平日一点一滴地积累，因此，协助宝宝拥有一流的表达能力非常重要。</li>\n<li>在陪宝宝进行如厕训练时，父母一定要有足够的耐心，就算宝宝做得不够好，比如刚表达完“要上厕所”的意思，裤子就已经湿了，或是还没有来得及走到厕所就已经尿出来了等，也要加以包容。</li>\n<li>不要因为如厕训练而训斥宝宝，否则容易让他对如厕一事产生恐惧，进而更难摆脱对尿布的依赖。</li>\n<li>父母需要多多用心观察，尽量协助宝宝掌握好如厕的时间，适时加以提醒，逐渐让宝宝知道什么时候上厕所最合适。</li>\n</ol>\n<h3 id=\"能力25：会穿没有鞋带的鞋子\"><a href=\"#能力25：会穿没有鞋带的鞋子\" class=\"headerlink\" title=\"能力25：会穿没有鞋带的鞋子\"></a>能力25：会穿没有鞋带的鞋子</h3><p>一开始可以协助宝宝把脚伸进鞋子内，留下黏上鞋扣的动作给宝宝做。然后让宝宝自己把脚伸进鞋内，让他体验不同动作的困难程度，再适时告诉他应该如何穿鞋。<br>　　<br><strong>准备材料：较大、较宽松、容易穿脱的鞋子（如使用魔鬼粘的鞋子）</strong></p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>让宝宝坐在小椅子上。</li>\n<li>学习分辨左右脚，看哪只脚应该套进哪只鞋。</li>\n<li>帮宝宝把鞋舌往外翻。</li>\n<li>示范如何把脚放进鞋子（先把脚尖穿进鞋内，脚跟再往下踩入鞋内），另一只脚做重复动作，让宝宝跟着做一遍。</li>\n</ol>\n<h3 id=\"能力26：熟练使用汤匙\"><a href=\"#能力26：熟练使用汤匙\" class=\"headerlink\" title=\"能力26：熟练使用汤匙\"></a>能力26：熟练使用汤匙</h3><p>一般来说，2～3岁宝宝的大小肌肉已经发展到一定程度，熟练使用汤匙进食应该不成问题。如果此时宝宝还是无法熟练使用汤匙，就要多创造机会让宝宝练习手腕动作。</p>\n<p><strong>准备材料：铲沙玩具及沙子</strong></p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>先让宝宝拿铲子任意铲沙。</li>\n<li>大人和宝宝比赛，看谁铲沙子铲得比较多。宝宝本来就喜欢玩沙子，再加上比赛的刺激心理，玩起来更是乐此不疲，这样就能有效练习手腕动作，进而顺利地使用汤匙进食。</li>\n</ol>\n<h3 id=\"能力27：会解开纽扣\"><a href=\"#能力27：会解开纽扣\" class=\"headerlink\" title=\"能力27：会解开纽扣\"></a>能力27：会解开纽扣</h3><p>脱衣服肯定需要解开衣服上的纽扣，毕竟我们的衣服不可能都是拉链式的。因此，会解开纽扣也是重要的自理能力之一。在学会解开扣子后，再去学习扣上纽扣的动作。</p>\n<p><strong>培养建议</strong></p>\n<ol>\n<li>可从大一些的纽扣开始练习，父母可先把纽扣穿过纽扣洞的一半，然后让宝宝完成最后的解开动作，等熟练之后，再让宝宝独立解纽扣。</li>\n<li>先让宝宝练习解开布偶衣服上的扣子，再练习解开自己衣物上的纽扣。</li>\n</ol>\n"},{"title":"白夜行：从容不迫的罪恶","url":"http://zhangqiang.work/posts/615201606/","content":"<blockquote>\n<p>“我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。我从来没有太阳，所以不怕失去。”</p>\n</blockquote>\n<p>合上书本，心中不由自主地想：这样的一本小说，是如何被构思出来的。</p>\n<p>作为一本推理小说，首先令我关注的是案件。全书中引入了大量案件，如开篇当铺老板死亡的一系列案子、江利子的案子、今枝的案子。可以很明显地感觉到，开篇的一系列案件是作者精心设计过的，预留了诸多伏笔，而且作者很巧妙的揭示了这些伏笔，但又不说破它。换句话说，东野圭吾并没有把他的读者当作傻瓜，他留给了读者足够的思考空间。</p>\n<p>推开故事发展、人物性格刻画的需求，单看各个案子的话，会觉得中间的所有案件几乎都索然无味，也明显缺乏设计。不过作者是个很懂得写作技巧的人，他用这一个个简单的案件将故事推进的同时，刻画了男女主角的性格特点，同时东野圭吾又让男女主角的故事在两条平行线中发展，仅仅通过些许暗示让两者产生关联。有趣的是，这“些许暗示”又被故意表露得如此明显。让读者心领神会，而后又带着淡淡地期待一直阅读下去。</p>\n<p>全书最令我欣赏的是其结构。若是我来构思一篇侦探推理小说，一定会绞尽脑汁设计一个精妙的犯罪手法，然后引导读者寻找凶手。而东野圭吾几乎在一开始便把凶手告诉了你。随着剧情的推进，你会一步步确信自己的猜测：“没错，凶手就是他”。作者及早地告诉了读者凶手，却隐去了犯罪动机及部分犯罪手法，类比其《嫌疑人x的献身》，后者则是一开始便告诉读者凶手及犯罪动机，隐去了犯罪手法。这正是东野圭吾写作方式的高明之处。真实的案件中，很有可能调查了成百上千人后，凶手偏偏是最后出现的路人甲。而在文学作品中若如此处理，显然会引来读者的谩骂。文学作品中的凶手，必然是作品行文中刻画过的人物。如果你尝试去构思用文字描述一起犯罪并把凶手隐藏到最后，就会发现很难做到。</p>\n<p>东野圭吾很好地把难点转移了。案件不必设计得极其精妙，推理逻辑也不必追求完美无缺，依然可以很好的将悬念留到最后。</p>\n<p>另一个巧妙之处便是对主角的处理。全书读下来就会发现，其实对主角——尤其是男主角桐原亮司——的正面描写很少。而看似相爱的男女主角更是仿若生活在两个世界。他们之间没有对话，貌似没有共同的故事。作者在推理小说中引入了两人稍显“虐心”的感情故事，更是将推理小说的写作难点完美的转移出去。仿佛全书的主旨得到了升华，会让人觉得这是一本探讨了人性善恶的书，是一本有思想深度的书。然而类比一些描写人性的纯文学作品就会发现，《白夜行》顶多只能算是一部还不错的推理小说，其文学性尚且差得远。</p>\n<p>我不热衷于讨论桐原亮司与唐泽雪穗的感情话题。这是作者为全书最大的留白。也许作者也犹疑如何定位两人的感情，于是只留暗示，不明确写作两人的感情。无论他们是相爱、相怜还是相互利用，都是解释得通的。就连假若“他们相爱，完全有条件在一起，却又不这么做”都是合情合理的。像“唐泽雪穗究竟喜欢谁”这样的话题，可以从诸多不同角度说出合理的解释。</p>\n<p>来谈几个细节。</p>\n<p>当我读到这段话的时候，我是带着一种被科普的心态的：</p>\n<blockquote>\n<p>人的肌肤拥有绝佳的记忆力。听说，一个人的肌肤会记住所承受过紫外线的量。所以，晒黑的肌肤就算白了回来，等到年纪大了，伤害依然会出现，黑斑就是这样来的。</p>\n</blockquote>\n<p>但等到全书读完，我才明白这段话的妙处。它正是对雪穗人生境遇的描写。雪穗的童年创伤正是晒黑的肌肤，必然在年纪大了时生出黑斑。</p>\n<p>还有开篇当铺老板死亡时，引发了老刑警笹垣怀疑的“松开的皮带”。作者用了不少笔墨来强调这事，到了最后解答案情时却懒得呼应它。</p>\n<p>再比如一处细节描写。当雪穗的母亲煤气中毒时，雪穗去找管理员田川并告诉他自己没带钥匙：</p>\n<blockquote>\n<p>田川敏夫看着西本雪穗苗条的背影走在草草铺设的小巷里。雪穗没有背小学生书包，只是提着红色塑料制手提书包。<br>每动一下，她身上便传出叮当作响的铃声。田川对于那是什么铃铛感到好奇，用心去看，但从外表看不出来。</p>\n</blockquote>\n<p>而后来雪穗与其家教正晴的对话：</p>\n<blockquote>\n<p>“好旧的钥匙圈啊。”正晴说。<br>“是呀。这个，那时候也串了家里的钥匙。可是偏偏就在那一天，我放在家里忘了带。”说着，她把钥匙放回口袋。<br>钥匙圈上的小铃铛发出了叮当的声响。 </p>\n</blockquote>\n<p>最后谈谈我对本书的价值观。</p>\n<p>不论出于什么样的家庭背景或有过什么样的童年创伤，雪穗从骨子里已然是一个“坏人”。我只想向自己确认，这种美丽的罪恶，是否就应该被大众从容地原谅？假若为这本书写个前传，桐原亮司的父亲也是因为童年创伤，承受了命运的不公呢？</p>\n<p><img src=\"/images/books/baiyexing.jpg\" alt=\"baiyexing\"></p>\n"},{"title":"HTTP 缓存知识整理","url":"http://zhangqiang.work/posts/128201601/","content":"<p>做一下 HTTP 缓存相关知识点的总结。</p>\n<h3 id=\"1-缓存命中\"><a href=\"#1-缓存命中\" class=\"headerlink\" title=\"1. 缓存命中\"></a>1. 缓存命中</h3><p>关于命中的概念如下：</p>\n<ul>\n<li><strong>缓存命中（cache hit）</strong> 用已有的副本为某些到达缓存的请求提供服务。</li>\n<li><strong>缓存未命中（cache miss）</strong> 一些到达缓存的请求由于没有副本可用，而被转发给原始服务器。</li>\n<li><strong>再验证（revalidation）</strong> 原始服务器的内容可能发生变化，缓存要不时检测其副本是否是服务器上最新的副本。</li>\n<li><strong>再验证命中/缓慢命中（revalidation hit / slow hit）</strong> 缓存对其副本进行再验证时， 会向原始服务器发起一个小的再验证请求，如果服务器返回304缓存再次将副本标识为新鲜的。 缓慢命中要比缓存命中慢，比缓存未命中快。</li>\n</ul>\n<p>考量命中率主要有两种方式：</p>\n<ul>\n<li><strong>缓存命中率</strong> 由缓存提供服务的请求所占的比例。对现在中等规模的缓存，40%的命中率是合理的。</li>\n<li><strong>字节命中率</strong> 缓存提供的字节在传输的所有字节中所占的比例。</li>\n</ul>\n<h3 id=\"2-处理过程\"><a href=\"#2-处理过程\" class=\"headerlink\" title=\"2. 处理过程\"></a>2. 处理过程</h3><p><img src=\"http_cache.png\" alt=\"http_cache\"></p>\n<h3 id=\"3-再验证\"><a href=\"#3-再验证\" class=\"headerlink\" title=\"3. 再验证\"></a>3. 再验证</h3><p>相关的 5 个条件首部：</p>\n<ul>\n<li><code>If-Modified-Since</code> ：通过比较过期日期进行再验证。</li>\n<li><code>If-None-Match</code> ：通过比较实体标签(ETag)进行再验证。</li>\n<li><code>If-Unmodified-Since</code> ：在进行部分文件的传输时，获取文件的其余部分之前用来确保文件未发生变化。</li>\n<li><code>If-Range</code> ：支持对不完整文档的缓存。</li>\n<li><code>If-Match</code> ：用于与Web服务器打交道时的并发控制。</li>\n</ul>\n<p>IMS请求：<code>If-Modified-Since</code> 再验证请求。只有自某个日期之后资源发生了变化的时候，IMS请求才会执行：返回新文档给缓存或304，以及新的过期日期。有些Web服务器只是将IMS日期和文档最后修改日期进行字符串比较。</p>\n<p>强弱验证器：只要内容发生变化，强验证器就会变化；内容的主要含义发生变化时，弱验证器会变化。服务器会用 <code>W/</code> 前缀来标识弱验证器。</p>\n<pre><code>ETag: W/&quot;v2.6&quot;\nIf-None-Match: W/&quot;v2.6&quot;\n</code></pre><p>如果服务器回送了一个 <code>ETag</code> ，HTTP1.1客户端就必须使用实体标签验证器。如果服务器只回送一个 <code>Last-Modified</code> 值，客户端就可以使用 <code>If-Modified-Since</code> 验证。如果两种方式都提供，客户端应该使用两种再验证方式。</p>\n<h3 id=\"4-控制缓存\"><a href=\"#4-控制缓存\" class=\"headerlink\" title=\"4. 控制缓存\"></a>4. 控制缓存</h3><ul>\n<li><strong>Cache-Control: no-store</strong> ：禁止缓存对响应进行复制。缓存会像非缓存代理服务器一样，像客户端发送一条 no-store 响应，然后删除对象。</li>\n<li><strong>Cache-Control: no-cache</strong> ：响应可以存储在本地缓存区中。只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。</li>\n<li><strong>Pragma: no-cache</strong> ：兼容HTTP1.0+</li>\n<li><p><strong>Cache-Control: max-age</strong> ：从服务器将文档传来之时起，可以认为此文档处于新鲜状态的秒数。 <code>s-maxage</code> 表示仅适用于公有缓存。服务器可以将最大使用期设置为 0 ，从而在每次访问时都刷新。</p>\n<pre><code>Cache-Control: max-age=3600\nCache-Control: s-maxage=3600\n</code></pre></li>\n<li><p><strong>Expires</strong> ：(不推荐使用) 指定实际的过期日期。HTTP设计者后来认为服务器时钟不同步或不正确，<br>所以最好还是使用剩余秒数来表示过期时间。</p>\n</li>\n<li><strong>Cache-Control: must-revalidate</strong> ：缓存在事先没有跟原始服务器进行再验证的情况下，<br>不能提供对象的陈旧副本。如果缓存进行新鲜度检查时原始服务器不可用，缓存必须返回<strong>504</strong>错误。</li>\n<li><strong>试探性过期</strong> ：缓存可以计算出一个试探性最大使用期。<em>LM-Factor算法</em></li>\n</ul>\n<p><strong>附表： Cache-Control</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Cache-Control: max-stale</td>\n<td style=\"text-align:left\">缓存可以随意提供过期文件(放松缓存规则)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: max-stale=s</td>\n<td style=\"text-align:left\">在时间 s 秒内，文档不能过期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: min-fresh=s</td>\n<td style=\"text-align:left\">至少在未来 s 秒内文档要保持新鲜(严格规则)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: max-age=s</td>\n<td style=\"text-align:left\">缓存无法返回缓存时间长于 s 秒的文档(严格规则)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: no-cache</td>\n<td style=\"text-align:left\">除非资源进行了再验证，否则客户端不接受已缓存的资源</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pragma: no-cache</td>\n<td style=\"text-align:left\">HTTP/1.0+ 同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: no-store</td>\n<td style=\"text-align:left\">缓存应该尽快从存储器中删除文档的所有痕迹</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cache-Control: only-if-cached</td>\n<td style=\"text-align:left\">只有当缓存中有副本存在时，客户端才会获取一份副本</td>\n</tr>\n</tbody>\n</table>\n<p><em>主要参考资料：《HTTP权威指南》</em></p>\n"},{"title":"JavaScript 知识整理","url":"http://zhangqiang.work/posts/1231201512/","content":"<p>2015年最后一天了，写本文以整理我对 JavaScript 的一些理解，试将零散的知识归总。此文非语法整理，内容偏中高级，如有纰漏或错误，请予以指正。</p>\n<h2 id=\"1-对象模型\"><a href=\"#1-对象模型\" class=\"headerlink\" title=\"1. 对象模型\"></a>1. 对象模型</h2><h3 id=\"1-1-数据类型\"><a href=\"#1-1-数据类型\" class=\"headerlink\" title=\"1.1. 数据类型\"></a>1.1. 数据类型</h3><p>在 JavaScript 的语法层面，除了 <code>undefined</code> 和 <code>null</code> 一切皆对象，字面量也是对象，而 <code>null</code> 的类型也是对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'foo'</span>.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"number\">3.1415926</span>.toFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 'object'</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript 语言中内置了一些对象用来辅助用户编程，它们均是 <code>函数对象</code> ，如：</p>\n<ul>\n<li>Function</li>\n<li>Object</li>\n<li>String</li>\n<li>Number</li>\n</ul>\n<p>解析引擎中创建了诸多内建类型，它们是实现 JavaScript 各类型的数据结构。</p>\n<p>基本类型的字面量创建方式会直接调用解析引擎来创建 JavaScript 对象，它不是内置函数对象的实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>对象(这里指语法层面的对象)、正则、数组等的字面量创建方式会调用内置函数对象来创建实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">foo = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>归纳如下：</p>\n<p><img src=\"javascript_types.png\" alt=\"javascript_types.png\"></p>\n<h3 id=\"1-2-函数对象\"><a href=\"#1-2-函数对象\" class=\"headerlink\" title=\"1.2. 函数对象\"></a>1.2. 函数对象</h3><p>任何JS对象均需要由函数对象创建。<strong>函数对象</strong>是在普通对象的基础上增加了内建的属性 <code>[[Call]]</code> 和 <code>[[Construct]]</code> ，这一过程由解释器完成，两个属性均指向解释器的内建函数：[[Call]] 用于函数调用，使用操作符 <code>()</code> 时执行；[[Construct]] 用于构造对象，使用操作符 <code>new</code> 时执行。</p>\n<p>语法层面上，函数对象也是由其它函数对象(或自己)创建的，使用 <code>function</code> 关键字可以创建用户自定义函数对象。最上游的对象是 <code>Function</code> 。</p>\n<p><img src=\"function_object.png\" alt=\"function_object.png\"></p>\n<p>当对象被创建后，解释器为对象增加 <code>constructor</code> 属性指向创建它的函数对象。</p>\n<h3 id=\"1-3-原型对象\"><a href=\"#1-3-原型对象\" class=\"headerlink\" title=\"1.3. 原型对象\"></a>1.3. 原型对象</h3><p>原型对象通常由内置函数对象 <code>Object</code> 创建，它通常是一个普通对象，但也可能是函数对象。</p>\n<p>任何对象都有内建属性 <code>[[Prototype]]</code> 用来指向其原型对象，有些解释器(如V8)会将其开放为 <code>__proto__</code> 属性供用户代码调用。函数对象有开放属性 <code>prototype</code> ，用来表示通过函数对象构建的对象的原型。</p>\n<p>以下条件总是为 true ：</p>\n<pre><code>函数对象.prototype === 该函数对象创建的对象.__proto__\n</code></pre><p>示例如下代码的原型关系：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foo = <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Foo.prototype.bar = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> Foo();</span><br></pre></td></tr></table></figure>\n<p>对象指向原型对象的层层链条构成<strong>原型链</strong>，对象查找属性时沿着原型链向上游找。</p>\n<p><img src=\"prototype1.png\" alt=\"prototype1.png\"></p>\n<p>通常情况下，<code>Function.prototype</code> 为解析引擎创建的空函数，<code>Object.prototype</code> 为解析引擎创建的空对象。</p>\n<h3 id=\"1-4-对象的关系\"><a href=\"#1-4-对象的关系\" class=\"headerlink\" title=\"1.4. 对象的关系\"></a>1.4. 对象的关系</h3><p>示例如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</span><br></pre></td></tr></table></figure>\n<p>再加上内置函数对象 String，其关系如下：</p>\n<p><img src=\"function_relation.png\" alt=\"function_relation.png\"></p>\n<p>有如下规律：</p>\n<ul>\n<li>所有函数对象的原型最终指向 Function.prototype ；</li>\n<li>所有普通对象(除 Object.prototype)的原型最终指向 Object.prototype，而 Object.prototype 的原型为 null ；</li>\n<li>所有 constructor 最终指向 Function ，包括它自己；</li>\n<li>所有原型对象的 constructor 的 prototype 指向自己，普通对象不具备该特性。</li>\n</ul>\n<h2 id=\"2-执行模型\"><a href=\"#2-执行模型\" class=\"headerlink\" title=\"2. 执行模型\"></a>2. 执行模型</h2><p>函数生命周期包括：</p>\n<p><img src=\"function_lifecycle.png\" alt=\"function_lifecycle.png\"></p>\n<h3 id=\"2-1-执行上下文\"><a href=\"#2-1-执行上下文\" class=\"headerlink\" title=\"2.1. 执行上下文\"></a>2.1. 执行上下文</h3><p><code>执行上下文(Execution Context)</code> 是对可执行代码的抽象，某特定时刻下它们是等价的。发生函数调用的时候，正在执行的上下文被中断并将新的执行上下文压入执行上下文栈中，调用结束后(return 或 throw Error)新的上下文从栈中弹出并继续执行之前的上下文。栈底总是<code>全局执行上下文</code>：</p>\n<p><img src=\"ec_stack.png\" alt=\"ec_stack.png\"></p>\n<p><strong>变量对象(Variable Object)</strong>是执行上下文中的一种数据结构，用来存储：</p>\n<ul>\n<li>变量</li>\n<li>函数声明</li>\n<li>形参</li>\n</ul>\n<p>变量对象为抽象概念，其实现分两种情况：</p>\n<p>一、全局执行上下文中的变量对象使用全局对象自身实现，因此全局变量可以通过相应的变量对象访问到：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'foo'</span></span><br><span class=\"line\">alert(<span class=\"built_in\">window</span>.foo);</span><br></pre></td></tr></table></figure>\n<p>二、函数执行上下文中的变量对象为<strong>活动对象(Activation Object)</strong>，用户代码无法直接访问它。</p>\n<p><img src=\"ec_ao_vo.png\" alt=\"ec_ao_vo.png\"></p>\n<h3 id=\"2-2-函数执行过程\"><a href=\"#2-2-函数执行过程\" class=\"headerlink\" title=\"2.2. 函数执行过程\"></a>2.2. 函数执行过程</h3><p>函数执行前会先为其创建执行环境：</p>\n<p><img src=\"exe1.png\" alt=\"exe1.png\"></p>\n<p>示例以下代码的执行过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">foo1, foo2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo3 = <span class=\"string\">'foo3'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo4 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foo5 = <span class=\"string\">'foo5'</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo6</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    foo6();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(<span class=\"string\">'foo1'</span>, <span class=\"string\">'foo2'</span>, <span class=\"string\">'more'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>1) 创建执行环境</strong></p>\n<p>该过程重点是创建 <code>活动对象</code> 的命名属性：</p>\n<p><img src=\"exe2.png\" alt=\"exe2.png\"></p>\n<p><strong>2) 依次执行代码</strong></p>\n<p><img src=\"exe3.png\" alt=\"exe3.png\"></p>\n<p>理解了函数执行过程便可以解释局部变量的初始化时机问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'global'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(foo);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"string\">'local'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n<p>同时也解释了两种函数声明方式的区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo();  <span class=\"comment\">// foo</span></span><br><span class=\"line\">bar();  <span class=\"comment\">// TypeError: bar is not a function.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>根据活动对象的属性填充顺序，也可以解释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(x); <span class=\"comment\">// function</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">alert(x); <span class=\"comment\">// 10</span></span><br><span class=\"line\">x = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">alert(x); <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-作用域\"><a href=\"#2-2-作用域\" class=\"headerlink\" title=\"2.2. 作用域\"></a>2.2. 作用域</h3><p>示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> z = <span class=\"number\">3</span>;</span><br><span class=\"line\">        alert(x +  y + z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>其作用域相关的属性创建过程如下：</p>\n<p><img src=\"scope.png\" alt=\"scope.png\"></p>\n<p>其中函数对象的内部属性 <code>[[Scope]]</code> 在某些解释器中实现为 <code>__parent__</code> 并开放给用户代码。执行上下文中的 <code>Scope</code> 属性构成 <strong>作用域链</strong>，其实现未必像图中所示使用数组，也可以使用链表等数据结构，ECMAScript 规范对解释器的实现机制未做规定。</p>\n<p>变量查找时沿着作用域链向上游查找。例如在函数 bar 中查找 x 时，会依次查找：1）bar的活动对象；2）foo的活动对象；3）全局对象，最终在全局对象中找到。</p>\n<h3 id=\"2-3-闭包\"><a href=\"#2-3-闭包\" class=\"headerlink\" title=\"2.3. 闭包\"></a>2.3. 闭包</h3><p>ECMAScript 使用静态词法作用域：当函数对象创建时，其上层上下文数据(变量对象)保存在内部属性 [[Scope]] 中，即函数在创建的时候就保存了上层上下文的作用域链，不管函数会否被调用。因此<strong>所有的函数都是一个闭包</strong>(除了 Function 构造器创建的函数)。不过，出于优化目的，当函数不使用自由变量时，引擎实现可能并不保存上层作用域链。</p>\n<blockquote>\n<p><strong>自由变量</strong>是在函数内使用的一种变量：它既不是函数的参数，也不是其局部变量。</p>\n</blockquote>\n<p>[[Scope]] 属性是指向变量对象的引用，同一上下文创建的多个闭包<strong>共用</strong>该变量对象。因此，某个闭包对其变量的修改会影响到其他闭包对其变量的读取：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fooClosure;</span><br><span class=\"line\"><span class=\"keyword\">var</span> barClosure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    fooClosure = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> ++x; &#125;;</span><br><span class=\"line\">    barClosure = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> --x; &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(fooClosure()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">alert(barClosure()); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>函数执行时，变量对象的属性变化如下：</p>\n<p><img src=\"closure.png\" alt=\"closure.png\"></p>\n<p>可以解释此常犯错的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; k++) &#123;</span><br><span class=\"line\">    data[k] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(k);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">data[<span class=\"number\">0</span>](); <span class=\"comment\">// 3, 而不是 0</span></span><br><span class=\"line\">data[<span class=\"number\">1</span>](); <span class=\"comment\">// 3, 而不是 1</span></span><br><span class=\"line\">data[<span class=\"number\">2</span>](); <span class=\"comment\">// 3, 而不是 2</span></span><br></pre></td></tr></table></figure>\n<p>通过创建多个变量对象(方式一)或使用函数对象的属性(方式二)可以解决此问题：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; k++) &#123;</span><br><span class=\"line\">    data[k] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(x);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;)(k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">3</span>; k++) &#123;</span><br><span class=\"line\">    (data[k] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"built_in\">arguments</span>.callee.x);</span><br><span class=\"line\">    &#125;).x = k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从理论角度讲，ECMAScript 中所有的函数都是闭包。然而实践中，以下函数才算是闭包：</p>\n<ul>\n<li>即使创建它的上下文已经销毁，它仍然存在</li>\n<li>代码中引用了自由变量</li>\n</ul>\n<h2 id=\"3-其它\"><a href=\"#3-其它\" class=\"headerlink\" title=\"3. 其它\"></a>3. 其它</h2><h3 id=\"3-1-不使用var声明并不能创建全局变量\"><a href=\"#3-1-不使用var声明并不能创建全局变量\" class=\"headerlink\" title=\"3.1. 不使用var声明并不能创建全局变量\"></a>3.1. 不使用var声明并不能创建全局变量</h3><p>不使用 var 关键字创建的只是全局对象的属性(全局执行上下文中的变量对象使用全局对象自身实现)，它并不是一个变量。可以用如下代码检测区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">alert(b); <span class=\"comment\">// Can't find variable: b</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-三种函数类型\"><a href=\"#3-2-三种函数类型\" class=\"headerlink\" title=\"3.2. 三种函数类型\"></a>3.2. 三种函数类型</h3><p>1) <strong>函数声明</strong>在程序级别或另一函数的函数体：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">globalFD</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">innerFD</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2) <strong>函数表达式</strong>在表达式的位置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</span><br><span class=\"line\">[<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;];</span><br><span class=\"line\"><span class=\"number\">1</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = (foo % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">    ? <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"number\">0</span>); &#125;</span><br><span class=\"line\">    : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar 为函数表达式：</span></span><br><span class=\"line\">foo(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'foo.bar'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>函数表达式的作用是避免对变量对象造成污染。</p>\n<p>3）<strong>Function构造器</strong>的 [[Scope]] 属性中只包含全局对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'alert(x); alert(y);'</span>);</span><br><span class=\"line\">    bar(); <span class=\"comment\">// 10, \"y\" is not defined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-6-closures\" target=\"_blank\" rel=\"external\">closures</a></li>\n</ul>\n"},{"title":"Redis 中的流程","url":"http://zhangqiang.work/posts/1224201512/","content":"<style type=\"text/css\">.posts-expand .post-body img{border:0;}</style>\n\n<h2 id=\"1-redis-服务启动流程：\"><a href=\"#1-redis-服务启动流程：\" class=\"headerlink\" title=\"1. redis 服务启动流程：\"></a>1. redis 服务启动流程：</h2><p><img src=\"redis_main.svg\" alt=\"redis_main\"></p>\n<h2 id=\"2-初始化服务器的流程：\"><a href=\"#2-初始化服务器的流程：\" class=\"headerlink\" title=\"2. 初始化服务器的流程：\"></a>2. 初始化服务器的流程：</h2><p><img src=\"redis_initserver.svg\" alt=\"redis_initserver\"></p>\n"},{"title":"Redis 中的数据结构：散列表","url":"http://zhangqiang.work/posts/1221201512/","content":"<p>散列表是 redis 中的基础数据结构之一， redis 中的键空间、redisDB、 <code>SET</code>、<code>ZSET</code>、集群节点映射等，都是通过散列表实现的。结构体定义为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dict &#123;</span><br><span class=\"line\">    dictType *type;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *privdata;</span><br><span class=\"line\">    dictht ht[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> rehashidx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> iterators;</span><br><span class=\"line\">&#125; dict;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>*type</code> 指针指向 dict 的类型，例如它是一个 ZSET(zsetDictType) 还是一个集群节点(clusterNodesDictType)。实际上它们的存储结构是相同的，之所以区分类型，是因为其散列函数、key 的比较(或销毁)策略是不同的。因而所谓的 dict 类型，不过是一组函数指针罢了：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dictType &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">int</span> <span class=\"params\">(*hashFunction)</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key)</span></span>;       <span class=\"comment\">// 散列函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*keyDup)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key);    <span class=\"comment\">// key 复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*valDup)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *obj);    <span class=\"comment\">// value 复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*keyCompare)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);     <span class=\"comment\">// key 比较函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*keyDestructor)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">void</span> *key);    <span class=\"comment\">// key 销毁函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*valDestructor)(<span class=\"keyword\">void</span> *privdata, <span class=\"keyword\">void</span> *obj);    <span class=\"comment\">// value 销毁函数</span></span><br><span class=\"line\">&#125; dictType;</span><br></pre></td></tr></table></figure>\n<p>数组 <code>ht</code> 中存放的是 dict 的实际散列表结构 <code>dictht</code> ：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dictht &#123;</span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used;</span><br><span class=\"line\">&#125; dictht;</span><br></pre></td></tr></table></figure>\n<p>之所以存放 2 个，是为了实现<strong>渐进式再散列(incremental rehashing)</strong>。</p>\n<p><code>**table</code> 指向桶结构 <code>dictEntry</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dictEntry &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">        <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">    &#125; v;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> dictEntry *next;</span><br><span class=\"line\">&#125; dictEntry;</span><br></pre></td></tr></table></figure>\n<p>当发生冲突时，dict 首先会使用<strong>分离链接法</strong>将散列到同一个值的所有元素保留到一个表中。当到了一定时机，它会通过<strong>再散列</strong>进行扩展。</p>\n<p><img src=\"redis-dict.svg\" alt=\"redis-dict.svg\"></p>\n<p>Redis 还提供了遍历散列表用的迭代器，它支持安全(遍历期间可以增加元素等操作)、不安全两种方式遍历散列表：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> dictIterator &#123;</span><br><span class=\"line\">    dict *d;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> index;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> table, safe;</span><br><span class=\"line\">    dictEntry *entry, *nextEntry;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> fingerprint;</span><br><span class=\"line\">&#125; dictIterator;</span><br></pre></td></tr></table></figure>\n<p>todo 渐进式再散列</p>\n<p><em>(使用的源码基于 redis 3.0.5)</em> </p>\n"},{"title":"Redis 数据存储结构关系","url":"http://zhangqiang.work/posts/1217201512/","content":"<p>总起来看，redis 的数据存储结构大致是这样的：</p>\n<p><img src=\"overview.png\" alt=\"overview.png\"></p>\n<p>它使用全局变量 <code>server</code> 来存储服务器信息：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> redisServer server;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>redisServer</code> 包含了数据存储结构、事件、集群、持久化等诸多信息，和数据存储结构相关的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> redisServer &#123;</span><br><span class=\"line\">    redisDb *db;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dbnum;</span><br><span class=\"line\">    <span class=\"comment\">// ... 等等等</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>由此可见 redis 服务是由 redis 数据库(redisDb)构成的。redisServer 中存储了 redisDb 数组，其初始化大小可配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set the number of databases. The default database is DB 0, you can select</span></span><br><span class=\"line\"><span class=\"comment\"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span><br><span class=\"line\"><span class=\"comment\"># dbid is a number between 0 and 'databases'-1</span></span><br><span class=\"line\">databases 16</span><br></pre></td></tr></table></figure>\n<p>默认值为 <code>16</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_DEFAULT_DBNUM     16</span></span><br></pre></td></tr></table></figure>\n<p><code>server</code> 在初始化的时候会对每一个数据库做初始化操作，因此配置时用不着的数据库尽量关闭：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">server.dbnum = REDIS_DEFAULT_DBNUM;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">server.db = zmalloc(<span class=\"keyword\">sizeof</span>(redisDb)*server.dbnum);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class=\"line\">    server.db[j].dict = dictCreate(&amp;dbDictType,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    server.db[j].expires = dictCreate(&amp;keyptrDictType,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    server.db[j].blocking_keys = dictCreate(&amp;keylistDictType,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ... 等等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>redisDb 的结构并不复杂：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> redisDb &#123;</span><br><span class=\"line\">    dict *dict;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> avg_ttl;</span><br><span class=\"line\">    <span class=\"comment\">// ... 等</span></span><br><span class=\"line\">&#125; redisDb;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>dict *dict</code> 用来存储键值对数据。也就是说 <code>SET foo bar</code> 命令实际会将 foo 存入 <code>dict</code> 结构的 key 中。Redis 用来存储值的对象是 <code>redisObject</code> ，它是对 redis 不同数据类型的抽象：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> redisObject &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> type:<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> encoding:<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr;</span><br><span class=\"line\">    <span class=\"comment\">// ... 等</span></span><br><span class=\"line\">&#125; robj;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>type</code> 代表一个 redis 数据类型(抽象给用户使用的)，<code>encoding</code> 代表 redis 内部对该类型的实际编码方式(底层的数据结构实现)， <code>*ptr</code> 是指向实际值的指针。</p>\n<p><code>redisObject</code> 的类型为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_STRING 0  <span class=\"comment\">/* 字符串 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_LIST 1    <span class=\"comment\">/* 列表 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_SET 2     <span class=\"comment\">/* 哈希 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ZSET 3    <span class=\"comment\">/* 集合 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_HASH 4    <span class=\"comment\">/* 有序集合 */</span></span></span><br></pre></td></tr></table></figure>\n<p>编码方式有：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_RAW 0        <span class=\"comment\">/* 原始sds方式 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_INT 1        <span class=\"comment\">/* 整数 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_HT 2         <span class=\"comment\">/* 散列表 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_ZIPMAP 3     <span class=\"comment\">/* (已弃用) */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_LINKEDLIST 4 <span class=\"comment\">/* 双链表 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_ZIPLIST 5    <span class=\"comment\">/* 压缩列表 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_INTSET 6     <span class=\"comment\">/* 整型集合 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_SKIPLIST 7   <span class=\"comment\">/* 跳跃表 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REDIS_ENCODING_EMBSTR 8     <span class=\"comment\">/* 内嵌式sds */</span></span></span><br></pre></td></tr></table></figure>\n<p>通常一个 redis 的对象类型都会对应两个以上的编码方式，它们的详细对应关系为：</p>\n<p><img src=\"type_encoding.svg\" alt=\"type_encoding.svg\"></p>\n<p>命令示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ SET foo abc</span><br><span class=\"line\">$ OBJECT ENCODING foo  </span><br><span class=\"line\"><span class=\"string\">\"embstr\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ SET bar abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz</span><br><span class=\"line\">$ OBJECT ENCODING bar</span><br><span class=\"line\"><span class=\"string\">\"raw\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ SET foobar 123</span><br><span class=\"line\">$ OBJECT ENCODING foobar</span><br><span class=\"line\"><span class=\"string\">\"int\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ SET foobar 12345678901234567890</span><br><span class=\"line\">$ OBJECT ENCODING foobar</span><br><span class=\"line\"><span class=\"string\">\"embstr\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ SET foobar 1.0</span><br><span class=\"line\">$ OBJECT ENCODING foobar</span><br><span class=\"line\"><span class=\"string\">\"embstr\"</span></span><br></pre></td></tr></table></figure>\n<p><em>(使用的源码基于 redis 3.0.5)</em></p>\n"},{"title":"Redis 中的数据结构：HyperLogLog","url":"http://zhangqiang.work/posts/1216201512/","content":""},{"title":"Redis 中的数据结构：双链表","url":"http://zhangqiang.work/posts/1215201512/","content":"<p>Redis 实现了通用的双链表作为其基础数据结构之一。双链表是 redis 列表类型的实际存储方式之一，同时双链表还被其它功能模块广泛使用。它由三部分组成：</p>\n<ul>\n<li>节点</li>\n<li>迭代器</li>\n<li>链表自身</li>\n</ul>\n<p>其<strong>节点</strong>如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> listNode &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> listNode *prev;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> listNode *next;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\">&#125; listNode;</span><br></pre></td></tr></table></figure>\n<p>包含指向前驱、后继节点的指针及当前节点存储的值。这个值的类型为 <code>void*</code> ，说明 redis 并不限制链表存储的数据类型。</p>\n<p><strong>链表</strong>的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"built_in\">list</span> &#123;</span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p><code>list</code> 中保存了指向表头和表尾的指针，因此在执行 <code>LPUSH</code>、<code>RPUSH</code>、<code>RPOP</code> 等命令时是非常快的(θ(1))；其中还保存了 len 值，因此 <code>LLEN</code> 命令的执行也是非常快的。</p>\n<p><img src=\"double_link_list.svg\" alt=\"double_link_list.svg\"></p>\n<p>另外，它还保存了三个函数指针 dup、free 和 match 用来复制、释放和对比链表，这样做是因为节点值的类型是不确定的，具体的实现方法交由用户代码灵活扩展处理。比如如果用户定义了 match 函数的实现，则采用它来替换默认使用 <code>==</code> 的比较策略：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match(node-&gt;value, key)) &#123;</span><br><span class=\"line\">        listReleaseIterator(iter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == node-&gt;value) &#123;</span><br><span class=\"line\">        listReleaseIterator(iter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类似地，释放一个链表时会优先调用指定的 free 函数后再完成其它释放过程：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>迭代器</strong>的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> listIter &#123;</span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\">&#125; listIter;</span><br></pre></td></tr></table></figure>\n<p>其中，direction 可以向前或向后：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AL_START_HEAD 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> AL_START_TAIL 1</span></span><br></pre></td></tr></table></figure>\n<p>可以通过：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>获得迭代器，通过：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>进行遍历。另外，还可以将指针移到表头或表尾：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewind</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewindTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><em>(使用的源码基于 redis 3.0.5)</em></p>\n"},{"title":"Redis 中的数据结构：简单动态字符串（SDS）","url":"http://zhangqiang.work/posts/1214201512/","content":"<p>Redis 底层使用 <strong>SDS</strong> (Simple Dynamic Strings) 作为字符串类型的存储方式之一，其结构非常简单，直接看源码即可了解个大概：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *sds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> sdshdr &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中，结构体 sdshdr 中的 len 用来存储字符串的实际长度，free 用来存储预留空间的长度，buf 用来存储字符串内容。</p>\n<p>与一般动态字符串直接使用结构体表示字符串的实现方式不同，sds 仍使用 <code>char*</code> 表示字符串，只是其指向的位置略微特殊而已。通过创建 sds 的函数，可以看出这种特殊性：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sdshdr *sh;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过源代码了解到，实际存储字符串相关信息的仍然是 <code>struct</code> （sdshdr），sds 其实是返回指向其 buf 数组的首个元素的指针。借用 redis 作者的描述：</p>\n<pre><code>+--------+-------------------------------+-----------+\n| Header | Binary safe C alike string... | Null term |\n+--------+-------------------------------+-----------+\n         |\n         `-&gt; Pointer returned to the user.\n</code></pre><p>另外值得注意的是，通过：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh-&gt;len = initlen;</span><br><span class=\"line\">sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>可以看出，redis 在首次创建字符串时并不会额外分配 <code>free</code> 空间，而是按字符串实际的大小申请内存空间来创建，这和 Java 中 StringBuffer 等预先分配一定容量(通常16char)的策略是不同的。</p>\n<p><strong>sds 是二进制安全的</strong>，字符串中间可以包含 <code>\\0</code> 。获取 sds 的长度时通常不能直接使用 strlen 而是使用 sdslen 读取其 len 值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sdshdr *sh = (<span class=\"keyword\">void</span>*)(s-(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sdshdr)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>唐老师给我画了一张图，可以帮助理解：</p>\n<p><img src=\"sds.png\" alt=\"sds\"></p>\n<p>最后一个值得关注的问题是，sds 是如何扩容的？这一过程在 sdsMakeRoomFor 函数中实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsMakeRoomFor</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> addlen)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sdshdr *sh, *newsh;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">free</span> = sdsavail(s);</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len, newlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt;= addlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    len = sdslen(s);</span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sdshdr)));</span><br><span class=\"line\">    newlen = (len+addlen);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class=\"line\">        newlen *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        newlen += SDS_MAX_PREALLOC;</span><br><span class=\"line\">    newsh = zrealloc(sh, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sdshdr)+newlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    newsh-&gt;<span class=\"built_in\">free</span> = newlen - len;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newsh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，当扩展后的长度比 <code>SDS_MAX_PREALLOC</code> 小时，预留一倍的容量；否则增加 <code>SDS_MAX_PREALLOC</code> 的容量。当前版本中：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_MAX_PREALLOC (1024*1024)</span></span><br></pre></td></tr></table></figure>\n<p>理解了这些便很容易知道 redis <code>APPEND</code> 命令的实现细节：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ SET foo bar</span><br><span class=\"line\">$ APPEND foo blahblah</span><br></pre></td></tr></table></figure>\n<p>当然，这种预先分配容量的方式，虽然能减少内存分配的次数，提高 <code>APPEND</code> 操作的性能，但会造成一定的内存占用，而且此部分内存不会主动释放。 </p>\n<p><em>(使用的源码基于 redis 3.0.5)</em></p>\n"},{"title":"Ajax 是否是独立线程中的异步请求？","url":"http://zhangqiang.work/posts/1210201512/","content":"<p>刚刚脑子中突然间产生的一个疑问，使用了这么久的 Ajax 技术，是不是<strong>独立线程中的异步请求</strong> ？也就是说，浏览器是否会为它开启一个独立的线程发起请求，并在成功后执行回调函数。整个过程应该是非阻塞的。</p>\n<p>通常我们知道 <code>setTimeout</code> 函数会将执行代码压入下一次 Event Loop 中执行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'foofoo'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'barbar'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'foobar'</span>);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"settimeout.png\" alt=\"setTimeout\"></p>\n<p>那么 <code>Ajax</code> 是否也是如些？想要验证这个问题非常简单，执行下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(<span class=\"string\">'http://baidu.com'</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果出现跨域请求错误，说明 Ajax 是独立线程的异步请求，如果浏览器假死，说明它只是被压入了下一次 Event Loop 中。</p>\n<p>答案是后者，Ajax 请求只是被推迟到下一次事件循环中执行，当前事件循环仍然可以阻塞其执行，然而在本次循环内，它可以达到非堵塞的效果。</p>\n"},{"title":"Redis 持久化方案","url":"http://zhangqiang.work/posts/1207201512/","content":"<p>Redis 中提供了不同的持久化选项：</p>\n<ul>\n<li><code>RDB</code> 会定时地保存数据集快照；</li>\n<li><code>AOF</code> 记录下服务器收到的每一条“写”操作，并在服务启动时通过依次执行这些操作重建数据集。AOF 文件过大时，Redis 会对其重写；</li>\n<li>可以关闭持久化功能，使数据仅保存在内存中；</li>\n<li>同时开启 <code>RDB</code> 和 <code>AOF</code> 。服务重启时会使用 <code>AOF</code> 重建数据。</li>\n</ul>\n<p>RDB 优点：</p>\n<ul>\n<li>单文件存储，适合按时间点做不同版本的数据备份，同时也适合做灾难恢复；</li>\n<li>提供更好的性能，父进程不进行IO操作，而是fork子进程完成；</li>\n<li>数据集很大时相比 AOF 其启动速度更快。</li>\n</ul>\n<p>RDB 缺点：</p>\n<ul>\n<li>由于是按时间周期保存的，意外宕机会导致最近时间点内的数据丢失；</li>\n<li>数据量过大时，fork操作可能占用大量系统资源导致服务短暂阻塞（几毫秒甚至一秒）；</li>\n</ul>\n<p>AOF 优点：</p>\n<ul>\n<li>默认每秒同步一次(<code>fsync</code> 策略)，因此只会意外丢失一秒内的数据；</li>\n<li>AOF 记录是 <code>append only</code> 的，不怕意外宕机。即使只写了一半操作也很容易使用 <code>redis-check-aof</code> 工具恢复；</li>\n<li>AOF 文件过大时，Redis 会自动在后台进行重写。</li>\n<li>AOF 文件依次保存了所有的操作记录，它很容易理解或解析。</li>\n</ul>\n<p>AOF 缺点：</p>\n<ul>\n<li>相同数据时，AOF 通常比 RDB 文件更大；</li>\n<li>不同的 <code>fsync</code> 策略可能导致 AOF 比 RDB 慢；</li>\n<li>因为是重新执行命令来恢复数据，某些命令可能导致很罕见的 Bug，而这类 Bug 在 RDB 中不会存在。</li>\n</ul>\n"},{"title":"Redis 中的命令","url":"http://zhangqiang.work/posts/1203201512/","content":"<p>Redis 中有五种常用数据结构，它们都有对应的操作命令：</p>\n<p><img src=\"redis.png\" alt=\"redis\"></p>\n<p><a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"external\">[当前最新的所有命令]</a></p>\n<h2 id=\"1-字符串\"><a href=\"#1-字符串\" class=\"headerlink\" title=\"1. 字符串\"></a>1. 字符串</h2><p>Redis 中 <code>STRINGs</code> 用来存储三种类型：</p>\n<ul>\n<li>字符串</li>\n<li>整数</li>\n<li>浮点数</li>\n</ul>\n<p>整数和浮点数可增减。<strong>整数</strong>范围为平台的长整型范围(如，64位系统中为有符号的64位整型)；<strong>浮点数</strong>采用 IEEE 754 双精度浮点数。</p>\n<p><strong>增减命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">INCR</td>\n<td style=\"text-align:left\"><code>INCR key-name</code> 将当前 key 对应的值加 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DECR</td>\n<td style=\"text-align:left\"><code>DECR key-name</code> 将当前 key 对应的值减 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">INCRBY</td>\n<td style=\"text-align:left\"><code>INCRBY key-name amount</code> 将当前 key 对应的值加上指定的整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DECRBY</td>\n<td style=\"text-align:left\"><code>DECRBY key-name amount</code> 将当前 key 对应的值减去指定的整数值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">INCRBYFLOAT</td>\n<td style=\"text-align:left\"><code>INCRBYFLOAT key-name amount</code> 将当前 key 对应的值加上指定的浮点值</td>\n</tr>\n</tbody>\n</table>\n<p>如果尝试在空字符串或不存在的 key 上调用 <code>INCR*</code> 或 <code>DECR*</code> ，当前 key 值会被当作 <code>0</code> 来处理：</p>\n<p><img src=\"incr_empty.png\" alt=\"incr_empty\"></p>\n<p>如果尝试在非整数或浮点数上调用 <code>INCR*</code> 或 <code>DECR*</code> ，会抛出 error ：</p>\n<p><img src=\"incr_error.png\" alt=\"incr_error\"></p>\n<p><strong>操纵字符串命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">APPEND</td>\n<td style=\"text-align:left\"><code>APPEND key-name value</code> 拼接字符串 value 至指定 key 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GETRANGE</td>\n<td style=\"text-align:left\"><code>GETRANGE key-name start end</code> 截取从 start 到 end 的子串(闭区间)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SETRANGE</td>\n<td style=\"text-align:left\"><code>SETRANGE key-name offset value</code> 从 offset 开始添加 value 子串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GETBIT</td>\n<td style=\"text-align:left\"><code>GETBIT key-name offset</code> 获取 offset 处的 bit 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SETBIT</td>\n<td style=\"text-align:left\"><code>SETBIT key-name offset value</code> 设置 offset 处的 bit 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BITCOUNT</td>\n<td style=\"text-align:left\"><code>BITCOUNT key-name [start end]</code> 计算 string 占了多少位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BITOP</td>\n<td style=\"text-align:left\"><code>BITOP operation dest-key key-name [key-name ...]</code> 位运算，结果存入 dest-key 中。 operation 包括 AND, OR, XOR, NOT</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<p><img src=\"setrange.png\" alt=\"setrange\"></p>\n<h2 id=\"2-列表\"><a href=\"#2-列表\" class=\"headerlink\" title=\"2. 列表\"></a>2. 列表</h2><p><code>LISTs</code> 中存储有序的 <code>STRING</code> 序列。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">RPUSH</td>\n<td style=\"text-align:left\"><code>RPUSH key-name value [value...]</code> 向 list 尾部(右)添加值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LPUSH</td>\n<td style=\"text-align:left\"><code>LPUSH key-name value [value...]</code> 向 list 首部(左)添加值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RPOP</td>\n<td style=\"text-align:left\"><code>RPOP key-name</code> 移除并返回最右侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LPOP</td>\n<td style=\"text-align:left\"><code>LPOP key-name</code> 移除并返回最左侧的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LINDEX</td>\n<td style=\"text-align:left\"><code>LINDEX key-name offset</code> 返回指定 offset 处的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LRANGE</td>\n<td style=\"text-align:left\"><code>LRANGE key-name start end</code> 返回从 start 到 end 处的值(闭区间)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LTRIM</td>\n<td style=\"text-align:left\"><code>LTRIM key-name start end</code> 截取 list ，只保留从 start 到 end 的值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Blocking操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">BLPOP</td>\n<td style=\"text-align:left\"><code>BLPOP key-name [key-name ...] timeout</code> 返回第一个非空列表中最左侧的值，或一直等待 timeout 秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BRPOP</td>\n<td style=\"text-align:left\"><code>BRPOP key-name [key-name ...] timeout</code> 返回第一个非空列表中最右侧的值，或一直等待 timeout 秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RPOPLPUSH</td>\n<td style=\"text-align:left\"><code>RPOPLPUSH source-key dest-key</code> 将 source 中最右侧的值放入 dest 的左侧，并返回该值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BRPOPLPUSH</td>\n<td style=\"text-align:left\"><code>BRPOPLPUSH source-key dest-key timeout</code> 将 source 中最右侧的值放入 dest 的左侧，并返回该值。如果 source 为空，一直等待 timeout 秒。</td>\n</tr>\n</tbody>\n</table>\n<p>以上命令在操作消息队列或任务队列时非常常用。使用示例：</p>\n<p><img src=\"brpop.png\" alt=\"brpop\"></p>\n<p>当右侧的终端执行命令后，左侧输出上图结果，否则会一直等待 20 秒超时并返回 <code>nil</code> 。</p>\n<h2 id=\"3-集合\"><a href=\"#3-集合\" class=\"headerlink\" title=\"3. 集合\"></a>3. 集合</h2><p><code>SETs</code> 用来保存唯一、无序的项。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SADD</td>\n<td style=\"text-align:left\"><code>SADD key-name item [item ...]</code> 添加条目并返回实际加入的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SREM</td>\n<td style=\"text-align:left\"><code>SREM key-name item [item ...]</code> 删除条目并返回删除的数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SISMEMBER</td>\n<td style=\"text-align:left\"><code>SISMEMBER key-name item</code> 检测某条目是否在 set 中(0否1是)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SCARD</td>\n<td style=\"text-align:left\"><code>SCARD key-name</code> 返回 set 中条目的总数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SMEMBERS</td>\n<td style=\"text-align:left\"><code>SMEMBERS key-name</code> 返回所有条目</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SRANDMEMBER</td>\n<td style=\"text-align:left\"><code>SRANDMEMBER key-name [count]</code> 随机返回1个或多个条目</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SPOP</td>\n<td style=\"text-align:left\"><code>SPOP key-name</code> 随机删除并返回一个条目</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SMOVE</td>\n<td style=\"text-align:left\"><code>SMOVE source-key dest-key item</code> 如果条目存在，将其从 source 移至 dest</td>\n</tr>\n</tbody>\n</table>\n<p><strong>拼接、操纵命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SDIFF</td>\n<td style=\"text-align:left\"><code>SDIFF key-name [key-name ...]</code> 返回第一个 set 中的条目，该条目不在任何其它的 set 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SDIFFSTORE</td>\n<td style=\"text-align:left\"><code>SDIFFSTORE dest-key key-name [key-name ...]</code> 同上条命令，但将结果保存在 dest-key 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SINTER</td>\n<td style=\"text-align:left\"><code>SINTER key-name [key-name ...]</code> 返回指定 set 中条目的交集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SINTERSTORE</td>\n<td style=\"text-align:left\"><code>SINTERSTORE dest-key key-name [key-name ...]</code> 返回指定 set 中条目的交集并保存在 dest-key 中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUNION</td>\n<td style=\"text-align:left\"><code>SUNION key-name [key-name ...]</code> 返回指定 set 中条目的并集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUNIONSTORE</td>\n<td style=\"text-align:left\"><code>SUNIONSTORE dest-key key-name [key-name ...]</code> 返回指定 set 中条目的并集并保存在 dest-key 中</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<p><img src=\"sdiff.png\" alt=\"sdiff\"></p>\n<h2 id=\"4-哈希\"><a href=\"#4-哈希\" class=\"headerlink\" title=\"4. 哈希\"></a>4. 哈希</h2><p><code>HASHes</code> 用来存储一组键值对。</p>\n<p><strong>增加、删除命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">HMGET</td>\n<td style=\"text-align:left\"><code>HMGET key-name key [key ...]</code> 获取指定 key 下的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HMSET</td>\n<td style=\"text-align:left\"><code>HMSET key-name key value [key value ...]</code> 给指定 key 设置值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HDEL</td>\n<td style=\"text-align:left\"><code>HDEL key-name key [key ...]</code> 删除指定键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HLEN</td>\n<td style=\"text-align:left\"><code>HLEN key-name</code> 获取键值对的总数</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<p><img src=\"hash_common.png\" alt=\"hash_common\"></p>\n<p><strong>批量操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">HEXISTS</td>\n<td style=\"text-align:left\"><code>HEXISTS key-name key</code> 检测 key 是否存在</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HKEYS</td>\n<td style=\"text-align:left\"><code>HKEYS key-name</code> 获取所有的 key</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HVALS</td>\n<td style=\"text-align:left\"><code>HVALS key-name</code> 获取所有的 value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HGETALL</td>\n<td style=\"text-align:left\"><code>HGETALL key-name</code> 获取所有的 key-value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HINCRBY</td>\n<td style=\"text-align:left\"><code>HINCRBY key-name key increment</code> 指定 key 对应的值增加整数 increment 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HINCRBYFLOAT</td>\n<td style=\"text-align:left\"><code>HINCRBYFLOAT key-name key increment</code> 指定 key 对应的值增加浮点数 increment 值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"5-有序集合\"><a href=\"#5-有序集合\" class=\"headerlink\" title=\"5. 有序集合\"></a>5. 有序集合</h2><p><code>ZSET</code> 存储一组成员条目到其得分的映射。成员或得分均可以作为获取或扫描条件。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ZADD</td>\n<td style=\"text-align:left\"><code>ZADD key-name score member [score member ...]</code> 增加指定了分数的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREM</td>\n<td style=\"text-align:left\"><code>ZREM key-name member [member ...]</code> 删除成员并返回删除的条数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZCARD</td>\n<td style=\"text-align:left\"><code>ZCARD key-name</code> 返回成员总数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZINCRBY</td>\n<td style=\"text-align:left\"><code>ZINCRBY key-name increment member</code> 增加指定成员的得分值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZCOUNT</td>\n<td style=\"text-align:left\"><code>ZCOUNT key-name min max</code> 获取 min 到 max 得分范围的成员数量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZRANK</td>\n<td style=\"text-align:left\"><code>ZRANK key-name member</code> 获取成员所在的下标索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZSCORE</td>\n<td style=\"text-align:left\"><code>ZSCORE key-name member</code> 获取指定成员的得分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZRANGE</td>\n<td style=\"text-align:left\"><code>ZRANGE key-name start stop [WITHSCORES]</code> 获取 start 至 stop 间的成员(可选地获取对应得分)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>获取、删除指定范围数据</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ZREVRANK</td>\n<td style=\"text-align:left\"><code>ZREVRANK key-name member</code> 对应 ZRANK 命令，返回成员的反序索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREVRANGE</td>\n<td style=\"text-align:left\"><code>ZREVRANGE key-name start stop [WITHSCORES]</code> 对应 ZRANGE，反序</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZRANGEBYSCORE</td>\n<td style=\"text-align:left\"><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code> 根据得分范围获取成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREVRANGEBYSCORE</td>\n<td style=\"text-align:left\"><code>ZREVRANGEBYSCOREkey max min [WITHSCORES] [LIMIT offset count]</code> ZRANGEBYSCORE命令的反序结果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREMRANGEBYRANK</td>\n<td style=\"text-align:left\"><code>ZREMRANGEBYRANK key-name start stop</code> 删除指定下标范围的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZREMRANGEBYSCORE</td>\n<td style=\"text-align:left\"><code>ZREMRANGEBYSCORE key-name min max</code> 删除指定得分范围的成员</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZINTERSTORE</td>\n<td style=\"text-align:left\"><code>ZINTERSTORE dest-key numkeys key [key ...] [WEIGHTS weight [weight...]] [AGGREGATE (SUM or MIN or MAX)]</code> ZSET上的交集操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZUNIONSTORE</td>\n<td style=\"text-align:left\"><code>ZUNIONSTORE dest-key numkeys key [key ...] [WEIGHTS weight [weight...]] [AGGREGATE (SUM or MIN or MAX)]</code> ZSET上的并集操作</td>\n</tr>\n</tbody>\n</table>\n<p>其中，<code>ZINTERSTORE</code> 和 <code>ZUNIONSTORE</code> 的参数 <code>numkeys</code> 表示后面将跟多少个集合作为入参。某些客户端实现(如python)可能省略该参数，因为它可以在函数内计算该值。</p>\n<p><code>ZINTERSTORE</code> 使用示例：</p>\n<p><img src=\"zinterstore.png\" alt=\"zinterstore\"></p>\n<p>其执行过程如下：</p>\n<p><img src=\"zinterstore_detail.png\" alt=\"zinterstore_detail\"></p>\n<p><code>ZUNIONSTORE</code> 使用示例：</p>\n<p><img src=\"zunionstore.png\" alt=\"zunionstore\"></p>\n<p>其执行过程如下：</p>\n<p><img src=\"zunionstore_detail.png\" alt=\"zunionstore_detail\"></p>\n<p>ZSET 和 SET 取交集示例：</p>\n<p><img src=\"zunionstore_with_set.png\" alt=\"zunionstore_with_set\"></p>\n<p>其执行过程如下：</p>\n<p><img src=\"zunionstore_with_set_detail.png\" alt=\"zunionstore_with_set_detail\"></p>\n<h2 id=\"6-发布-订阅\"><a href=\"#6-发布-订阅\" class=\"headerlink\" title=\"6. 发布/订阅\"></a>6. 发布/订阅</h2><p>Redis 中实现了发布/订阅模式。</p>\n<p><strong>基本命令</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">示例及说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SUBSCRIBE</td>\n<td style=\"text-align:left\"><code>SUBSCRIBE channel [channel ...]</code> 订阅指定的通道</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNSUBSCRIBE</td>\n<td style=\"text-align:left\"><code>UNSUBSCRIBE [channel [channel ...]]</code> 取消订阅</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PUBLISH</td>\n<td style=\"text-align:left\"><code>PUBLISH channel message</code> 发布消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PSUBSCRIBE</td>\n<td style=\"text-align:left\"><code>PSUBSCRIBE pattern [pattern ...]</code> 订阅指定匹配模式的通道</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PUNSUBSCRIBE</td>\n<td style=\"text-align:left\"><code>PUNSUBSCRIBE [pattern [pattern ...]]</code> 取消订阅匹配模式的通道</td>\n</tr>\n</tbody>\n</table>\n<p>应减少使用 Redis 提供的此模式，存在两个问题：</p>\n<ol>\n<li>订阅者读消息的速度较慢，会导致 Redis 保存着大量的缓冲，继而导致其性能下降；</li>\n<li>订阅者断开连接至重连成功之间发送的消息将会丢失。</li>\n</ol>\n<p>一个小例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lilei = redis.createClient();</span><br><span class=\"line\"><span class=\"keyword\">var</span> hanmeimei = redis.createClient();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">lilei.on(<span class=\"string\">'subscribe'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel</span>) </span>&#123;</span><br><span class=\"line\">    hanmeimei.publish(<span class=\"string\">'classroom'</span>, <span class=\"string\">'My name is Hanmeimei.'</span>);</span><br><span class=\"line\">    hanmeimei.publish(<span class=\"string\">'classroom'</span>, <span class=\"string\">'What\\'s your name?'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">lilei.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel, message</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">    count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am Lilei.'</span>);</span><br><span class=\"line\">        lilei.unsubscribe();</span><br><span class=\"line\">        lilei.end();</span><br><span class=\"line\">        hanmeimei.end();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">lilei.subscribe(<span class=\"string\">'classroom'</span>); <span class=\"comment\">// channel</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<p><img src=\"pubsub.png\" alt=\"pubsub\"></p>\n<h2 id=\"7-排序\"><a href=\"#7-排序\" class=\"headerlink\" title=\"7. 排序\"></a>7. 排序</h2><p><code>SORT</code> 用来给 list, set(或 zset) 排序。例如：</p>\n<p><img src=\"sort.png\" alt=\"sort\"></p>\n<p>完整的定义为：</p>\n<blockquote>\n<p>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern …]] [ASC|DESC] [ALPHA] [STORE destination]</p>\n</blockquote>\n<p>其中：</p>\n<ul>\n<li><code>DESC</code> 用来倒序排列</li>\n<li><code>ALPHA</code> 用来进行字符串排序</li>\n<li><code>LIMIT</code> 用来限制返回结果数</li>\n</ul>\n<p><code>SORT</code> 还可以实现类似关系数据库的外键查询，或跳过某元素等等更高级的功能。例如：</p>\n<p><img src=\"sort_more.png\" alt=\"sort_more\"></p>\n"},{"title":"关于 JavaScript 数字的那些事","url":"http://zhangqiang.work/posts/1103201511/","content":"<p>本文总结 JavaScript 语言中和数字相关的语言特性、缺陷与陷阱及使用技巧。相关基础内容请参考语言规范，本文只涉及较容易被疏忽的方面。首先分享一个经验：我在使用 JavaScript 做大数计算或高精度计算时有个原则：<strong>不要使用 JavaScript 做这件事情！</strong> 如果某个运算过程你可以选择在 Java 中或 JavaScript 中完成，<strong>尽可能不要使用 JavaScript 做数学运算！</strong></p>\n<p>本文所有示例内容在如下环境测试：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">v4.0.0</span><br><span class=\"line\">$ node -p process.versions.v8</span><br><span class=\"line\">4.5.103.30</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<pre><code>Safari 版本 9.0 (11601.1.56)\n</code></pre><h2 id=\"1-数字字面值也是对象\"><a href=\"#1-数字字面值也是对象\" class=\"headerlink\" title=\"1. 数字字面值也是对象\"></a>1. 数字字面值也是对象</h2><p>在 JavaScript 中，数字的字面值也是对象。可以使用它直接调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">3.1415926</span>.toFixed(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"string\">'3.1416'</span></span><br></pre></td></tr></table></figure>\n<p>然而使用整数直接调用方法会抛出 <code>SyntaxError</code> ，这是因为解释器不能正确解析，它试图将点操作符解释成浮点数的一部分：</p>\n<p><img src=\"syntaxerror.png\" alt=\"SyntaxError\"></p>\n<p>克服这种情况非常简单，有下面三种方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123.</span>.toString();</span><br><span class=\"line\"><span class=\"number\">123</span> .toString();</span><br><span class=\"line\">(<span class=\"number\">123</span>).toString();</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-两个特殊数值：NaN-和-Infinity\"><a href=\"#2-两个特殊数值：NaN-和-Infinity\" class=\"headerlink\" title=\"2. 两个特殊数值：NaN 和 Infinity\"></a>2. 两个特殊数值：NaN 和 Infinity</h2><h3 id=\"2-1-NaN\"><a href=\"#2-1-NaN\" class=\"headerlink\" title=\"2.1. NaN\"></a>2.1. NaN</h3><p><code>NaN</code> 代表“不是一个数字”，而它的类型却是 <code>number</code> 。实际使用中，它通常产生自——从表单取数据并转换成数字类型：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'age'</span>).value;</span><br><span class=\"line\"><span class=\"built_in\">Number</span>(age); <span class=\"comment\">// 用户输入 'abc' 时此处则为 `NaN`</span></span><br></pre></td></tr></table></figure>\n<p>识别 <code>NaN</code> 不能依赖等同判断( <code>===</code> )，甚至普通的相等判断( <code>==</code> )也不行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ Number(<span class=\"string\">'1.2x'</span>) === NaN</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\">$ Number(<span class=\"string\">'abc'</span>) == NaN</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>需要使用 <code>isNaN</code> 方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ isNaN(NaN)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>然而此方法会尝试将其参数动态转换成 <code>number</code> 类型再判断，因此对于 <code>string</code> 或 <code>object</code> 等类型的检测，它通常会返回 <code>true</code> :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"string\">'xyz'</span>);    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>([<span class=\"string\">'abc'</span>]);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(&#123;&#125;);       <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>([<span class=\"number\">123</span>]);    <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>为了正确的检测出 <code>NaN</code> 可以使用一个小技巧，它基于这样一个事实：目前只有 <code>NaN</code> 是不等于自身的对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRealNaN</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x !== x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRealNaN(<span class=\"literal\">NaN</span>));   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRealNaN(&#123;&#125;));    <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isRealNaN(<span class=\"string\">'foo'</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>更为正统的方式是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isRealNaN</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，在实现了 ECMAScript 6 的解释器环境中，也可以使用 <code>Number.isNaN()</code> 方法。</p>\n<h3 id=\"2-2-Infinity\"><a href=\"#2-2-Infinity\" class=\"headerlink\" title=\"2.2. Infinity\"></a>2.2. Infinity</h3><p><code>Infinity</code> 实际开发中出现的频率似乎并不高。它代表无穷大，对应的还有 <code>-Infinity</code> 代表无穷小。看几个例子即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> / <span class=\"number\">0</span>              <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> + <span class=\"number\">1</span>         <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> + <span class=\"literal\">Infinity</span>  <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"literal\">Infinity</span> - <span class=\"literal\">Infinity</span>  <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-数字的显示方式\"><a href=\"#3-数字的显示方式\" class=\"headerlink\" title=\"3. 数字的显示方式\"></a>3. 数字的显示方式</h2><p>1) 整数位数超过 21 位时显示成科学计数法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">1234567890123456789012</span></span><br><span class=\"line\"><span class=\"number\">1.2345678901234568e+21</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"number\">123456789012345678901</span></span><br><span class=\"line\"><span class=\"number\">123456789012345680000</span></span><br></pre></td></tr></table></figure>\n<p>2) 以 <code>0.</code> 开头，后面跟着超过 5 个零时，显示成科学计数法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">0.0000001</span></span><br><span class=\"line\"><span class=\"number\">1e-7</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"number\">0.000001</span></span><br><span class=\"line\"><span class=\"number\">0.000001</span></span><br></pre></td></tr></table></figure>\n<p>3) 其它情况下正常显示。</p>\n<h2 id=\"4-总是不准的数学运算\"><a href=\"#4-总是不准的数学运算\" class=\"headerlink\" title=\"4. 总是不准的数学运算\"></a>4. 总是不准的数学运算</h2><p>如果你有一定的 JavaScript 开发经验，一定遇到过浮点数算不准确的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"number\">0.2</span> * <span class=\"number\">0.2</span> === <span class=\"number\">0.04</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>然而事情似乎并不只是发生在浮点数身上：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">9007199254740992</span> + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">9007199254740992</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"number\">9007199254740992</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">9007199254740994</span></span><br></pre></td></tr></table></figure>\n<p>这是因为事实上 JavaScript 中的一切数字实际存储的均为 64 bit 浮点数，采用 IEEE 754 规范。</p>\n<h2 id=\"5-不尽如人意的四舍五入\"><a href=\"#5-不尽如人意的四舍五入\" class=\"headerlink\" title=\"5. 不尽如人意的四舍五入\"></a>5. 不尽如人意的四舍五入</h2><blockquote>\n<p>toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。</p>\n</blockquote>\n<p>以上是 w3school 对 <code>toFixed()</code> 方法的解释，然而此方法并不尽如人意。</p>\n<p>当数字大于 21 位时，<code>toFixed()</code> 方法只是调用 <code>toString()</code> 返回科学计数法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ (1234567890123456789012).toFixed(2)</span><br><span class=\"line\"><span class=\"string\">'1.2345678901234568e+21'</span></span><br></pre></td></tr></table></figure>\n<p>由于浮点数精度问题，<code>toFixed()</code> 方法实际上只能正确做到“四舍六入”，对于“五”，它的处理看上去并不那么精确：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"number\">1.105</span>.toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"string\">'1.10'</span></span><br></pre></td></tr></table></figure>\n<p>关于此方法还有“四舍六入五成双”的解释：</p>\n<ol>\n<li>被修约的数字小于5时，该数字舍去；</li>\n<li>被修约的数字大于5时，则进位；</li>\n<li>被修约的数字等于5时，要看5前面的数字，若是奇数则进位，若是偶数则将5舍掉，即修约后末尾数字都成为偶数；若5的后面还有不为“0”的任何数，则此时无论5的前面是奇数还是偶数，均应进位。</li>\n</ol>\n<p>然而这也并不准确，可以参考下面的结果：</p>\n<pre><code>1.105   &apos;1.10&apos;\n1.115   &apos;1.11&apos;\n1.125   &apos;1.13&apos;\n1.135   &apos;1.14&apos;\n1.145   &apos;1.15&apos;\n1.155   &apos;1.16&apos;\n1.165   &apos;1.17&apos;\n1.175   &apos;1.18&apos;\n1.185   &apos;1.19&apos;\n1.195   &apos;1.20&apos;\n</code></pre><p>有种比较流行的<strong>修正方法</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myToFixed</span>(<span class=\"params\">value, precision</span>) </span>&#123;</span><br><span class=\"line\">    precision = precision || <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pow = <span class=\"built_in\">Math</span>.pow(<span class=\"number\">10</span>, precision);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"built_in\">Math</span>.round(value * pow) / pow).toFixed(precision);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它的计算结果看上去准确多了：</p>\n<pre><code>1.105   &apos;1.11&apos;\n1.115   &apos;1.12&apos;\n1.125   &apos;1.13&apos;\n1.135   &apos;1.14&apos;\n1.145   &apos;1.15&apos;\n1.155   &apos;1.16&apos;\n1.165   &apos;1.17&apos;\n1.175   &apos;1.18&apos;\n1.185   &apos;1.19&apos;\n1.195   &apos;1.20&apos;\n</code></pre><p>然而这个世界对程序员并没有那么善意：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(myToFixed(<span class=\"number\">2.135</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 输出 2.13</span></span><br></pre></td></tr></table></figure>\n<p>最后，我就不告诉你IE7的结果不尽相同了。而其它浏览器的计算结果是否和我的环境相同，我也不敢告诉你答案，因为我不确定。至于如何完全正确地四舍五入，我并没有答案，也有人采用转成字符串进而进行正则匹配的方法，这在特定的场合下也许可行，但很难写出通用的方法。</p>\n<h2 id=\"6-取随机整数\"><a href=\"#6-取随机整数\" class=\"headerlink\" title=\"6. 取随机整数\"></a>6. 取随机整数</h2><p>JavaScript 中缺少产生随机整数的方法，但是可以用 <code>Math.random()</code> 自行实现。参考代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextInt</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret &gt; n || ret &lt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">        ret = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>产生的随机数分布的还算均匀。使用如下代码测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">10000</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = nextInt(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (foo[s]) &#123;</span><br><span class=\"line\">            foo[s] = foo[s] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            foo[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">2</span>);</span><br><span class=\"line\">test(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<p><img src=\"nextint.png\" alt=\"nextint\"></p>\n<p><strong>参考资料：</strong></p>\n<ul>\n<li><a href=\"http://www.2ality.com/2012/04/number-encoding.html\" target=\"_blank\" rel=\"external\">How numbers are encoded in JavaScript</a></li>\n</ul>\n"},{"title":"Java8特性 - Lambda表达式","url":"http://zhangqiang.work/posts/1030201510/","content":"<p>Lambda表达式并不是什么新概念，Java8中引入它主要解决只有单一方法的匿名类使用起来过于丑陋、晦涩的问题。不说废话。假设有这样一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Sex &#123;</span><br><span class=\"line\">        MALE, FEMALE</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    LocalDate birthday;</span><br><span class=\"line\">    Sex gender;</span><br><span class=\"line\">    String emailAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想从一组 <code>Person</code> 中打印特定年龄的，代码看起来是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersonsOlderThan</span><span class=\"params\">(List&lt;Person&gt; roster, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.getAge() &gt;= age) &#123;</span><br><span class=\"line\">            p.printPerson();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果查找年龄的算法变了，你可能会把代码改成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersonsWithinAgeRange</span><span class=\"params\">(</span><br><span class=\"line\">    List&lt;Person&gt; roster, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt;= p.getAge() &amp;&amp; p.getAge() &lt; high) &#123;</span><br><span class=\"line\">            p.printPerson();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时你意识到，算法的改变总是会导致修改上面的代码，为了应对将来可能的变化，你想到了把查找 <code>Person</code> 的算法从中剥离出来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersons</span><span class=\"params\">(</span><br><span class=\"line\">    List&lt;Person&gt; roster, CheckPerson tester)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</span><br><span class=\"line\">            p.printPerson();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时只需要针对不同的查找算法提供不同的实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CheckPerson</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckPersonEligibleForSelectiveService</span> <span class=\"keyword\">implements</span> <span class=\"title\">CheckPerson</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p.gender == Person.Sex.MALE &amp;&amp;</span><br><span class=\"line\">            p.getAge() &gt;= <span class=\"number\">18</span> &amp;&amp;</span><br><span class=\"line\">            p.getAge() &lt;= <span class=\"number\">25</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用的时候，只需要实例化特定的实现类并传入方法即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printPersons(roster, <span class=\"keyword\">new</span> CheckPersonEligibleForSelectiveService());</span><br></pre></td></tr></table></figure>\n<p>然而这样的方式会引入一堆“很小”的实现类。于是你发现这种场景下使用匿名类更为合适：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printPersons(</span><br><span class=\"line\">    roster,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CheckPerson() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">                &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">                &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-Lambda-表达式的使用\"><a href=\"#1-Lambda-表达式的使用\" class=\"headerlink\" title=\"1. Lambda 表达式的使用\"></a>1. Lambda 表达式的使用</h3><p><code>CheckPerson</code> 是一个<strong>函数接口</strong>，它是指只有一个抽象方法的接口(友情提示: 没有任何方法的接口叫<strong>标识接口</strong>)。由于只有一个抽象方法，我们完全有理由在实现中忽略掉方法名，而这正是 Lambda 表达式的作用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printPersons(</span><br><span class=\"line\">    roster,</span><br><span class=\"line\">    (Person p) -&gt; p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>再回顾一下 <code>CheckPerson</code> 接口的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CheckPerson</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的<strong>函数接口</strong>过于简单，似乎没有必要在应用中定义诸多类似的东西。于是 JDK 给你提供了很多开箱即用的接口，它们在 <code>java.util.function</code> 包中。比如该例中可以使用 <code>Predicate&lt;T&gt;</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用它来替换 <code>CheckPerson</code> 接口，代码变成了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printPersonsWithPredicate</span><span class=\"params\">(</span><br><span class=\"line\">    List&lt;Person&gt; roster, Predicate&lt;Person&gt; tester)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</span><br><span class=\"line\">            p.printPerson();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的调用方式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printPersonsWithPredicate(</span><br><span class=\"line\">    roster,</span><br><span class=\"line\">    p -&gt; p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>玩完了年龄的查找算法，我们来看一下执行逻辑。前面的示例在找到合法的年龄后，只是调用了 <code>printPerson()</code> 方法进行打印。如果想改变这一执行逻辑，不再是打印呢？我们可以将执行过程当作一个参数并使用 lambda 表达式来改造。要记住，使用 lambda 表达式必须实现函数接口。</p>\n<p><code>Consumer&lt;T&gt;</code> 接口可以传入一个参数并返回 <code>void</code> ，该接口包含一个方法：<code>void accept(T t)</code> ，使用它将代码改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processPersons</span><span class=\"params\">(</span><br><span class=\"line\">        List&lt;Person&gt; roster,</span><br><span class=\"line\">        Predicate&lt;Person&gt; tester,</span><br><span class=\"line\">        Consumer&lt;Person&gt; block)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</span><br><span class=\"line\">            block.accept(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时便可以将不同的执行逻辑当作参数传入，如果依然想执行打印方法，则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processPersons(</span><br><span class=\"line\">     roster,</span><br><span class=\"line\">     p -&gt; p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">         &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">         &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>,</span><br><span class=\"line\">     p -&gt; p.printPerson()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>有时会需要处理后得到一个返回值，<code>Function&lt;T,R&gt;</code> 接口正是此作用，它包含一个 <code>R apply(T t)</code> 方法。现在来继续改造上面的例子，加入一个新参数 <code>mapper</code> 来提供获得数据的逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">processPersonsWithFunction</span><span class=\"params\">(</span><br><span class=\"line\">        List&lt;Person&gt; roster,</span><br><span class=\"line\">        Predicate&lt;Person&gt; tester,</span><br><span class=\"line\">        Function&lt;Person, String&gt; mapper,</span><br><span class=\"line\">        Consumer&lt;String&gt; block)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p : roster) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</span><br><span class=\"line\">            String data = mapper.apply(p);</span><br><span class=\"line\">            block.accept(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用代码，获得用户的电子邮件地址并输出到控制台：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processPersonsWithFunction(</span><br><span class=\"line\">    roster,</span><br><span class=\"line\">    p -&gt; p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>,</span><br><span class=\"line\">    p -&gt; p.getEmailAddress(),</span><br><span class=\"line\">    email -&gt; System.out.println(email)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-充分使用泛型\"><a href=\"#2-充分使用泛型\" class=\"headerlink\" title=\"2. 充分使用泛型\"></a>2. 充分使用泛型</h3><p>事实上，我们上面得到的 <code>processPersonsWithFunction</code> 方法不仅可以处理 <code>Person</code> 类型，如果我们把类型声明改用泛型，可以得到更为通用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;X, Y&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processElements</span><span class=\"params\">(</span><br><span class=\"line\">        Iterable&lt;X&gt; source,</span><br><span class=\"line\">        Predicate&lt;X&gt; tester,</span><br><span class=\"line\">        Function &lt;X, Y&gt; mapper,</span><br><span class=\"line\">        Consumer&lt;Y&gt; block)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (X p : source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tester.test(p)) &#123;</span><br><span class=\"line\">            Y data = mapper.apply(p);</span><br><span class=\"line\">            block.accept(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对 <code>Person</code> 类型，依然可以如此调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processElements(</span><br><span class=\"line\">    roster,</span><br><span class=\"line\">    p -&gt; p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>,</span><br><span class=\"line\">    p -&gt; p.getEmailAddress(),</span><br><span class=\"line\">    email -&gt; System.out.println(email)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>它的执行过程是这样的：</p>\n<ol>\n<li>从集合 <code>source</code> 中获取一组对象，该例从 <code>roster</code> 中获得 <code>Person</code> 对象。</li>\n<li>从这组对象中过滤出符合 <code>tester</code> 的( 即满足 <code>Predicate</code> 的对象 )。该例的 <code>Predicate</code> 使用 lambda 表达式。</li>\n<li>通过 <code>Function</code> 类型的对象 <code>mapper</code> ，将上面过滤出的对象类型映射为某值类型。该例中的 <code>Function</code> 对象是 Lambda 表达式，它返回了 <code>String</code> 型的电子邮件地址。</li>\n<li>将映射后的值通过 <code>Consumer</code> 对象 <code>block</code> 执行某行为。该例中的 <code>Consumer</code> 对象也是 Lambda 表达式，执行的行为是打印字符串。</li>\n</ol>\n<h3 id=\"3-使用链式操作\"><a href=\"#3-使用链式操作\" class=\"headerlink\" title=\"3. 使用链式操作\"></a>3. 使用链式操作</h3><p>使用 Lambda 表达式作为参数，使得链式操作变得极为方便，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roster</span><br><span class=\"line\">    .stream()</span><br><span class=\"line\">    .filter(</span><br><span class=\"line\">        p -&gt; p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">            &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">            &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>)</span><br><span class=\"line\">    .map(p -&gt; p.getEmailAddress())</span><br><span class=\"line\">    .forEach(email -&gt; System.out.println(email));</span><br></pre></td></tr></table></figure>\n<p>例子中用到的方法签名如下：</p>\n<ul>\n<li>Stream<e> <strong>stream</strong>()</e></li>\n<li>Stream<t> <strong>filter</strong>(Predicate&lt;? super T&gt; predicate)</t></li>\n<li><r> Stream<r> <strong>map</strong>(Function&lt;? super T,? extends R&gt; mapper)</r></r></li>\n<li>void <strong>forEach</strong>(Consumer&lt;? super T&gt; action)</li>\n</ul>\n<p>参考此例，可以在 Java 中写出许多能够媲美支持函数式编程的语言的代码。</p>\n<h3 id=\"4-在-GUI-中的应用\"><a href=\"#4-在-GUI-中的应用\" class=\"headerlink\" title=\"4. 在 GUI 中的应用\"></a>4. 在 GUI 中的应用</h3><p>Java GUI 编程中经常出现类似的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnAction(<span class=\"keyword\">new</span> EventHandler&lt;ActionEvent&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(ActionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>它极其适合使用 Lambda 表达式进行改造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.setOnAction(</span><br><span class=\"line\">    event -&gt; System.out.println(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-语法细节\"><a href=\"#5-语法细节\" class=\"headerlink\" title=\"5. 语法细节\"></a>5. 语法细节</h3><p>领略了 Lambda 表达式的风采后，来看其语法。Lambda 表达式由三部分组成：</p>\n<ul>\n<li>形参列表</li>\n<li>箭头符号</li>\n<li>主体部分</li>\n</ul>\n<p>首先是放在圆括号中的、以逗号分隔的<strong>形参列表</strong>。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(User u, Role r) -&gt; ...</span><br></pre></td></tr></table></figure>\n<p>在 Lambda 表达式中可以省略参数类型，当只有一个参数时，也可以省略圆括号：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p -&gt; p.getGender() == Person.Sex.MALE </span><br><span class=\"line\">    &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">    &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n<p><strong>箭头符号</strong>就是 <code>-&gt;</code> 。</p>\n<p><strong>主体</strong>可以是一个表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.getGender() == Person.Sex.MALE </span><br><span class=\"line\">    &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">    &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n<p>也可以是一个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.getGender() == Person.Sex.MALE</span><br><span class=\"line\">        &amp;&amp; p.getAge() &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">        &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无返回值的语句也可以不使用语句块( <code>{}</code> )：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">email -&gt; System.out.println(email)</span><br></pre></td></tr></table></figure>\n<p>来看一个使用多个形参的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IntegerMath</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">operation</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">operateBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, IntegerMath op)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> op.operation(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        Calculator myApp = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">        IntegerMath addition = (a, b) -&gt; a + b;</span><br><span class=\"line\">        IntegerMath subtraction = (a, b) -&gt; a - b;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"40 + 2 = \"</span> +</span><br><span class=\"line\">            myApp.operateBinary(<span class=\"number\">40</span>, <span class=\"number\">2</span>, addition));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"20 - 10 = \"</span> +</span><br><span class=\"line\">            myApp.operateBinary(<span class=\"number\">20</span>, <span class=\"number\">10</span>, subtraction));    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它的输出结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">40 + 2 = 42</span><br><span class=\"line\">20 - 10 = 10</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-作用域\"><a href=\"#6-作用域\" class=\"headerlink\" title=\"6. 作用域\"></a>6. 作用域</h3><p>Lambda 表达式中可以使用变量，采用词法作用域(ps：可参考 JavaScript 作用域)，不存在变量作用域屏蔽问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LambdaScopeTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstLevel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">methodInFirstLevel</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 该语句将会导致 `语句A` 编译错误：</span></span><br><span class=\"line\">            <span class=\"comment\">// \"local variables referenced from a lambda expression</span></span><br><span class=\"line\">            <span class=\"comment\">// must be final or effectively final\"</span></span><br><span class=\"line\">            <span class=\"comment\">// x = 99;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            Consumer&lt;Integer&gt; myConsumer = (y) -&gt; </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"x = \"</span> + x); <span class=\"comment\">// 语句A</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"y = \"</span> + y);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"this.x = \"</span> + <span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"LambdaScopeTest.this.x = \"</span> +</span><br><span class=\"line\">                    LambdaScopeTest.<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            myConsumer.accept(x);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        LambdaScopeTest st = <span class=\"keyword\">new</span> LambdaScopeTest();</span><br><span class=\"line\">        LambdaScopeTest.FirstLevel fl = st.new FirstLevel();</span><br><span class=\"line\">        fl.methodInFirstLevel(<span class=\"number\">23</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上例的输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">23</span></span><br><span class=\"line\">y = <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.x = <span class=\"number\">1</span></span><br><span class=\"line\">LambdaScopeTest.<span class=\"keyword\">this</span>.x = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>如果把例子中的 <code>myConsumer</code> 的参数改为 <code>y</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Consumer&lt;Integer&gt; myConsumer = (x) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将会抛出错误： “variable x is already defined in method methodInFirstLevel(int)” 。这是因为 Lambda 表达式并不会引入新的作用域范围。Lambda 表达式中只能访问 final 或 effectively final 的变量，这一点和匿名类仍然是一致的。</p>\n<blockquote>\n<p><strong>effectively final</strong> 是 Java8 的特性之一：局部内部类和匿名内部类访问的局部变量必须由final修饰，Java8 中可以不加final修饰符，由系统默认添加。</p>\n</blockquote>\n<h3 id=\"7-目标类型\"><a href=\"#7-目标类型\" class=\"headerlink\" title=\"7. 目标类型\"></a>7. 目标类型</h3><p>Lambda 表达式的类型是由上下文推导而来，并不是函数接口的名称。例如之前的两个例子：</p>\n<ul>\n<li>public static void printPersons(List<person> roster, CheckPerson tester) </person></li>\n<li>public void printPersonsWithPredicate(List<person> roster, Predicate<person> tester)</person></person></li>\n</ul>\n<p>当 Java 的运行时执行 <code>printPersons</code> 方法时需要 <code>CheckPerson</code> 类型，因此 Lambda 表达式的类型是 <code>CheckPerson</code> 。而在方法 <code>printPersonsWithPredicate</code> 中，其类型为 <code>Predicate&lt;Person&gt;</code> 。这种类型叫做 <strong>目标类型(target type)</strong> ，它只能在下列场景使用：</p>\n<ul>\n<li>变量声明</li>\n<li>赋值</li>\n<li>返回语句 return</li>\n<li>数组初始化</li>\n<li>方法或构造器参数</li>\n<li>Lambda 表达式主体中</li>\n<li>条件表达式 <code>? :</code></li>\n<li>类型转换</li>\n</ul>\n<p>最后来看一个例子。假设有如下两个函数接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">V <span class=\"title\">call</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Runnable.run</code> 没有返回值，而 <code>Callable&lt;V&gt;.call</code> 有返回值。</p>\n<p>现在有这样两个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">    r.run();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">invoke</span><span class=\"params\">(Callable&lt;T&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.call();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面的语句会执行哪个方法呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = invoke(() -&gt; <span class=\"string\">\"done\"</span>);</span><br></pre></td></tr></table></figure>\n<p>答案是 <code>invoke(Callable&lt;T&gt;)</code> ，因为它有返回值。因此，Lambda 表达式的类型是 <code>Callable&lt;T&gt;</code> ，很简单对吗？</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\" target=\"_blank\" rel=\"external\">The Java™ Tutorials: Lambda Expressions</a></li>\n</ul>\n"},{"title":"编程基本原则汇总","url":"http://zhangqiang.work/posts/1019201510/","content":"<p>整理一些公认的编程基本原则。</p>\n<h2 id=\"KISS\"><a href=\"#KISS\" class=\"headerlink\" title=\"KISS\"></a>KISS</h2><blockquote>\n<p>Keep It Simple Stupid</p>\n</blockquote>\n<p>要注重简约。</p>\n<h2 id=\"YAGNI\"><a href=\"#YAGNI\" class=\"headerlink\" title=\"YAGNI\"></a>YAGNI</h2><blockquote>\n<p>you aren’t gonna need it</p>\n</blockquote>\n<p>在确实需要某功能之前，不要依靠预测去实现它。</p>\n<h2 id=\"DRY\"><a href=\"#DRY\" class=\"headerlink\" title=\"DRY\"></a>DRY</h2><blockquote>\n<p>Don’t Repeat Yourself</p>\n</blockquote>\n<p>不要编写重复代码，将业务规则、公式、元数据等放在一处。</p>\n<h2 id=\"LSP\"><a href=\"#LSP\" class=\"headerlink\" title=\"LSP\"></a>LSP</h2><blockquote>\n<p>Liskov Substitution Principle</p>\n</blockquote>\n<p>里氏替换原则：程序中的对象可以被它的子类型替换，而同时不改变程序的正确性。</p>\n<h2 id=\"LoD\"><a href=\"#LoD\" class=\"headerlink\" title=\"LoD\"></a>LoD</h2><blockquote>\n<p>Law of Demeter : Don’t talk to strangers</p>\n</blockquote>\n<p>迪米特法则：又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。</p>\n<p>对象的方法应该只调用以下方法：</p>\n<ol>\n<li>对象自己的；</li>\n<li>方法参数中的；</li>\n<li>方法内部创建的任何对象中的方法；</li>\n<li>对象直接属性或域中的方法(聚合关系)。</li>\n</ol>\n<h2 id=\"OCP\"><a href=\"#OCP\" class=\"headerlink\" title=\"OCP\"></a>OCP</h2><blockquote>\n<p><strong>Open/Closed Principle:</strong> Software entities (e.g. classes) should be open for extension, but closed for modification.</p>\n</blockquote>\n<p>开闭原则：软件实体应当对扩展开放，对修改关闭。</p>\n<h2 id=\"SRP\"><a href=\"#SRP\" class=\"headerlink\" title=\"SRP\"></a>SRP</h2><blockquote>\n<p><strong>Single Responsibility Principle: </strong>A class should never have more than one reason to change.</p>\n</blockquote>\n<p>单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。</p>\n<p><strong>Resources</strong></p>\n<ol>\n<li><a href=\"http://en.wikipedia.org/wiki/KISS_principle\" target=\"_blank\" rel=\"external\">KISS principle</a></li>\n<li><a href=\"http://principles-wiki.net/principles:keep_it_simple_stupid\" target=\"_blank\" rel=\"external\">Keep It Simple Stupid (KISS)</a></li>\n<li><a href=\"http://c2.com/xp/YouArentGonnaNeedIt.html\" target=\"_blank\" rel=\"external\">You Arent Gonna Need It</a></li>\n<li><a href=\"http://www.xprogramming.com/Practices/PracNotNeed.html\" target=\"_blank\" rel=\"external\">You’re NOT gonna need it!</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/You_ain&#39;t_gonna_need_it\" target=\"_blank\" rel=\"external\">You aren’t gonna need it</a></li>\n<li><a href=\"http://c2.com/cgi/wiki?DontRepeatYourself\" target=\"_blank\" rel=\"external\">Dont Repeat Yourself</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself\" target=\"_blank\" rel=\"external\">Don’t repeat yourself</a></li>\n<li><a href=\"http://programmer.97things.oreilly.com/wiki/index.php/Don&#39;t_Repeat_Yourself\" target=\"_blank\" rel=\"external\">Don’t Repeat Yourself</a></li>\n<li><a href=\"http://c2.com/cgi/wiki?CodeForTheMaintainer\" target=\"_blank\" rel=\"external\">Code For The Maintainer</a></li>\n<li><a href=\"http://blog.codinghorror.com/the-noble-art-of-maintenance-programming/\" target=\"_blank\" rel=\"external\">The Noble Art of Maintenance Programming</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Program_optimization\" target=\"_blank\" rel=\"external\">Program optimization</a></li>\n<li><a href=\"http://c2.com/cgi/wiki?PrematureOptimization\" target=\"_blank\" rel=\"external\">Premature Optimization</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\" target=\"_blank\" rel=\"external\">Law of Demeter</a></li>\n<li><a href=\"http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx/\" target=\"_blank\" rel=\"external\">The Law of Demeter Is Not A Dot Counting Exercise</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Liskov_substitution_principle\" target=\"_blank\" rel=\"external\">Liskov substitution principle</a></li>\n<li><a href=\"http://freshbrewedcode.com/derekgreer/2011/12/31/solid-javascript-the-liskov-substitution-principle/\" target=\"_blank\" rel=\"external\">The Liskov Substitution Principle</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\" rel=\"external\">Single responsibility principle</a></li>\n</ol>\n"},{"title":"Docker 架构","url":"http://zhangqiang.work/posts/1015201510/","content":"<p>Docker 采用 C/S 架构。Docker client 和 Docker daemon 通信，以创建、运行或发布容器。可以将 Docker daemon 运行在本机或远程主机，client 和 daemon 通过 sockets 或 RESTful API 交互。</p>\n<h3 id=\"1-Docker核心\"><a href=\"#1-Docker核心\" class=\"headerlink\" title=\"1. Docker核心\"></a>1. Docker核心</h3><ul>\n<li><strong>Docker daemon</strong> 接受并处理Docker Client发送的请求，它是运行在宿主机上的系统进程。</li>\n<li><strong>Docker client</strong> Docker的用户接口，用户通过执行 <code>docker</code> 命令操作 daemon 。</li>\n</ul>\n<p>其基本结构可参考官方图：<br><img src=\"docker-architecture-1.svg\" alt=\"Docker架构\"></p>\n<h3 id=\"2-Docker内部机制\"><a href=\"#2-Docker内部机制\" class=\"headerlink\" title=\"2. Docker内部机制\"></a>2. Docker内部机制</h3><ul>\n<li>镜像(Docker images)</li>\n<li>仓库(Docker registries)</li>\n<li>容器(Docker containers)</li>\n</ul>\n<p>理解 Docker 内部机制需要理解这三个基本概念。</p>\n<h4 id=\"2-1-镜像\"><a href=\"#2-1-镜像\" class=\"headerlink\" title=\"2.1. 镜像\"></a>2.1. 镜像</h4><ol>\n<li>镜像是一个只读模板，可以包含操作系统、Apache 及 Web 应用等；</li>\n<li>镜像用来创建容器；</li>\n<li>镜像是 Docker 的<strong>构建(Build)</strong>组件。</li>\n</ol>\n<h4 id=\"2-2-仓库\"><a href=\"#2-2-仓库\" class=\"headerlink\" title=\"2.2. 仓库\"></a>2.2. 仓库</h4><ol>\n<li>仓库用来存储镜像，以供上传下载；</li>\n<li>仓库分公有、私有，公有仓库是 <code>Docker Hub</code> ；</li>\n<li>仓库是 Docker 的<strong>分发(Distribution)</strong>组件。</li>\n</ol>\n<h4 id=\"2-3-容器\"><a href=\"#2-3-容器\" class=\"headerlink\" title=\"2.3. 容器\"></a>2.3. 容器</h4><ol>\n<li>容器是独立、安全的应用平台，保存着应用运行所需要的一切内容；</li>\n<li>容器由镜像创建，可以被运行、启动、停止、移动或删除；</li>\n<li>容器是 Docker 的<strong>运行(Run)</strong>组件。</li>\n</ol>\n<h3 id=\"3-Docker架构\"><a href=\"#3-Docker架构\" class=\"headerlink\" title=\"3. Docker架构\"></a>3. Docker架构</h3><p><img src=\"docker-architecture-2.png\" alt=\"Docker概念思维导图\"></p>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/articles/docker-source-code-analysis-part1\" target=\"_blank\" rel=\"external\">Docker源码分析（一）：Docker架构</a></li>\n<li><a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"external\">Docker Docs</a></li>\n</ul>\n"},{"title":"写好程序分支控制","url":"http://zhangqiang.work/posts/913201509/","content":"<p>分支语句在编程语言中有着举足轻重的地位。有一定工作年限的程序员，通常遇到过这样一段代码，它有数百行，包含了十几甚至二十几个分支，嵌套多达五六层甚至十多层，各种 <code>if ... else ...</code> 语句交叉在一起。最可恨的是，每个分支上有着详尽的注释，你花了二十分钟，仔细阅读了每条注释，最后发现这些注释根本不能够告诉你它要做什么，你依然一头雾水。甚至有些注释还TM是错的，和代码逻辑根本不一致。</p>\n<p>这样的代码一般是老系统长期维护造成的。随着用户的需求不断地变更，维护它的程序员不得不在代码上无限地增加 <code>if</code> 。当然也有“大牛”可以一开始便写出这么复杂的分支逻辑。</p>\n<p>废话说了很多，本文的目的在于归纳关于分支语句的林林总总。探讨如何写出漂亮的分支逻辑。</p>\n<h1 id=\"1-重构\"><a href=\"#1-重构\" class=\"headerlink\" title=\"1. 重构\"></a>1. 重构</h1><p>一个正常的程序员是不会痛骂 <code>if A then B</code> 这样的分支的，大多数分支代码一开始确实也长得如此。然而，随着时间的推移，需求的不断变更，分支代码通常看起来是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(A &lt; <span class=\"number\">10</span> || B &gt; <span class=\"number\">5</span>) &amp;&amp; A &gt; <span class=\"number\">10</span> || B &lt; <span class=\"number\">20</span> &amp;&amp; C || C &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> () ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (B &gt; <span class=\"number\">20</span> &amp;&amp; C &lt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你愿意做一个有节操的程序员，在上面的代码继续发臭腐烂、直至必须重写前，你应该对其重构。我认为<strong>重构应该优先保证那些公开的API方法流程清晰易读、抽象层次一致、职责单一，具体的实现细节交由私有方法处理。</strong></p>\n<h2 id=\"1-1-改进复杂的表达式\"><a href=\"#1-1-改进复杂的表达式\" class=\"headerlink\" title=\"1.1. 改进复杂的表达式\"></a>1.1. 改进复杂的表达式</h2><p>进入分支的条件逻辑如果过于复杂，通常代码会很难维护。此时可考虑以下手段改进：</p>\n<h3 id=\"1-1-1-条件反转\"><a href=\"#1-1-1-条件反转\" class=\"headerlink\" title=\"1.1.1. 条件反转\"></a>1.1.1. 条件反转</h3><p>通常形如 <code>if [OK] then ... else ...</code> 的处理逻辑更符号人类的思维习惯，所以对于逻辑“非”优先的分支，可以考虑进行反转。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(level &gt; <span class=\"number\">4</span> &amp;&amp; score &gt; <span class=\"number\">90</span>)) &#123;</span><br><span class=\"line\">    reject();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    accept();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (level &gt; <span class=\"number\">4</span> &amp;&amp; score &gt; <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">    accept();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-2-使用解释变量\"><a href=\"#1-1-2-使用解释变量\" class=\"headerlink\" title=\"1.1.2. 使用解释变量\"></a>1.1.2. 使用解释变量</h3><p>将表达式中逻辑相关的部分，提取出变量，并给予一个合适的名字。此时变量的命名必须能准确表述表达式的含义。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">0</span>].equals(<span class=\"string\">\"admin\"</span>) </span><br><span class=\"line\">        &amp;&amp; DB.get(<span class=\"string\">\"password\"</span>).equals(inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">    doSomeThing();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> isAdmin = inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">0</span>].equals(<span class=\"string\">\"admin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> hasCertified = DB.get(<span class=\"string\">\"password\"</span>).equals(inputs.split(<span class=\"string\">\",\"</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isAdmin &amp;&amp; hasCertified) &#123;</span><br><span class=\"line\">    doSomeThing();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-3-分解分支条件\"><a href=\"#1-1-3-分解分支条件\" class=\"headerlink\" title=\"1.1.3. 分解分支条件\"></a>1.1.3. 分解分支条件</h3><p>如果分支条件中存在多种逻辑交织，可以考虑按层级将其分解。例如将：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (gender == MALE &amp;&amp; age &gt; <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == MALE &amp;&amp; age &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == FEMALE &amp;&amp; age &gt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == FEMALE &amp;&amp; age &gt; <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (gender == MALE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gender == FEMALE) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种分解的副作用是有可能增加圈复杂度，要酌情适当使用。</p>\n<h3 id=\"1-1-4-提取函数\"><a href=\"#1-1-4-提取函数\" class=\"headerlink\" title=\"1.1.4. 提取函数\"></a>1.1.4. 提取函数</h3><p>有时你在维护一个公共API方法，它里面有一个极其复杂的条件表达式。为了保证主干代码的清晰简洁，你可以将这个表达式暂且简单的移到独立函数中，再酌情考虑重构此表达式。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A &gt; B &amp;&amp; B &lt; <span class=\"number\">100</span> || C == D &amp;&amp; ! E ...) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isReady(...)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isReady</span><span class=\"params\">(...)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-改进执行过程\"><a href=\"#1-2-改进执行过程\" class=\"headerlink\" title=\"1.2. 改进执行过程\"></a>1.2. 改进执行过程</h2><h3 id=\"1-2-1-提取函数\"><a href=\"#1-2-1-提取函数\" class=\"headerlink\" title=\"1.2.1. 提取函数\"></a>1.2.1. 提取函数</h3><p>从 <code>if</code> 、<code>then</code> 、<code>else</code> 三个段落中分别提炼出独立的函数。这样做的好处是，可以将“要做的事情”独立出来，从来突出条件逻辑。该做法非常适合这种情况：当你想更清楚地表明每个分支的作用，并且突出每个分支的原因时。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (A &amp;&amp; B || C) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处数十行代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处数十行代码</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处数十行代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面各分支中的代码累加起来可能多达百行。尽管这个样例看起来很简单，真实的代码往往会让维护者的阅读压力很大，可以修改为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (A &amp;&amp; B || C) &#123;</span><br><span class=\"line\">    doThingA();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (...) &#123;</span><br><span class=\"line\">    doThingB();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    doThingC();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-使用空对象模式\"><a href=\"#1-2-2-使用空对象模式\" class=\"headerlink\" title=\"1.2.2. 使用空对象模式\"></a>1.2.2. 使用空对象模式</h3><p>有时你需要再三检查某对象是否为 <code>null</code> ，并对空对象做出相同的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Foo.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        User user = Factory.getUser(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Bar bar = Factory.getBar(user.getName());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bar != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Foobar fb = Factory.getFoobar();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fb != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ...</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"User is null!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// User.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"zhangsan\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Factory.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时可以将 null 值替换为空对象。重构过程如下：</p>\n<ol>\n<li>为源类建立一个子类，使其行为就像是源类的 null 版本。在源类和 null 子类中都加上 <code>isNull()</code> 函数，前者的 <code>isNull()</code>应该返回 <code>false</code> ，后者的 <code>isNull()</code> 返回<code>true</code> 。</li>\n<li>编译。</li>\n<li>找出所有“索求源对象却获得一个null”的地方。修改这些地方，使它们改而获得一个空对象。</li>\n<li>找出“将源对象与null做比较”的地方。修改这些地方，使它们调用 <code>isNull()</code> 函数。</li>\n<li>编译、测试。</li>\n<li>找出这样的程序点：如果对象不是null，做A动作，否则做B动作。</li>\n<li>对于每一个上述地点，在 null 类中覆写A动作，使其行为和B动作相同。</li>\n<li>使用上述被覆写的动作，然后删除“对象是否等于null”的条件测试。编译并测试。</li>\n</ol>\n<p>重构后的参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealUser</span> <span class=\"keyword\">implements</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"zhangsan\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullUser</span> <span class=\"keyword\">implements</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"User is null!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NullUser();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RealUser();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        User user = Factory.getUser(id);</span><br><span class=\"line\">        Bar bar = Factory.getBar(user.getName());</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>C#</code> 、<code>Go</code> 、 <code>swift</code> 等从语言级别直接提供 NullObject 模式，你可以很方便的使用或改进它。</p>\n<p>另外，还可以在不修改 <code>User</code> 代码的前提下，引入<strong>标识接口</strong>来识别空对象。例如增加一个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Null</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>它不定义任何函数。然后让空对象实现它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullUser</span> <span class=\"keyword\">extends</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Null</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时便可以通过 <code>instanceof</code> 操作符来检查对象是否为 null.</p>\n<h2 id=\"1-3-改进条件调度\"><a href=\"#1-3-改进条件调度\" class=\"headerlink\" title=\"1.3. 改进条件调度\"></a>1.3. 改进条件调度</h2><h3 id=\"1-3-1-使用-卫语句-避免不必要的嵌套\"><a href=\"#1-3-1-使用-卫语句-避免不必要的嵌套\" class=\"headerlink\" title=\"1.3.1. 使用 卫语句 避免不必要的嵌套\"></a>1.3.1. 使用 <code>卫语句</code> 避免不必要的嵌套</h3><blockquote>\n<p>条件表达式通常有2种表现形式。第一：所有分支都属于正常行为。第二：条件表达式提供的答案中只有一种是正常行为，其他都是不常见的情况。这2类条件表达式有不同的用途。如果2条分支都是正常行为，就应该使用形如 <code>if ... else ...</code> 的条件表达式；如果某个条件极其罕见，就应该单独检查该条件，并在该条件为真时立刻从函数中返回。这样的单独检查常常被称为<strong>卫语句(guard clause)</strong>。</p>\n</blockquote>\n<p>可以先将程序逻辑中不符合条件的情况优先过滤掉，以保证主体代码的清晰简单。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">    doSomeThing();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改造为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomeThing();</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-2-合并表达式\"><a href=\"#1-3-2-合并表达式\" class=\"headerlink\" title=\"1.3.2. 合并表达式\"></a>1.3.2. 合并表达式</h3><p>如果有一系列条件测试都得到相同的结果，将这些测试合并为一个表达式，并将这个条件表达式提炼为一个独立函数。例如将：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (A &amp;&amp; B) &#123;</span><br><span class=\"line\">    doThingA();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A &amp;&amp; C) &#123;</span><br><span class=\"line\">    doThingA();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    doThingB();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改造为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (readyToA()) &#123;</span><br><span class=\"line\">    doThingA();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    doThingB();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-3-表驱动法\"><a href=\"#1-3-3-表驱动法\" class=\"headerlink\" title=\"1.3.3. 表驱动法\"></a>1.3.3. 表驱动法</h3><p>有时，测试条件可以使用数据表的形式驱动。例如以下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 1]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=31</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 2]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=28</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 3]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=31</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 4]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=30</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 5]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=31</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 6]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=30</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 7]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=31</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 8]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=31</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 9]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=30</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 10]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=31</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 11]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=30</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [<span class=\"variable\">$month</span> <span class=\"_\">-eq</span> 12]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    day=31</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>可以改写为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days=(31 28 31 30 31 30 31 31 30 31 30 31)</span><br><span class=\"line\">day=days[<span class=\"variable\">$month</span>]</span><br></pre></td></tr></table></figure>\n<p>又如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo === <span class=\"string\">'it'</span>) &#123;</span><br><span class=\"line\">    bar = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'is'</span>) &#123;</span><br><span class=\"line\">    bar = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'not'</span>) &#123;</span><br><span class=\"line\">    bar = <span class=\"string\">'c'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'too'</span>) &#123;</span><br><span class=\"line\">    bar = <span class=\"string\">'d'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (foo === <span class=\"string\">'bad'</span>) &#123;</span><br><span class=\"line\">    bar = <span class=\"string\">'e'</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    bar = <span class=\"string\">'f'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以修改为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">    <span class=\"string\">'it'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'is'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'not'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">    <span class=\"string\">'too'</span>: <span class=\"string\">'d'</span>,</span><br><span class=\"line\">    <span class=\"string\">'bad'</span>: <span class=\"string\">'e'</span></span><br><span class=\"line\">&#125;[foo] || <span class=\"string\">'f'</span>;</span><br></pre></td></tr></table></figure>\n<p>利用以上方法结合函数式编程方式，在 JavaScript 中可以创造出极其精简灵活的代码。</p>\n<p>同样，还可以使用 <code>map</code> 或多层 map 来简化分支语句：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">male := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\">female := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">map</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"MALE\"</span>: male,</span><br><span class=\"line\">    <span class=\"string\">\"FEMALE\"</span>: female,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> m, ok := m[<span class=\"string\">\"MALE\"</span>]; ok &#123;</span><br><span class=\"line\">    m[<span class=\"string\">\"...\"</span>] ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表驱动法的核心思路是将各判断条件放置到表结构中，将判断逻辑转化为查找表的逻辑，从而减化客户端代码，使代码条理更加清晰。使用时应该重点关注表结构的设计。</p>\n<h3 id=\"1-3-4-使用多态\"><a href=\"#1-3-4-使用多态\" class=\"headerlink\" title=\"1.3.4. 使用多态\"></a>1.3.4. 使用多态</h3><p>当条件分支逻辑是用来判定类型、代码执行逻辑的抽象层次一致且较为复杂时，可考虑使用多态。例如以下代码(注：示例代码结构其实很简单，通常不需要修改，希望你能够理解它背后所代表的复杂的结构)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLegNumbers</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"chicken\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"frog\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"crab\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"centipede\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">70</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以重构为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 客户端代码：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLegNumbers</span><span class=\"params\">(Animal animal)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animal.legs();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于多态的重构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    legs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Chicken</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Frog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Crab</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Centipede</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">70</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时你还需要：</p>\n<ol>\n<li>使用<strong>策略模式</strong>或<strong>状态模式</strong>取代类型代码；</li>\n<li>使用<strong>命令模式</strong>替换条件调度逻辑。</li>\n</ol>\n<h3 id=\"1-3-5-使用鸭子类型\"><a href=\"#1-3-5-使用鸭子类型\" class=\"headerlink\" title=\"1.3.5. 使用鸭子类型\"></a>1.3.5. 使用鸭子类型</h3><p>除了使用多态做类型泛化，也可以使用鸭子类型约束行为方法。它可以忽略掉你必须对类型所做的判断，而只关心程序中的行为逻辑的抽象。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Chicken <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    legs <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewChicken</span><span class=\"params\">()</span> *<span class=\"title\">Chicken</span></span> &#123;</span><br><span class=\"line\">    chicken := Chicken&#123;</span><br><span class=\"line\">        legs: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;chicken</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Chicken)</span> <span class=\"title\">Legs</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.legs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>客户端代码只需要约束鸭子类型，不需要关注实现细节，甚至不需要关注是不是 <code>Animal</code>，只要有 <code>Legs</code>，哪怕你是一张桌子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> LegsNumber <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Legs() <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LegNumbers</span><span class=\"params\">(anything LegsNumber)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> anything.Legs()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重构过程你应该把握好“度”的问题，并不是当你遇到A情况时，将其重构为B情况即为最佳实践。通常脱离应用场景是无法谈最佳实践的。例如当你过分地依赖多态或其它设计模式时，很可能因为引入过多的类，将原本简单清晰的代码变得更晦涩。你应该努力做到让代码阅读者每次接收到的信息保持相同的抽象层次，比如一个业务流程控制方法中，应该只能看到流程的控制逻辑以及执行哪些流程，而不应该出现流程处理的细节。</p>\n<h1 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a>2. 性能优化</h1><blockquote>\n<p>过早的优化是万恶之源。 – Donald Knuth</p>\n</blockquote>\n<p>首先，千万不要为了你以为的那么一丁点性能提升，就以牺牲代码可读性为代价而做性能优化！其次，你要认清你所谓的性能提升10倍，是将 1 毫秒变成了 0.1 毫秒，还是将 10 秒变成了 1 秒。性能优化应该关注产生性能瓶颈的部分。</p>\n<p>通常优化工作应该在高层次上来做，很少会出现优化一个分支语句这种极端的场景。但为了文章的完整性，仍然总结了一些和分支相关的优化技巧。结构良好的代码通常和编程语言的关系不是那么紧密，但是性能优化往往会和编程语言紧密关联。优化工作应该总是<strong>结合运行时的具体环境</strong>来做，以下仅仅是一些思路总结。</p>\n<p>假设有这样一段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result0;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result1;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result2;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result3;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result4;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result5;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result6;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result7;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result8;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result9;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result10;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-将条件按频率倒排\"><a href=\"#2-1-将条件按频率倒排\" class=\"headerlink\" title=\"2.1 将条件按频率倒排\"></a>2.1 将条件按频率倒排</h2><p>实际业务中，如果 <code>value</code> 为 <code>9</code> 的情况经常出现，则应该将该判断放在最前面。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (value == <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result9;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result0;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result1;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result2;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result3;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result4;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result5;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result6;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result7;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result8;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result10;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-拆分分支\"><a href=\"#2-2-拆分分支\" class=\"headerlink\" title=\"2.2 拆分分支\"></a>2.2 拆分分支</h2><p>如果没有明显的频率，则可考虑拆分成多个分支。其实和上面一样，核心思路是<strong>减少分支判断的次数</strong>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (value &lt; <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result0;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result3;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result4;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result5;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result6;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result7;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result8;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value == <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result9;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-使用-switch-语句\"><a href=\"#2-3-使用-switch-语句\" class=\"headerlink\" title=\"2.3 使用 switch 语句\"></a>2.3 使用 switch 语句</h2><p>多重条件判断时推荐 <code>switch</code> 语句，通常编译器更容易针对它做优化。而像 JavaScript 中，其性能随解释引擎不同表现参差不齐。</p>\n<p>上面的例子很容易改造成 <code>switch</code> 语句，不再给出示例代码。</p>\n<h2 id=\"2-4-使用表查询\"><a href=\"#2-4-使用表查询\" class=\"headerlink\" title=\"2.4 使用表查询\"></a>2.4 使用表查询</h2><p>参见“重构”中的“表驱动法”。当条件判断数量众多，且这些条件能用数字或字符串等离散值来表示时，通常可以进行类似的优化。使用表结构，不仅能提高代码可读性，也能提升效率。</p>\n<h2 id=\"2-5-Duff-策略\"><a href=\"#2-5-Duff-策略\" class=\"headerlink\" title=\"2.5 Duff 策略\"></a>2.5 Duff 策略</h2><p>这条和分支没有直接关系，是快速循环的技巧。由于会用到 <code>switch</code> 语句，也放在此处备查。</p>\n<p>首先要了解这样一个事实：对于绝大多数语言，将循环展开后效率往往更高。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = values.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    process(values[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如数组中有 5 项，展开后的执行速度更快：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process(values[<span class=\"number\">0</span>]);</span><br><span class=\"line\">process(values[<span class=\"number\">1</span>]);</span><br><span class=\"line\">process(values[<span class=\"number\">2</span>]);</span><br><span class=\"line\">process(values[<span class=\"number\">3</span>]);</span><br><span class=\"line\">process(values[<span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n<p>Duff 策略由 Tom Duff 首先在 C 语言中提出。它是一种展开循环的构想，通过限制循环次数来减少循环开销。这里给出 JavaScript 实现的示例代码(因为这种技巧在 JavaScript 中更实用)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> iterations = <span class=\"built_in\">Math</span>.ceil(values.length / <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> startAt = values.length % <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(startAt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>: process(values[i++]);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>: process(values[i++]);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>: process(values[i++]);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>: process(values[i++]);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>: process(values[i++]);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>: process(values[i++]);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>: process(values[i++]);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: process(values[i++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    startAt = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (--iterations &gt; <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"CSS 布局技巧","url":"http://zhangqiang.work/posts/905201509/","content":"<p>为了方便演示，所有的示例外框采用如下样式用来防止拖拽时超出本文章的布局：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#EEE</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.resizeable</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">resize</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(注：部分示例效果在手机上无法完整显示。)</p>\n<style>\n.resizeable {\n    position: relative;\n    resize: both;\n}\n.resizeable:after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    cursor: se-resize;\n    width: 0;\n    height: 0;\n    border-bottom: 20px solid #000;\n    opacity: .3;\n    border-left: 20px solid transparent;\n}\n.demo {\n    border: 1px solid #EEE;\n    overflow: auto;\n    height: 200px;\n    margin-bottom: 8px;\n    position: relative;\n}\n</style>\n\n<h2 id=\"横向布局\"><a href=\"#横向布局\" class=\"headerlink\" title=\"横向布局\"></a>横向布局</h2><h3 id=\"1-左定宽，右适应\"><a href=\"#1-左定宽，右适应\" class=\"headerlink\" title=\"1.左定宽，右适应\"></a>1.左定宽，右适应</h3><p>核心思路是让左边的浮动，右边通过 <code>margin-left</code> 以留出左边的距离。<br>实际使用时，注意配合 <code>overflow</code> 属性，让上级标签合理地消除浮动。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.d1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.left</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"d1 resizeable\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.d1 {\n    height: 140px;\n    width: 300px;\n    overflow: hidden;\n}\n.d1 .left,\n.d1 .right {\n    height: 100%;\n}\n.d1 .left {\n    float: left;\n    width: 100px;\n    background-color: red;\n}\n.d1 .right {\n    margin-left: 100px;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"d1 resizeable\"><div class=\"left\"></div><div class=\"right\"></div></div></div>\n\n\n<p><strong>变种</strong>：也可以通过给左侧元素增加 <code>position: absolute</code> 属性实现此布局，思路基本相同。<br>使用时注意上级元素也要指定 <code>position</code> 以限制左侧的定位范围。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.d1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d1</span> <span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-右定宽，左适应\"><a href=\"#2-右定宽，左适应\" class=\"headerlink\" title=\"2.右定宽，左适应\"></a>2.右定宽，左适应</h3><p>思路和上面完全相同，只需要把左右的顺序反过来。从略。</p>\n<h3 id=\"3-左右同时适应\"><a href=\"#3-左右同时适应\" class=\"headerlink\" title=\"3.左右同时适应\"></a>3.左右同时适应</h3><p>此情况两侧均浮动且使用百分比设置宽度即可。但是有一些技巧需要注意：</p>\n<ul>\n<li><p>如果需要设置 <code>margin</code>、<code>border</code> 等属性，可考虑外围增加一层元素作为包装，以防止右侧被挤到下一行。<br>在包装元素上设置宽度百分比，同时 <code>border</code> 设置为 <code>0</code>，在内部元素设置 <code>width: 100%</code>，按需设置 <code>margin</code>、<br><code>border</code> 等属性；</p>\n</li>\n<li><p>合理使用 <code>min-width</code>、<code>max-width</code> 属性，控制宽度范围，防止屏幕分辨率的变化或浏览器尺寸的变化造成显示不正常；</p>\n</li>\n<li><p>通过响应式设计控制左右不同的显示方式。</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.d3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.left-wrapper</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.right-wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.left-wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">40%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.right-wrapper</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.d3</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#EEE</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#EEE</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"d3 resizeable\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-wrapper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-wrapper\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.d3 {\n    height: 140px;\n    width: 300px;\n    overflow: hidden;\n}\n.d3 .left-wrapper,\n.d3 .right-wrapper {\n    float: left;\n    height: 100%;\n    border: 0;\n}\n.d3 .left-wrapper {\n    width: 40%;\n    background-color: red;\n}\n.d3 .right-wrapper {\n    width: 60%;\n    background-color: blue;\n}\n.d3 .left, .d3 .right {\n    color: #EEE;\n    margin: 10px;\n    padding: 10px;\n    border: 2px solid #EEE;\n}\n</style>\n\n<div class=\"demo\"><div class=\"d3 resizeable\"><div class=\"left-wrapper\"><div class=\"left\">left</div></div><div class=\"right-wrapper\"><div class=\"right\">right</div></div></div></div>\n\n<h3 id=\"4-左右定宽，中间适应\"><a href=\"#4-左右定宽，中间适应\" class=\"headerlink\" title=\"4.左右定宽，中间适应\"></a>4.左右定宽，中间适应</h3><p>可采用左边左浮动，右边右浮动，中间通过 <code>margin</code> 来完成。<br>相应的，也可以使用绝对定位(参考1)。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.d4</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.right</span>, <span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.middle</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.middle</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">80px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d4</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"d4 resizeable\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.d4 {\n    height: 140px;\n    width: 300px;\n    overflow: hidden;\n}\n.d4 .left, .d4 .right, .d4 .middle {\n    height: 100%;\n}\n.d4 .left {\n    float: left;\n    width: 80px;\n    background-color: red;\n}\n.d4 .middle {\n    margin-left: 80px;\n    margin-right: 60px;\n    background-color: green;\n}\n.d4 .right {\n    float: right;\n    width: 60px;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"d4 resizeable\"><div class=\"right\"></div><div class=\"left\"></div><div class=\"middle\"></div></div></div>\n\n\n\n<h2 id=\"纵向布局\"><a href=\"#纵向布局\" class=\"headerlink\" title=\"纵向布局\"></a>纵向布局</h2><p>多数展示型页面是不限制总高度的，但有些 dashboard 页面会让高度限制在一屏内，不出现纵向滚动条。<br>此时，灵活的纵向布局的高度控制一般需要配合使用 <code>JavasSript</code> 来实现。这里只归纳一些纯 <code>CSS</code> 技巧。</p>\n<h3 id=\"1-上下定高，中间适应\"><a href=\"#1-上下定高，中间适应\" class=\"headerlink\" title=\"1.上下定高，中间适应\"></a>1.上下定高，中间适应</h3><p>通过绝对定位实现。实际使用时发现，此实现只能适用于外围大布局，<br>内部的高度控制，要么继续沿用此方式，要么通过 <code>JavasSript</code> 控制。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">170px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.top</span>, <span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.center</span>, <span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.bottom</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.top</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v1</span> <span class=\"selector-class\">.bottom</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"v1 resizeable\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bottom\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.v1 {\n    height: 170px;\n    width: 300px;\n    overflow: hidden;\n}\n.v1 .top, .v1 .center, .v1 .bottom {\n    position: absolute;\n    width: 100%;\n}\n.v1 .top {\n    top: 0;\n    height: 30px;\n    background-color: red;\n}\n.v1 .center {\n    top: 30px;\n    bottom: 40px;\n    background-color: green;\n}\n.v1 .bottom {\n    height: 40px;\n    bottom: 0;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"v1 resizeable\"><div class=\"top\"></div><div class=\"center\"></div><div class=\"bottom\"></div></div></div>\n\n<h3 id=\"2-上固定，下滚动\"><a href=\"#2-上固定，下滚动\" class=\"headerlink\" title=\"2.上固定，下滚动\"></a>2.上固定，下滚动</h3><p>此情况只需要设置上面的 <code>position</code> 为 <code>fixed</code>，下面 <code>margin-top</code> 出相应的高度即可。</p>\n<p>由于 <code>fixed</code> 定位的特殊性，在不使用 frame 的情况下无法在此处给出示例。</p>\n<h2 id=\"居中布局\"><a href=\"#居中布局\" class=\"headerlink\" title=\"居中布局\"></a>居中布局</h2><h3 id=\"1-水平居中\"><a href=\"#1-水平居中\" class=\"headerlink\" title=\"1. 水平居中\"></a>1. 水平居中</h3><p>1) 最简单且常用的方式是设置 <code>margin: 0 auto</code> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 40px\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.c1 {\n    height: 100%;\n    width: 300px;\n    margin: 0 auto;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\" style=\"height: 40px\"><div class=\"c1\"></div></div>\n\n<p>2) 也可以通过<strong>绝对定位</strong>来实现同样的效果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-垂直居中\"><a href=\"#2-垂直居中\" class=\"headerlink\" title=\"2. 垂直居中\"></a>2. 垂直居中</h3><p>通常可采用上例中绝对定位的思路来实现。示例同时水平、垂直居中的效果：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<style>\n.c2 {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -50px;\n    margin-left: -150px;\n    height: 100px;\n    width: 300px;\n    background-color: blue;\n}\n</style>\n\n<div class=\"demo\"><div class=\"c2\"></div></div>\n\n<p>以上写法兼容性较好，但是只适合宽度、高度固定的情况，因为需要依据它来设置 <code>margin</code> 值。<br>然而有时元素的高、宽并不能确定，而是根据内容适应，此时，需要通过使用 JavaScript<br>来计算相应的高度。当然，如果你能撇开那些使用古老浏览器的用户不管，你还可以使用 <code>css3</code><br>实现此效果：</p>\n<p>可以使用 <code>flex</code> 布局，这种方式目前只有 webkit 支持：</p>\n<style>\n.c22 {\n    height: 100%;\n\n    display: -moz-box;\n    -moz-box-pack: center;\n    -moz-box-align: center;\n\n    display: -webkit-box;\n    -webkit-box-pack: center;\n    -webkit-box-align: center;\n\n    display: box;\n    box-pack: center;\n    box-align: center;\n}\n.c22 .content {\n    height: 100px;\n    width: 300px;\n    background-color: blue;\n}\n.c23 {\n    height: 100%;\n    display: -webkit-flex;\n    display:         flex;\n    -webkit-align-items: center;\n            align-items: center;\n    -webkit-justify-content: center;\n            justify-content: center;\n}\n.c23 .content {\n    height: 100px;\n    width: 300px;\n    background-color: blue;\n}\n</style>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c23</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:         flex;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-align-items</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-justify-content</span>: center;</span><br><span class=\"line\">            <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.c23</span> <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c23\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<div class=\"demo\"><div class=\"c23\"><div class=\"content\"></div></div></div>\n\n<p>或是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.c22</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">display</span>:-moz-box;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-box-pack</span>:center;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-box-align</span>:center;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-pack</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-align</span>: center;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: box;</span><br><span class=\"line\">    <span class=\"attribute\">box-pack</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">box-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.c22</span> <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 此处为模拟的尺寸，实际场景中根据内容撑起。 */</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"c22\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><div class=\"demo\"><div class=\"c22\"><div class=\"content\"></div></div></div><br>(ps: 目前只有较新版本的 Firefox、Safari、Opera 以及 Chrome 支持此效果)</p>\n"},{"title":"ExtJS 核心概念 - 事件模型","url":"http://zhangqiang.work/posts/721201507/","content":"<p>我们在使用 ExtJS 时，经常会为某组件绑定事件，以做相应扩展处理。创建组件时通过配置 <code>listeners</code> 属性即可绑定事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = Ext.create(<span class=\"string\">'Ext.button.Button'</span>, &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'Button'</span>,</span><br><span class=\"line\">    listeners: &#123;</span><br><span class=\"line\">        mouseover: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">btn</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(btn.getText() + ++i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    renderTo: <span class=\"built_in\">document</span>.body</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>也可以通过 <code>on</code> 方法给组件实例绑定事件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">btn.on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'clicked'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>以上方法已经能解决我们使用 ExtJS 事件时绝大多数需求。然而当我们扩展或自定义一个组件时，常常需要注册自定义的事件并在合适的时机触发它们。</p>\n<p>本篇文章要讲的事件模型分为三部分，以上为其一 —— 绑定：</p>\n<ul>\n<li>注册</li>\n<li>触发</li>\n<li>绑定</li>\n</ul>\n<h2 id=\"ExtJS事件模型完整示例\"><a href=\"#ExtJS事件模型完整示例\" class=\"headerlink\" title=\"ExtJS事件模型完整示例\"></a>ExtJS事件模型完整示例</h2><p>先来看一个较为完整的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'MyButton'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Ext.button.Button'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    initComponent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callParent();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.addEvents(<span class=\"string\">'blink'</span>);  <span class=\"comment\">// &lt;------ 注册</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    shake: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Give your body a bit of a shake!'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fireEvent(<span class=\"string\">'blink'</span>, <span class=\"keyword\">this</span>); <span class=\"comment\">// &lt;------ 触发</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Take a break!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mybtn = Ext.create(<span class=\"string\">'MyButton'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;------ 绑定</span></span><br><span class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Begin to blink!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Begin to blink, again!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mybtn.shake();</span><br></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<p><img src=\"event_01.png\" alt=\"示例结果\"></p>\n<p>从代码中可以看出，对于 <code>shake</code> 方法只需要在合适的时机触发 <code>blink</code> 事件，它不需要知道有谁绑定了该事件，也不关心事件的执行过程，从而将 <code>blink</code> 这一特定行为从 <code>shake</code> 中解耦。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>理解 ExtJS 的事件机制，需要先了解 <strong>观察者模式</strong>。该模式维护了一个被观察对象(subject)与其观察者(observer)之间的一对多关系，当对象状态变化时，会自动通知并更新观察者。</p>\n<p><img src=\"event_02.gif\" alt=\"观察者模式类图\"></p>\n<p>一个被观察对象和两个观察者调用关系时序图如下：</p>\n<p><img src=\"event_03.gif\" alt=\"观察者模式时序图\"></p>\n<p>剥离出精简的代码实现示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Subject</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.observers = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Subject.prototype = &#123;</span><br><span class=\"line\">    addObserver: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ob</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observers.push(ob);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    removeObserver: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// remove...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    notify: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>.observers.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; len; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observers[i].update();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.update = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' was updated!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> zs = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'zhangsan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ls = <span class=\"keyword\">new</span> Observer(<span class=\"string\">'lisi'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\">subject.addObserver(zs);</span><br><span class=\"line\">subject.addObserver(ls);</span><br><span class=\"line\">subject.notify();</span><br></pre></td></tr></table></figure>\n<p>关于观察者模式的书籍、网络资源极其丰富，请参考相应介绍。</p>\n<h2 id=\"发布-订阅模式\"><a href=\"#发布-订阅模式\" class=\"headerlink\" title=\"发布/订阅模式\"></a>发布/订阅模式</h2><p>发布/订阅模式可以被理解为一种特殊的观察者模式。订阅者和发布者并不直接耦合，而是通过注册事件的方式，因此较之观察者模式，其耦合度更低。</p>\n<p>这里摘录 JavaScript 大神 addyosmani 实现的发布/订阅模式代码供参考：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> window, doc, undef </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> topics = &#123;&#125;,</span><br><span class=\"line\">        subUid = <span class=\"number\">-1</span>,</span><br><span class=\"line\">        pubsubz =&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    pubsubz.publish = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> topic, args </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!topics[topic]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> subscribers = topics[topic],</span><br><span class=\"line\">                len = subscribers ? subscribers.length : <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (len--) &#123;</span><br><span class=\"line\">                subscribers[len].func(topic, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    pubsubz.subscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> topic, func </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!topics[topic]) &#123;</span><br><span class=\"line\">            topics[topic] = [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> token = (++subUid).toString();</span><br><span class=\"line\">        topics[topic].push(&#123;</span><br><span class=\"line\">            token: token,</span><br><span class=\"line\">            func: func</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    pubsubz.unsubscribe = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> token </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> m <span class=\"keyword\">in</span> topics) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (topics[m]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = topics[m].length; i &lt; j; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (topics[m][i].token === token) &#123;</span><br><span class=\"line\">                        topics[m].splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    getPubSubz = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pubsubz;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.pubsubz = getPubSubz();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;( <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.document ));</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件模型的缺陷\"><a href=\"#事件模型的缺陷\" class=\"headerlink\" title=\"事件模型的缺陷\"></a>事件模型的缺陷</h2><p>事件模型虽然能够较好的解耦，为编码工作带来灵活性，然而它也有较为明显的缺陷：</p>\n<p><strong>1. 发布者无法得知订阅者中产生的错误</strong></p>\n<p>例如之前的示例，如果订阅者中抛出了异常：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Ext.Error.raise(<span class=\"string\">'I am too old to blink!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们无法在发布者中得知这一情况。下面的代码无法起作用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">shake: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Give your body a bit of a shake!'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fireEvent(<span class=\"string\">'blink'</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Take a break!'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尽管你可以通过回调方式，将 Error 对象作为回调参数反向传回给发布者，但这样带来的编码复杂度是很高的，而且不能保证每个订阅者都正确捕获异常并传回。同时，发布者自己也会因为异常处理而变得臃肿，且它无法很好的识别异常类型，更无从得知合适的处理逻辑。</p>\n<p><strong>2. 流程控制变得复杂</strong></p>\n<p>事件的订阅过程相对较为分散，通常很难确实绑定的顺序。如果你需要做一系列操作，通过事件模型来处理的话，会把问题变得极为复杂繁琐。</p>\n<p><strong>3. 多个订阅者之间无法通讯，它们互相不了解彼此做了哪些操作</strong></p>\n<p>我发现，这一问题在实际使用 ExtJS 时暴露的极为普遍。很多人习惯通过绑定事件时的回调参数修改此对象，这样一来，由于其它订阅者并不知道他做了什么操作，极有可能得到一个不正确的对象状态。</p>\n<p>例如，张三在某个 JavaScript 源文件中通过绑定事件修改了 button 的状态：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">btn</span>) </span>&#123;</span><br><span class=\"line\">    btn.setText(<span class=\"string\">'MyButton'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>而李四并不知道张三做了什么，他想当然地基于 button 的状态做了一些操作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybtn.on(<span class=\"string\">'blink'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">btn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> text = btn.getText();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (text === <span class=\"string\">'Button'</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am a button!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>遗憾的是，如果李四的代码先于张三的执行，则李四能得到正确结果；如果张三的代码先于李四的执行，则李四不能得到正确结果。这显然使得代码结构变得混乱，本来通过事件模型解耦而不相关的代码，又无形地被耦合起来了。而更痛苦的是这样的代码变得更分散，很可能彼此并不知道他人的存在。</p>\n<p><strong>4. 代码调试变得困难</strong></p>\n<p>事件注册到容器中，发布者和订阅者不存在直接调用关系，因此代码调试相对困难一些。</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>button 组件的 <code>handler</code> 不是事件。ExtJS中配置的 <code>handler</code> 只是一个方法调用，不进行事件绑定；</p>\n"},{"title":"ExtJS 核心概念 - 组件的生命周期","url":"http://zhangqiang.work/posts/709201507/","content":"<p>ExtJS 的组件生命周期分为三个阶段：</p>\n<ul>\n<li>初始化</li>\n<li>渲染</li>\n<li>销毁</li>\n</ul>\n<p>准确理解组件的生命周期过程，是正确使用 ExtJS 框架的基础。尤其当你需要编写 ExtJS 的插件或对其做其它扩展时，更应该知道组件详细的生命周期过程。</p>\n<p><img src=\"lifecycle_01.png\" alt=\"ExtJS的组件生命周期\"></p>\n<p>从图中可以看出，ExtJS 的组件始于<strong>初始化</strong>终于<strong>销毁</strong>，而且组件未必需要经过<strong>渲染</strong>即可进入销毁阶段。不同版本的 ExtJS 处理的细节必然不尽相同，我很难告诉你一个永远正确的、详实的生命周期过程，因此我以 4.2 版本为蓝本讨论其生命周期中具体的处理过程，希望给你一个方向性的指引，而你应该根据手中具体的版本结合API文档，甚至是源代码来确定生命周期过程中的每一个细节。值得庆幸的是，我在 ExtJS 3.4/4.2/5.1 三个版本中，都没有发现其生命周期有很大的变动。</p>\n<p>另一件值得补充的事是，我在实践中发现有不少人知道 “ExtJS 存在生命周期” 这么一回儿事，然而并不清楚这和自己的代码有什么关系。我想在正式讲解前告诉你，当你 <code>Ext.create</code> (或 <code>new</code>) 一个组件时，它的生命周期过程就会开始，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.create(<span class=\"string\">'Ext.grid.Panel'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'MyPanel'</span>,</span><br><span class=\"line\">    height: <span class=\"number\">200</span>,</span><br><span class=\"line\">    width: <span class=\"number\">400</span>,</span><br><span class=\"line\">    store: ...,</span><br><span class=\"line\">    columns: ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们创建了一个 ExtJS 的列表组件，此时它会完成生命周期中的 “初始化” 阶段，当我们在浏览器中执行以上代码时并没有看到列表页面，因为组件还没有渲染。如果我们配置了 <code>renderTo</code> 属性，则它会在初始化后直接进入渲染阶段。</p>\n<p>你在无意中操作生命周期的情况也有很多，又如，通过调用 <code>add</code> 方法给 toolbar 组件增加新的按钮：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toolbar.add([</span><br><span class=\"line\">    &#123;text: <span class=\"string\">'Button 1'</span>&#125;,</span><br><span class=\"line\">    &#123;text: <span class=\"string\">'Button 2'</span>&#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>这一过程通常也会经过“初始化”和“渲染”阶段。我们只是传入了一个极其普通的 JavaScript 对象，ExtJS 框架内部会帮我们创建、初始化 <code>Button</code> 对象并将其渲染到相应容器(此例为 <code>toolbar</code>)中。如果你想自己完成初始化操作，可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anothorBtn = Ext.create(<span class=\"string\">'Ext.button.Button'</span>, &#123;</span><br><span class=\"line\">    text: <span class=\"string\">'MyButton'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">toobar.add(anothorBtn);</span><br></pre></td></tr></table></figure>\n<p>两种方式稍有区别，后者可能会过早地创建一个也许永远用不着的组件。现在来看看具体的生命周期过程:</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>初始化是组件开始构建的起点，你可以粗略地认为，本阶段仅是创建 JavaScript 对象的过程，也正因此初始化可能是执行速度最快的。这一阶段会进行必要的配置信息处理、注册一些基础事件，甚至会做预渲染工作。</p>\n<h3 id=\"1-配置应用\"><a href=\"#1-配置应用\" class=\"headerlink\" title=\"1. 配置应用\"></a>1. 配置应用</h3><p>优先处理参数中传入的配置信息。通常这一过程只是把配置对象复制到想要创建的 ExtJS 组件中以备后续使用。<code>initialConfig</code> 中保存着你传入的原始参数。代码实现看起来是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (config) &#123;</span><br><span class=\"line\">    Ext.apply(<span class=\"keyword\">this</span>, config);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    config = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.initialConfig = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-注册事件\"><a href=\"#2-注册事件\" class=\"headerlink\" title=\"2. 注册事件\"></a>2. 注册事件</h3><p>之后会注册监听事件，注意是 <strong>注册</strong> 而非触发或绑定事件。事件注册过程就像变量声明，只是声称当前组件有哪些事件，此时应该在文档中描述清楚这些事件何时会触发。ExtJS 提供了注册事件的方法，非常方便：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addEvents(<span class=\"string\">'activate'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-生成ID\"><a href=\"#3-生成ID\" class=\"headerlink\" title=\"3. 生成ID\"></a>3. 生成ID</h3><p>如果你通过参数传入了 id 则使用传入的，否则将会生成新的。ExtJS 的代码实现非常有趣，我在 ExtJS 2.2 版本中初次见到这个方法时，就觉得它是个不错的 JS 技巧，直到现在ExtJS 还在使用它，来欣赏一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getId: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id || (<span class=\"keyword\">this</span>.id = <span class=\"string\">'ext-comp-'</span> + (<span class=\"keyword\">this</span>.getAutoId()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插句题外话。我建议应用中除了公共的、使用频率极高的组件，尽量不要明确指定 id ，毕竟 id 最终会被用来生成 html 标签的 id 属性。此时重复的 id 将导致不可预知的后果。如果你希望在某组件中快速地找到子组件，使用 <code>itemId</code> ！</p>\n<h3 id=\"4-实例化插件\"><a href=\"#4-实例化插件\" class=\"headerlink\" title=\"4. 实例化插件\"></a>4. 实例化插件</h3><p>插件的实例化过程是早于 <code>initComponet</code> 的，以便于像 gridpanel 的 <code>editing</code> 这类插件提前处理 editor 等。</p>\n<h3 id=\"5-initComponent\"><a href=\"#5-initComponent\" class=\"headerlink\" title=\"5. initComponent\"></a>5. initComponent</h3><p>使用过 ExtJS 的人都知道这个方法。<code>initComponent</code> 方法的设计动机是给子类一个切入点，使其可以友好地参与父类的初始化过程。在方法中你可以：注册子类特有的事件，创建对 store 的引用，创建并实例化子组件等。通常你只需要覆盖并实现此方法来扩展某组件的初始化过程即可。</p>\n<h3 id=\"6-组件注册到-ComponentManager-中\"><a href=\"#6-组件注册到-ComponentManager-中\" class=\"headerlink\" title=\"6. 组件注册到 ComponentManager 中\"></a>6. 组件注册到 ComponentManager 中</h3><p>此步会将组件注册到 ComponentManager 中，它是 ExtJS 的组件管理器，当你调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.getCmp(<span class=\"string\">'foo'</span>);</span><br></pre></td></tr></table></figure>\n<p>时，实际上正是从组件管理器中找到对应组件。关于 ComponentManager 详细的介绍可以阅读API文档，唯一需要提醒你注意的是，不要使用重复 id ! 后注册的相同 id 的组件会覆盖之前的。</p>\n<h3 id=\"7-增加-observable-和-state\"><a href=\"#7-增加-observable-和-state\" class=\"headerlink\" title=\"7. 增加 observable 和 state\"></a>7. 增加 observable 和 state</h3><p><code>observable</code> 为组件提供事件注册、触发及监听绑定的能力；<code>state</code> 为组件提供状态信息，如用户拖动的表格列宽、当前打开的标签页等。ExtJS 在生命周期过程中通过 mixin 的方式掺和了这两个能力，换言之，如果我们扩展的组件继承自 ExtJS 的任意一个组件，我们不需要显式地重复调用此二者，因为 ExtJS 已经为我们调用了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.mixins.observable.constructor.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.mixins.state.constructor.call(<span class=\"keyword\">this</span>, config);</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-注册状态事件-resize\"><a href=\"#8-注册状态事件-resize\" class=\"headerlink\" title=\"8. 注册状态事件 resize\"></a>8. 注册状态事件 resize</h3><p>在上一步骤中注入了 state 能力，然后为组件绑定 resize 事件，以便组件随容器自动改变大小。这一步骤是 ExtJS 所有组件能够完成屏幕自适应的基础。</p>\n<h3 id=\"9-初始化插件\"><a href=\"#9-初始化插件\" class=\"headerlink\" title=\"9. 初始化插件\"></a>9. 初始化插件</h3><p>也就是调用插件的 <code>init</code> 方法。在之前的步骤中已经实例化了所需插件，此步骤调用并执行插件。</p>\n<h3 id=\"10-处理-ComponentLoader\"><a href=\"#10-处理-ComponentLoader\" class=\"headerlink\" title=\"10. 处理 ComponentLoader\"></a>10. 处理 ComponentLoader</h3><p><code>ComponentLoader</code> 提供了一种可能：通过Ajax传回的内容构造组件。详细使用参考API文档。</p>\n<h3 id=\"11-进入渲染阶段\"><a href=\"#11-进入渲染阶段\" class=\"headerlink\" title=\"11. 进入渲染阶段\"></a>11. 进入渲染阶段</h3><p>如果指定了 <code>renderTo</code> 属性，则继续渲染组件，否则等待用户调用渲染方法，或通过父容器调用渲染方法。<br>如果是 “非容器内” 组件且配置了 <code>autoshow</code> 属性，则 <code>show</code> 组件。</p>\n<h2 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h2><p>组件成功初始化后就具备了渲染条件，渲染是组件实际绘制到浏览器上并展示给用户的过程。此阶段通常最慢，如果组件极复杂，渲染过程会消耗大量的CPU。我们前面提到过，如果你在创建组件时就指定了 <code>renderTo</code> 属性，组件会在初始化后直接开始渲染，当然你也可以通过调用 <code>render</code> 方法手动开启渲染过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myCmp.render(<span class=\"string\">'myDivId'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>render</code> 方法会将你的组件渲染到指定的 DOM 元素上。也许你会有疑问：“我的整个 ExtJS 项目中，根本没有出现过 renderTo 或 render 字样，可是页面不依然正常渲染了吗？”。很好，这至少说明你正在使用并认真观察过 ExtJS 的样子。你需要知道的更多：首先，ExtJS 的某些特定组件并不需要指定 <code>renderTo</code> 也很清楚自己往哪里渲染。例如 <code>viewport</code> 组件，它总是会渲染到 document body 上；另外，如果你把某组件放到另一个父容器组件中，父容器组件内部会根据当前布局情况自动调用<br><code>render</code> 方法。</p>\n<p>知道了这些，让我们来看看渲染阶段的具体步骤：</p>\n<h3 id=\"1-触发-beforerender\"><a href=\"#1-触发-beforerender\" class=\"headerlink\" title=\"1. 触发 beforerender\"></a>1. 触发 beforerender</h3><p>首先触发 <code>beforerender</code> 事件。如果任一绑定到组件的 <code>beforerender</code> 事件函数中返回了 <code>false</code>，都将会阻止渲染过程的继续进行。如果你想在组件 <strong>初始化</strong> 之后 <strong>渲染</strong>之前做一些特定处理，绑定 <code>beforerender</code> 是个不错的选择。</p>\n<p>必须在组件渲染之前就绑定 <code>beforerender</code> 事件，渲染之后绑定的该事件无效(除非重新渲染或重复渲染)。这个道理很容易懂，不需要我多解释。然而很奇怪的是，我在实际项目中屡屡发现有些朋友犯这类错误。我想主要原因可能是当组件众多且关系稍有复杂时，他们便搞不清各组件正处于生命周期中的哪个阶段了。此类问题我无法给你一个万能的解决方案，但有一点可以确信：搞清楚 ExtJS 的组件生命周期，不断地独立调试，此类问题会越来越少。</p>\n<h3 id=\"2-缓存\"><a href=\"#2-缓存\" class=\"headerlink\" title=\"2. 缓存\"></a>2. 缓存</h3><p>之后会用 <code>Ext.Element</code> 包裹 DOM 元素，并做一些缓存工作。缓存过程中也会进行预渲染，如果你有兴趣可以去研究 <code>ProtoElement</code> 对象(注意它在 ExtJS 4.2 中是私有的)，否则你只需要知道：ExtJS 为 DOM 元素做了缓存。</p>\n<h3 id=\"3-处理浮动\"><a href=\"#3-处理浮动\" class=\"headerlink\" title=\"3. 处理浮动\"></a>3. 处理浮动</h3><p>设置了 <code>floating</code> 的组件会被 <code>WindowManager</code> 管理，它需要处理 <code>z-index</code> 及焦点问题。当使用 <code>Window</code> 和 <code>Menu</code> 时，建议多关注一下此步骤。</p>\n<h3 id=\"4-设置容器\"><a href=\"#4-设置容器\" class=\"headerlink\" title=\"4. 设置容器\"></a>4. 设置容器</h3><p>容器有两种：一种是普通的 div，例如你通过 <code>renderTo</code> 指定了 DOM 元素，ExtJS 会在其下创建一个 div 并用 <code>Ext.dom.Element</code> 包裹，再将它作为当前组件的容器；另一种是已有的组件，此时该组件会成为当前组件的父组件。</p>\n<p>容器为 ExtJS 的组件提供了依存环境，通俗地讲，设置容器的过程解决了这样一个问题：构成当前组件低层的这么一大堆 HTML ，最终要被插入到页面上的哪个 HTML 下呢？</p>\n<h3 id=\"5-onRender\"><a href=\"#5-onRender\" class=\"headerlink\" title=\"5. onRender\"></a>5. onRender</h3><p>执行 <code>onRender</code> 方法。该方法之于渲染的重要性，如 initComponent 之于初始化。它是子类扩展渲染过程的切入点，通常子类中应该先调用父类的 onRender 方法，以便保证所有的核心 DOM 结构已经处理完毕。</p>\n<h3 id=\"6-设置-hideMode-和-overCls\"><a href=\"#6-设置-hideMode-和-overCls\" class=\"headerlink\" title=\"6. 设置 hideMode 和 overCls\"></a>6. 设置 hideMode 和 overCls</h3><p>要了解 <code>hideMode</code> 你需要阅读API文档并学习相关 CSS 知识；<code>overCls</code> 用来为鼠标划过时增加额外的样式。</p>\n<h3 id=\"7-触发-render\"><a href=\"#7-触发-render\" class=\"headerlink\" title=\"7. 触发 render\"></a>7. 触发 render</h3><p>触发 render 事件。此时所有的组件使用的 HTML 元素已被注入到 DOM 中，所有的样式也正确应用并处理。在 render 事件中操作组件自身的 DOM 是安全的，不过你需要清楚地知道，此时并非组件在页面中展示的最终形态，接下来要讲的后续操作有可能改变组件的结构、样式等。</p>\n<h3 id=\"8-afterRender\"><a href=\"#8-afterRender\" class=\"headerlink\" title=\"8. afterRender\"></a>8. afterRender</h3><p><code>afterRender</code> 是又一个实用的模板方法。渲染过程中调用此方法的主要目的是，完成一些渲染的收尾工作。这一阶段可以处理组件的大小(width/height)、组件对齐或增加 HTML style 等。如果需要，还会处理 resize , 处理滚动问题，以及拖拽等。子类中同样不要忘记调用父类的 afterRender 方法。</p>\n<h3 id=\"9-触发-afterrender\"><a href=\"#9-触发-afterrender\" class=\"headerlink\" title=\"9. 触发 afterrender\"></a>9. 触发 afterrender</h3><p><code>afterrender</code> 事件被触发时，你可以放心地操作 DOM 了。此时组件已经接近最终形态，除了是否显示。</p>\n<h3 id=\"10-设置-hidden\"><a href=\"#10-设置-hidden\" class=\"headerlink\" title=\"10. 设置 hidden\"></a>10. 设置 hidden</h3><p>如果组件被设定为 <code>hidden</code> ，将其对应的 HTML 元素隐藏起来。</p>\n<h2 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h2><p>死亡对于我们来说是人生中的一件大事，对于组件亦然，销毁过程自然是指为组件处理后事。这些后事包括：从 DOM 树中将其移除；从 <code>ComponentManager</code> 中将其注销；销毁所有绑定到组件的事件等。</p>\n<p>通过调用 <code>destroy</code> 方法即可销毁组件。当然多数时候你并不需要手动写代码调用它，组件的父容器在销毁时会递归调用子组件的 destroy 方法。另外，像 window 等组件的 <code>close</code> 方法中，也会视配置情况自动调用 destroy 方法。</p>\n<p>当你开发自己的组件时，合理地销毁组件是很重要的。例如，如果我们在组件渲染时绑定了自定义的事件，而此事件没有被及时销毁，当再次渲染组件时，事件会被重复绑定至底层的 DOM。有时，这类程序缺陷并非那么容易被发现，因为相同的代码反复执行多次并不一定会产生副作用，它只是在渐渐地拖慢你的应用而已。而当用户刷新浏览器时，世界又再次变得美好。</p>\n<p>但如果不是简单的绑定事件呢？如果你那存在缺陷的代码会去反复创建另一个复杂的组件呢？如果你多次执行的是非幂等操作呢？所以请我们尊重每一个组件，让它们能够善始善终。</p>\n<p>来了解一下销毁过程：</p>\n<h3 id=\"1-触发-beforedestroy\"><a href=\"#1-触发-beforedestroy\" class=\"headerlink\" title=\"1. 触发 beforedestroy\"></a>1. 触发 beforedestroy</h3><p>和许多事件一样，如果任一绑定到组件的 <code>beforedestroy</code> 事件函数中返回了 <code>false</code>，都将会阻止销毁过程的继续进行。</p>\n<h3 id=\"2-beforeDestroy\"><a href=\"#2-beforeDestroy\" class=\"headerlink\" title=\"2. beforeDestroy\"></a>2. beforeDestroy</h3><p>调用 <code>beforeDestroy</code> 模板方法。它和前面介绍的模板方法类似，在销毁前调用。</p>\n<h3 id=\"3-注销浮动\"><a href=\"#3-注销浮动\" class=\"headerlink\" title=\"3. 注销浮动\"></a>3. 注销浮动</h3><p>如果组件设置了 <code>floating</code> ，这一步骤会从 <code>ZIndexManager</code> 中将浮动组件注销。</p>\n<h3 id=\"4-从父容器中删除\"><a href=\"#4-从父容器中删除\" class=\"headerlink\" title=\"4. 从父容器中删除\"></a>4. 从父容器中删除</h3><p>接下来调用父容器的 <code>remove</code> 方法，从父容器中删除组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.ownerCt.remove(<span class=\"keyword\">this</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-onDestroy\"><a href=\"#5-onDestroy\" class=\"headerlink\" title=\"5. onDestroy\"></a>5. onDestroy</h3><p><code>onDestroy</code> 是实际销毁组件的方法，它也是一个模板方法。在 ExtJS 的组件中，此步骤会解除 <code>resize</code> 事件的绑定、销毁与当前组件关联的浮动组件(如 <code>loadMask</code>)，它还会删除绑定到组件上的延迟任务等。如果你自定义并扩展了 ExtJS 的组件，不要忘记在此步骤中回收一切应该回收的资源，让它们连同你的组件一起被销毁。</p>\n<h3 id=\"6-销毁插件\"><a href=\"#6-销毁插件\" class=\"headerlink\" title=\"6. 销毁插件\"></a>6. 销毁插件</h3><p>销毁插件的过程即是依次调用各插件的 <code>destroy</code> 方法的过程。所以，当你编写插件时，不要忘记为其编写 <code>destroy</code> 方法。</p>\n<h3 id=\"7-解除-HTML-事件绑定并销毁元素\"><a href=\"#7-解除-HTML-事件绑定并销毁元素\" class=\"headerlink\" title=\"7. 解除 HTML 事件绑定并销毁元素\"></a>7. 解除 HTML 事件绑定并销毁元素</h3><p>如果组件已经被渲染，则将其对应的 HTML 元素中绑定的事件解除，并销毁元素。如果组件初始化后没有渲染(如 <code>store</code>，通常不需要渲染)，则什么也不做。</p>\n<p>需要指出的是，此步骤解除的是绑定到底层 HTML 元素上的事件，而非绑定到 ExtJS 组件上的事件。一般情况下，绑定到组件的事件会被框架内部继续绑定至 HTML 元素，你不需要手动为 HTML 绑定事件。此类事件(如 <code>click</code>)需要用户通过浏览器实际发生交互才会触发。还有一种事件是 ExtJS 组件特有的，例如 <code>render</code> 事件，它只在 ExtJS 组件生命周期过程中触发，不会被绑定到 HTML 元素上。经过 ExtJS 的精心封装，这两类事件在代码层面来看并没有什么区别，但我希望你还是能正确区分它们。</p>\n<h3 id=\"8-触发-destroy\"><a href=\"#8-触发-destroy\" class=\"headerlink\" title=\"8. 触发 destroy\"></a>8. 触发 destroy</h3><p>触发 <code>destroy</code> 事件。请注意这个事件触发的时机，在它之前我们已经销毁的 DOM 元素，因此，你不能在 <code>destroy</code> 事件中操作 DOM 树。</p>\n<h3 id=\"9-从-ComponentManager-中注销组件\"><a href=\"#9-从-ComponentManager-中注销组件\" class=\"headerlink\" title=\"9. 从 ComponentManager 中注销组件\"></a>9. 从 ComponentManager 中注销组件</h3><p>我们在初始化阶段，将组件注册到 ComponentManager 中，就像为每个组件办理身份证并备案.现在，我们理应为其销户，将组件从 ComponentManager 中注销。</p>\n<p>有趣的是，ComponentManager 的管理方式和我们现实生活中很像。注销组件仅仅代表组件不受 ComponentManager 管理，你不再能通过 <code>Ext.getCmp()</code> 得到它，然而并不代表组件真正被销毁。就像你去注销身份证，并不代表本人已经死亡。当然对于组件，尤其是 ExtJS 提供的现有组件，从 ComponentManager 中注销前应该会被销毁。</p>\n<h3 id=\"10-解除事件绑定\"><a href=\"#10-解除事件绑定\" class=\"headerlink\" title=\"10. 解除事件绑定\"></a>10. 解除事件绑定</h3><p>此步骤解除的是 ExtJS 组件的事件。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p>如果你有兴趣研究得更深入些，<strong>模板方法模式</strong> 是你必须理解的设计模式。模板方法模式大致的思路是，定义一个操作中的代码骨架，将一些具体的步骤延迟到子类中实现，使得子类可以不改变代码结构即可改写或扩展某些特定步骤。它非常适合生命周期过程的控制。</p>\n<p>这里给出 Java 实现模板方法模式的代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onRender</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">afterRender</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">render</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        onRender();</span><br><span class=\"line\">        afterRender()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridPanel</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onRender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterRender</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ExtJS 使用此设计模式实现生命周期过程的控制，它提供了足够多的模板方法供子类扩展。例如我们之前讲到的 <code>initComponent</code>、<code>onRender</code>、<code>afterRender</code> 和 <code>onDestroy</code> 等，它们均是在父类中提供骨干实现甚至空实现，然后在子类中不断地扩展。如果你打算研究 ExtJS 的源码，一定要先掌握该设计模式。</p>\n<h2 id=\"模板方法-OR-事件？\"><a href=\"#模板方法-OR-事件？\" class=\"headerlink\" title=\"模板方法 OR 事件？\"></a>模板方法 OR 事件？</h2><p>有一个问题，我想用过一段时间 ExtJS 并思考过的人一定疑惑过：当我们扩展一个组件时，究竟是覆盖实现自己的模板方法，还是为其绑定事件呢？例如我们想在组件销毁前做些自己的操作，是实现 <code>beforeDestroy</code> 方法还是绑定 <code>beforedestroy</code> 事件来处理呢？</p>\n<p>ExtJS 提供了相当丰富的API，丰富到让人觉得混乱。从代码功能上讲，两者几乎是一样的，你可以随你的喜好来决定。而从设计上讲，两者确实有些区别。我不敢说“什么情况下用哪种方式一定最好”，毕竟同一项目中，一致的设计、一致的代码风格会更加重要，你应该优先遵从项目要求。ExtJS 官方也并没给出解释，我只是谈谈我的体会。</p>\n<p>我觉得，当你继承某组件来自定义一个组件时，应该优先使用模板方法来扩展功能。在你的组件内部，尽可能地不要绑定事件。事件机制应该提供更大范围的解耦，而组件之间的继承关系，相对来说耦合度要高许多。当你定义好组件，并在其它场合使用它时，使用事件可能更好。通过在 controller 中绑定事件，将两个或多个组件之间的调用关系分离，各组件只关注自己的行为能力，只需要关心自己能做什么即可，而不用在意有哪些其它组件会调用它。如果用事件的方式代替模板方法，常常会造成组件自己声明事件，自己触发事件，又自己绑定事件的尴尬情况。这有点像你单身一人住，做好早饭时吆喝了一声：“早饭做好了！”，然后一个人默默地坐下来吃饭。省省吧，别吆喝了直接吃！</p>\n<p>基于以上思路，我认为下面的代码并不理想：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'MyPanel'</span>, &#123;</span><br><span class=\"line\">    initComponent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.on(<span class=\"string\">'beforedestroy'</span>, <span class=\"keyword\">this</span>.myBeforeDestroy);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    myBeforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在你知道了 ExtJS 组件的全部生命周期过程，你也知道了如何用模板方法或绑定事件的方式扩展它，选一个你喜欢的组件，把它提供的全部模板方法、全部事件(ExtJS 的每个组件都有自己的新扩展，并不局限于本文章介绍的基础过程)都扩展一下，哪怕只 <code>console.log</code> 一下，来看看它是怎么执行的吧！</p>\n"},{"title":"ExtJS 核心概念 - 类系统","url":"http://zhangqiang.work/posts/626201506/","content":"<p><em>[本内容只针对 ExtJS 4.x 和 ExtJS 5.x 版本]</em></p>\n<p>JavaScript 是一门富有表现力的编程语言，它既可以进行面向对象编程(OOP)，也可以进行函数式编程(FP)。函数是 JavaScript 的一等公民。面向对象编程风格相对要简单一些，这也是 ExtJS 的选择。</p>\n<h2 id=\"传统方式\"><a href=\"#传统方式\" class=\"headerlink\" title=\"传统方式\"></a>传统方式</h2><p>我们先来看一下传统的使用 JavaScript 实现 OOP 的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Programmer = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lang = <span class=\"string\">'java'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Programmer.prototype = &#123;</span><br><span class=\"line\">    isProgrammer: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    setName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    program: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' codes in '</span> + <span class=\"keyword\">this</span>.lang + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们借用函数对象模拟出“类“的概念，并创建了 <code>Programmer</code> 类。同时，给此类增加了两个属性： <code>name</code> 和 <code>lang</code> 。紧接着，我们在 Programmer 的原型对象上增加了 <code>isProgrammer</code> 属性和 <code>setName</code> 、<code>program</code> 方法(函数对象的属性与原型对象的属性是有区别的，但不在本教程的讨论范围)。</p>\n<p>现在来看看如何创建 <code>Programmer</code> 的实例并调用其方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zhangsan = <span class=\"keyword\">new</span> Programmer();</span><br><span class=\"line\">zhangsan.setName(<span class=\"string\">'ZhangSan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (zhangsan.isProgrammer) &#123;</span><br><span class=\"line\">    zhangsan.program();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台将打印出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZhangSan codes <span class=\"keyword\">in</span> java.</span><br></pre></td></tr></table></figure>\n<p>这看上去并不难。那么如果我们想模拟出“子类”及“继承”的概念呢？我想先给你看一下它的代码实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Geek = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Geek.superclass.constructor.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.niubility = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Geek.prototype = <span class=\"keyword\">new</span> Programmer();</span><br><span class=\"line\">Geek.superclass = Programmer.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\">Geek.prototype.superSkill = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'kill himself.'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们实现了 <code>Programmer</code> 的子类 <code>Geek</code> 并为其扩展了 <code>niubility</code> 属性和 <code>superSkill</code> 方法。这里将 <code>Geek</code> 的原型指向 <code>Programmer</code> 的一个实例，以此来获得 <code>Programmer</code> 上的所有属性及方法。除此之外，我们还将 <code>Geek</code> 的 <code>superclass</code> 指向 <code>Programmer.prototype</code> ，这么一来便可以通过 <code>superclass</code> 引用调用并继承父类方法。</p>\n<p>如果上面的代码对你来说并不容易理解，那么你可能需要补充一下 JavaScript 的基础知识。虽然 ExtJS 为我们隐藏了诸多实现细节，但若想有所提高并了解 ExtJS 的工作原理，准确理解以上代码是极为必要的。更多 JavaScript 面向对象编程的知识，我推荐你阅读<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript\" target=\"_blank\" rel=\"external\">MDN相关文档</a> 。</p>\n<p>接下来构造一个 <code>Geek</code> 实例并调用其方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lisi = <span class=\"keyword\">new</span> Geek();</span><br><span class=\"line\">lisi.setName(<span class=\"string\">'LiSi'</span>);</span><br><span class=\"line\">lisi.lang = <span class=\"string\">'JavaScript'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (lisi.isProgrammer &amp;&amp; lisi.niubility) &#123;</span><br><span class=\"line\">    lisi.program();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(lisi.name + <span class=\"string\">' can '</span> + lisi.superSkill());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台将打印出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiSi codes <span class=\"keyword\">in</span> JavaScript.</span><br><span class=\"line\">LiSi can <span class=\"built_in\">kill</span> himself.</span><br></pre></td></tr></table></figure>\n<h2 id=\"ExtJS的方式\"><a href=\"#ExtJS的方式\" class=\"headerlink\" title=\"ExtJS的方式\"></a>ExtJS的方式</h2><p>从上一小节可以看出，传统的面向对象编程方式稍有些复杂，而且代码较为分散，继承关系也不直观。ExtJS 为了克服此问题，在 4.0+ 版本中引入了全新的类系统。让我们先来看看如何用 ExtJS 的方式实现上一节的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Programmer'</span>, &#123;</span><br><span class=\"line\">    isProgrammer: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lang = <span class=\"string\">'java'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    program: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' codes in '</span> + <span class=\"keyword\">this</span>.lang + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> zhangsan = Ext.create(<span class=\"string\">'Programmer'</span>);</span><br><span class=\"line\">zhangsan.setName(<span class=\"string\">'ZhangSan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (zhangsan.isProgrammer) &#123;</span><br><span class=\"line\">    zhangsan.program();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现继承关系也非常简单直观，来看子类的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Geek'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Programmer'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callParent();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.niubility = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    superSkill: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'kill himself.'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lisi = Ext.create(<span class=\"string\">'Geek'</span>);</span><br><span class=\"line\">lisi.setName(<span class=\"string\">'LiSi'</span>);</span><br><span class=\"line\">lisi.lang = <span class=\"string\">'JavaScript'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (lisi.isProgrammer &amp;&amp; lisi.niubility) &#123;</span><br><span class=\"line\">    lisi.program();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(lisi.name + <span class=\"string\">' can '</span> + lisi.superSkill());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，ExtJS 类系统的核心即为 <strong>Ext.define</strong> 函数，熟悉 Java 的开发人员可以将其理解为 ExtJS 的定义类的语法。继承关系则可以通过 extend 属性指定。从 4.0+ 版本开始，ExtJS 整个框架都基于 <code>Ext.define</code> 来构建，除了继承以外，该方法还实现了其它诸多类系统特性，让我们通过代码的方式展示一下 <code>Ext.define</code> 的用法。</p>\n<h2 id=\"Ext-define的用法\"><a href=\"#Ext-define的用法\" class=\"headerlink\" title=\"Ext.define的用法\"></a>Ext.define的用法</h2><h3 id=\"1-定义一个类\"><a href=\"#1-定义一个类\" class=\"headerlink\" title=\"1.定义一个类\"></a>1.定义一个类</h3><p>正如前面看到的，<code>Ext.define</code> 可以用来定义一个类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Programmer'</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function (language) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (language) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.language = language;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    language: <span class=\"string\">'[default]'</span>,</span><br><span class=\"line\">    code: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">'I\\'m coding in '</span> + <span class=\"keyword\">this</span>.language + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> zhangsan = <span class=\"keyword\">new</span> Programmer(<span class=\"string\">'Java'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.code()); <span class=\"comment\">// I'm coding in Java.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-继承\"><a href=\"#2-继承\" class=\"headerlink\" title=\"2.继承\"></a>2.继承</h3><p>还有继承：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'JavaScripter'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Programmer'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function (skilled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skilled = skilled || <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callParent([<span class=\"string\">'JavaScript'</span>]);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    skill: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.code() + <span class=\"string\">'I am good at '</span> + <span class=\"keyword\">this</span>.skilled + <span class=\"string\">'.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lisi = <span class=\"keyword\">new</span> JavaScripter(<span class=\"string\">'ExtJS'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lisi.skill()); <span class=\"comment\">// I'm coding in JavaScript.I am good at ExtJS.</span></span><br></pre></td></tr></table></figure>\n<p>继承使用 <code>extend</code> 属性实现，在构造器或方法中，通过 <code>this.callParent()</code> 以调用父类方法。</p>\n<h3 id=\"3-Config\"><a href=\"#3-Config\" class=\"headerlink\" title=\"3.Config\"></a>3.Config</h3><p>定义在 <code>config</code> 中的属性会自动生成 getters/setters： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Programmer'</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function (config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initConfig(config);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        language: <span class=\"string\">''</span>,</span><br><span class=\"line\">        isGeek: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        hasMoney: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> zhangsan = <span class=\"keyword\">new</span> Programmer(&#123;</span><br><span class=\"line\">    language: <span class=\"string\">'JavaScript'</span>,</span><br><span class=\"line\">    isGeek: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.getLanguage());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.getHasMoney());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(zhangsan.hasMoney);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(zhangsan);</span><br></pre></td></tr></table></figure>\n<p>执行结果如下： </p>\n<p><img src=\"classsystem_01.png\" alt=\"classsystem_01\"></p>\n<p>需要<em>注意</em>的是，如果不是继承自现有组件，而是自己定义新类，需要在 <code>constructor</code> 中明确调用 <code>initConfig()</code> 方法。 </p>\n<p>ExtJS 框架并没有对 <code>isXxx</code> 、<code>hasXxx</code> 方法做特殊处理，即示例中默认并<strong>不存在</strong> isGeek() 方法，可以访问 <code>isGee</code> 属性获得其值。然而，<code>isXxx</code> 属性通常更适合作为类的成员对象(属性)，不需放入config中。</p>\n<p>对于 <code>config</code> 中的属性 <code>foo</code>, 框架还会为其自动生成 <code>applyFoo()</code> 和 <code>updateFoo()</code> 方法，这两个方法分别作为 <code>setFoo()</code> 的前置和后置方法被调用，具体使用说明可参考相应API文档。 </p>\n<h3 id=\"4-Statics-和-InheritableStatics\"><a href=\"#4-Statics-和-InheritableStatics\" class=\"headerlink\" title=\"4.Statics 和 InheritableStatics\"></a>4.Statics 和 InheritableStatics</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Computer'</span>, &#123;</span><br><span class=\"line\">    statics: &#123;</span><br><span class=\"line\">        factory: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">brand</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// `this` 指向类本身</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>(brand);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function(brand) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.brand = brand || <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// `this.statics()` 可以引用到当前类</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thinkComputer = Computer.factory(<span class=\"string\">'Thinkpad'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(thinkComputer.brand); <span class=\"comment\">// Thinkpad</span></span><br></pre></td></tr></table></figure>\n<p>关于静态方法，你需要知道：</p>\n<ol>\n<li>在statics方法中，<code>this</code> 指向类本身;</li>\n<li>在其它成员方法中，<code>this.statics()</code> 可以引用到当前类；</li>\n<li>statics对象中的属性/方法，不会被 <code>extend</code> 或 <code>mixin</code>，如有此需求，可使用 <code>InheritableStatics</code> .</li>\n</ol>\n<h3 id=\"5-Mixins\"><a href=\"#5-Mixins\" class=\"headerlink\" title=\"5.Mixins\"></a>5.Mixins</h3><p>ExtJS 提供了掺和模式的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'CanSing'</span>, &#123;</span><br><span class=\"line\">    sing: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I'm on the highway to hell...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.define(<span class=\"string\">'Musician'</span>, &#123;</span><br><span class=\"line\">    mixins: [<span class=\"string\">'CanSing'</span>],</span><br><span class=\"line\">    eat: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Everyone is able to eat.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Musician().eat(); <span class=\"comment\">// Everyone is able to eat.</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Musician().sing(); <span class=\"comment\">// I'm on the highway to hell...</span></span><br></pre></td></tr></table></figure>\n<p>你应该通过掺和模式合理的拆分一些较大的类，将其中可共用的行为方法拆分出去。例如你在设计一个Web界面模板类，它可以保存新数据，也可以删除已有数据，另外还有可能会包含数据修改、数据导入导出、查询检索等等一系列操作。你当然可以设计一个大而全的类来实现所有功能，如果某一特殊场景中不需要“导入导出”功能则通过子类将对应功能入口“弱化”掉。这个设计很糟糕，维护这个大类会让人疯狂，尤其面对新的功能扩展时。</p>\n<p>聪明一些的办法则可以通过继承层级划分，在基类中实现“基本功能”并在子类中扩展其它功能。然而我们的例子中如何划分子类呢？它有太多可能的功能组合。你肯定已经想到，掺和模式可以解决此类问题。</p>\n<p><code>mixins</code> 背后的思想即是通过<strong>聚合</strong>而非继承的方式为某类型扩展行为能力。<br>Java 开发人员理应对此极为熟悉。使用 Golang 的开发人员可以将其理解为结构体的嵌入。</p>\n<p>下面展示一个稍复杂的例子，更多的用法希望你通过API文档自行学习：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Jqueryable'</span>, &#123;</span><br><span class=\"line\">    skill: <span class=\"string\">'jQuery'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.define(<span class=\"string\">'Extjsable'</span>, &#123;</span><br><span class=\"line\">    skill: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'ExtJS'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.define(<span class=\"string\">'Seajsable'</span>, &#123;</span><br><span class=\"line\">    cmd: <span class=\"string\">'Seajs'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.define(<span class=\"string\">'JavaScripter'</span>, &#123;</span><br><span class=\"line\">    extend: <span class=\"string\">'Programmer'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function (skilled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skilled = skilled || <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callParent([<span class=\"string\">'JavaScript'</span>]);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    mixins: &#123;</span><br><span class=\"line\">        writejQuery: <span class=\"string\">'Jqueryable'</span>,</span><br><span class=\"line\">        writeExtjs: <span class=\"string\">'Extjsable'</span>,</span><br><span class=\"line\">        writeSeajs: <span class=\"string\">'Seajsable'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    skill: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.code(),</span><br><span class=\"line\">            <span class=\"string\">'I am good at '</span>,</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mixins.writejQuery.skill,</span><br><span class=\"line\">            <span class=\"string\">','</span>,</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mixins.writeExtjs.skill(),</span><br><span class=\"line\">            <span class=\"string\">','</span>,</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mixins.writeSeajs.cmd,</span><br><span class=\"line\">            <span class=\"string\">'.'</span></span><br><span class=\"line\">        ].join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lisi = <span class=\"keyword\">new</span> JavaScripter(<span class=\"string\">'ExtJS'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lisi.skill());</span><br><span class=\"line\"><span class=\"comment\">// I'm coding in JavaScript.I am good at jQuery,ExtJS,Seajs.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-保留私有作用域空间\"><a href=\"#6-保留私有作用域空间\" class=\"headerlink\" title=\"6.保留私有作用域空间\"></a>6.保留私有作用域空间</h3><p>接下来要展示的代码你应该一看就明白它的用意为何，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// nested scope</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// properties</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>类似的代码结构在使用 ExtJS 之前，你已经无数次使用了。通过给 <code>Ext.define</code> 第二个参数传函数参数的方式，可以在函数中保留私有作用域空间。如果返回对象的属性中包含override等需要预处理的类，必须将上面的函数改为立即执行的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Foo'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// nested scope</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        override: <span class=\"string\">'Ext.Component'</span>,</span><br><span class=\"line\">        <span class=\"comment\">// properties</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<p>唯一需要再次好心叮嘱你的是，使用这种方式一定要注意保证函数造成的闭包空间中，引用到的任何变量一定要能够在合适的时机被GC处理。</p>\n<p>来看一个该用法的示例(注意函数中传入了参数)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Bar'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        statics: &#123;</span><br><span class=\"line\">            id: <span class=\"number\">0</span>,</span><br><span class=\"line\">            nextId: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ++bar.id;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// properties</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bar.nextId()); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bar.nextId()); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-定义匿名类\"><a href=\"#7-定义匿名类\" class=\"headerlink\" title=\"7.定义匿名类\"></a>7.定义匿名类</h3><p>可能没太大用处，<code>Ext.define</code> 可以用来定义匿名类，将类名设为 <code>null</code> 即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = Ext.define(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'[ anonymous class ]'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Foo().name); <span class=\"comment\">// [ anonymous class ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-单例模式\"><a href=\"#8-单例模式\" class=\"headerlink\" title=\"8.单例模式\"></a>8.单例模式</h3><p>只需将 <code>singleton</code> 属性设置为 <code>true</code> 即可： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Logger'</span>, &#123;</span><br><span class=\"line\">    singleton: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    log: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-覆盖\"><a href=\"#9-覆盖\" class=\"headerlink\" title=\"9.覆盖\"></a>9.覆盖</h3><p>通过 <code>override</code> 属性可以替换掉父类的方法，也可以为其增加新方法(详细的用法请参考API文档，毕竟本教程并非为了介绍API文档而作)。值得一提的是，它有一些很实用的场景，例如，拆分巨大的类 ： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在定义巨大的类时，可以只定义一些基础属性config、statics</span></span><br><span class=\"line\"><span class=\"comment\">// 以及一些基础的成员方法等</span></span><br><span class=\"line\">Ext.define(<span class=\"string\">'MyLargeClass'</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function (config) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initConfig(config);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    config: &#123;</span><br><span class=\"line\">        name: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将MyLargeClass的方法分类，一部分方法放到part1中</span></span><br><span class=\"line\">Ext.define(<span class=\"string\">'MyLargeClass.part1'</span>, &#123;</span><br><span class=\"line\">    override: <span class=\"string\">'MyLargeClass'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: function () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callParent(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    jump: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' jumps!'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    code: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' is coding in javascript!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另一部分方法放到part2中</span></span><br><span class=\"line\">Ext.define(<span class=\"string\">'MyLargeClass.part2'</span>, &#123;</span><br><span class=\"line\">    override: <span class=\"string\">'MyLargeClass'</span>,</span><br><span class=\"line\">    sing: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' sings a song!'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 一般情况下应该避免像code方法这种多次覆盖的现象</span></span><br><span class=\"line\">    code: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' is coding in java!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> largeClass = <span class=\"keyword\">new</span> MyLargeClass(&#123;name: <span class=\"string\">'ZhangSan'</span>&#125;);</span><br><span class=\"line\">largeClass.jump(); <span class=\"comment\">// ZhangSan jumps!</span></span><br><span class=\"line\">largeClass.sing(); <span class=\"comment\">// ZhangSan sings a song!</span></span><br><span class=\"line\">largeClass.code(); <span class=\"comment\">// ZhangSan is coding in java!</span></span><br></pre></td></tr></table></figure>\n<p>实际应用时，当一个类方法特别特别特别多时(巨大的类)，可以进行合理拆分。同时，结合动态类加载机制，将不同的部分part1、part2放在不同的JS源文件中，主类定义中使用 <code>requires</code> 引用所有的部分。</p>\n<p><code>Ext.define</code> 还提供了定义别名、动态加载、定义向下兼容的类名等多种功能用法，不再一一叙述。</p>\n<h2 id=\"深入一些\"><a href=\"#深入一些\" class=\"headerlink\" title=\"深入一些\"></a>深入一些</h2><p>ExtJS 类系统提供了这么多花哨的功能，怎么实现的呢？下面的内容我将带着你一步一步深入学习 ExtJS 类系统的实现过程。</p>\n<p>ExtJS 在定义类的时候，基本思路为：</p>\n<ol>\n<li>提供一个基类 <code>Ext.Base</code>，所有类继承自此，在此类中定义所有类共有的属性(function对象的属性，亦即所谓静态属性)；</li>\n<li>提供 <code>Ext.Class</code> 类，完成类定义后的前置处理；</li>\n<li>提供 <code>Ext.ClassManager</code> 单例，负责管理框架内的类。Ext.define方法的实际实现也源于此，同时实际的后置处理方法也在此实现；</li>\n<li>提供 <code>Ext.Loader</code> 单例，负责类的动态加载。同时，加载相关的前置处理方法在此实现。</li>\n</ol>\n<p>动态加载的内容将单独讲解，不在此讨论。</p>\n<p>我剥离出实现类定义的<strong>骨干代码</strong>，先来看看：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Ext = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mkCtor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constructor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.constructor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) || <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Class;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.ClassManager = &#123;</span><br><span class=\"line\">    create: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctor = mkCtor();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Class(ctor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.define = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ext.ClassManager.create.apply(Ext.ClassManager, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(Ext.define(<span class=\"string\">'Foo'</span>));</span><br></pre></td></tr></table></figure>\n<p>控制台将打印出：</p>\n<p><img src=\"classsystem_02.png\" alt=\"classsystem_02\"></p>\n<p>从代码中可以看出， <code>Ext.define</code> 通过调用 <code>Ext.ClassManager.create</code> 方法，实际生成的是 <code>Ext.Class</code> 的实例，即 <code>new Ext.Class(ctor);</code>。而根据 <code>new</code> 操作符的特性，当创建 Ext.Class 时实际创建的将是传入的函数对象，即执行 <code>makeCtor()</code> 后生成的 <strong>constructor</strong> 函数对象。</p>\n<p>于是可以知道，ExtJS 类系统实质上创建的都是 <code>makeCtor</code> 函数中的 <code>constructor</code> 对象，其内部只是继续调用当前(this)配置中的 constructor 属性所指向的函数，这么做的好处便是：所得到的 constructor 的原生链非常干净，没有其它多余的属性，同时便于在这一过程中为生成的对象增加属性、做预处理等。</p>\n<p>明白了以上基础代码结构，现在来加个 <code>Ext.Base</code> 类，同时我们实现一个极度简化版的 <code>addMembers</code> 方法(该方法的使用说明参见API文档)和私有属性 <code>$isClass</code> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.Base = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Ext.Base.$isClass = <span class=\"literal\">true</span>;</span><br><span class=\"line\">Ext.Base.addMembers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">members</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, member;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> members) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (members.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">            member = members[i];</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prototype[i] = member;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来改造一下 <code>Ext.Class</code> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> Ext.Base) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Ext.Base.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">            Class[name] = Ext.Base[name];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Class;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>执行代码，控制台将打印出：</p>\n<p><img src=\"classsystem_03.png\" alt=\"classsystem_03\"></p>\n<p>现在，我们的 <code>Foo</code> 类已经获取到 <code>Ext.Base</code> 中的方法了。改变打印输出代码，来用一下新方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Foo = Ext.define(<span class=\"string\">'Foo'</span>);</span><br><span class=\"line\">Foo.addMembers(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'foo name'</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I\\'m foo'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(Foo);</span><br></pre></td></tr></table></figure>\n<p>可以看到结果如下，我们成功地给 <code>Foo</code> 增加了原型方法：</p>\n<p><img src=\"classsystem_04.png\" alt=\"classsystem_04\"></p>\n<p>现在把 <code>addMembers</code> 放到我们的框架代码内部调用，并增加 <code>$className</code> 属性，以此表示我们已经有能力按需要扩展所定义的类的属性，于是得到如下<strong>相对完整的代码</strong> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Ext = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mkCtor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">constructor</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.constructor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) || <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.Base = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Ext.Base.$isClass = <span class=\"literal\">true</span>;</span><br><span class=\"line\">Ext.Base.addMembers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">members</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, member;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> members) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (members.hasOwnProperty(i)) &#123;</span><br><span class=\"line\">            member = members[i];</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prototype[i] = member;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> Ext.Base) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Ext.Base.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">            Class[name] = Ext.Base[name];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Class.addMembers(data);  <span class=\"comment\">//  &lt;-----------</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Class;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.ClassManager = &#123;</span><br><span class=\"line\">    create: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctor = mkCtor();</span><br><span class=\"line\">        data &amp;&amp; (data.$className = className);  <span class=\"comment\">//  &lt;-----------</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Class(ctor, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.define = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ext.ClassManager.create.apply(Ext.ClassManager, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(Ext.define(<span class=\"string\">'Foo'</span>, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'foo name'</span>,</span><br><span class=\"line\">    foo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I\\'m foo'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p>结果如我们所愿：</p>\n<p><img src=\"classsystem_05.png\" alt=\"classsystem_05\"></p>\n<h3 id=\"预处理器\"><a href=\"#预处理器\" class=\"headerlink\" title=\"预处理器\"></a>预处理器</h3><p>现在我们已经有了 ExtJS 类系统基本的代码结构，并能为生成的类提供附加的属性。那么，<code>Ext.define</code> 中诸多的功能特性又是怎么实现的呢，例如 <code>extend</code> 、<code>statics</code>、<code>mixins</code> 等？答案就是：预处理器。</p>\n<p>ExtJS 的预处理器分为 <strong>前置处理器</strong> (在类构造前做一些事情)和 <strong>后置处理器</strong> (在类构造成功后正式使用前做一些事情)。前置处理器放在 <code>Ext.Class</code> 对象中，后置处理器放在 <code>Ext.ClassManager</code> 对象中。如果你熟悉 Nodejs 的 Express 框架或是 Python 的 django 框架，ExtJS 预处理器的设计理念对你来说 so easy, 来看看吧。</p>\n<p>我们先来自己实现它。预处理器至少需要三部分组成：</p>\n<ol>\n<li>盛放处理器的容器</li>\n<li>注册处理器的方法</li>\n<li>执行处理器具体处理过程的方法</li>\n</ol>\n<p>先来解决第一个问题：我们用数组 <code>[]</code> 表示容器，用形如 <code>{name: &#39;处理器名称&#39;, fn: 执行的处理方法}</code> 的对象表示一个处理器。容器就分别叫做 <code>preprocessors</code> 和 <code>postprocessors</code> 吧。之后，注册方法就对应地叫做 <code>registerPreprocessor</code> 和 <code>registerPostprocessor</code> ; 执行方法叫 <code>doPreprocessor</code> 和 <code>doPostprocessor</code> 。</p>\n<p>我说了这么多废话，你一看前置处理器的骨干代码，发现“原来如此简单”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.Class.preprocessors = [];</span><br><span class=\"line\">Ext.Class.registerPreprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">    Ext.Class.preprocessors.push(&#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        fn: fn</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Ext.Class.doPreprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, len,</span><br><span class=\"line\">        pre = Ext.Class.preprocessors;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = pre.length; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        pre[i].fn.call(Ext.Class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们在 <code>ExtClass</code> 中加个 <code>preprocessors</code> 数组，注册方法是往数组里放处理器，执行方法则是把数组里的所有处理器取出来调用一下。就是这么简单！对应的后置处理器完全相同：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.ClassManager.postprocessors = [];</span><br><span class=\"line\">Ext.ClassManager.registerPostprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">    Ext.ClassManager.postprocessors.push(&#123;</span><br><span class=\"line\">        name: name,</span><br><span class=\"line\">        fn: fn</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">Ext.ClassManager.doPostprocessor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i, len,</span><br><span class=\"line\">        post = Ext.ClassManager.postprocessors;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, len = post.length; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        post[i].fn.call(Ext.Class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>处理器有了，调用一下吧。现在改造 <code>Ext.Class</code> ，把已有的代码移到 <code>create</code> 方法中，并为其增加 <code>onCreated</code> 参数，以便回调后置处理器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.Class = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data, onCreated</span>) </span>&#123;</span><br><span class=\"line\">    Ext.Class.create(Class, data);</span><br><span class=\"line\">    Ext.Class.doPreprocessor(Class, data);      <span class=\"comment\">// &lt;----------</span></span><br><span class=\"line\">    Class.addMembers(data);</span><br><span class=\"line\">    onCreated.call(Class, Class);               <span class=\"comment\">// &lt;----------</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Class;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.Class.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Class, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (name <span class=\"keyword\">in</span> Ext.Base) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Ext.Base.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">            Class[name] = Ext.Base[name];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>相应地，加上后置回调函数并在其中调用后置处理器的执行方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.ClassManager.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">className, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctor = mkCtor();</span><br><span class=\"line\">    data &amp;&amp; (data.$className = className);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Ext.Class(ctor, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        Ext.ClassManager.doPostprocessor();   <span class=\"comment\">// &lt;----------</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>就是这么简单，快注册几个处理器试试吧：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.Class.registerPreprocessor(<span class=\"string\">'jump'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I can jump high!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Ext.Class.registerPreprocessor(<span class=\"string\">'swim'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I can swim fast!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Ext.ClassManager.registerPostprocessor(<span class=\"string\">'rest'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I have to take a break!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Ext.define(<span class=\"string\">'Qiang'</span>);</span><br></pre></td></tr></table></figure>\n<p>此时可以看到，当我们定义一个新类( <code>&#39;Qiang&#39;</code> )时，各预处理器被执行：</p>\n<p><img src=\"classsystem_06.png\" alt=\"classsystem_06\"></p>\n<p>其实，ExtJS 实现前置处理器和后置处理器的过程是非常复杂的，不过思路却极为简单，正如我们刚刚看到的。在我们的代码基础上，还可以增加很多辅助方法，例如，调整已注册的处理器顺序、增加更多的钩子方法、注册事件并触发等等。事实上 ExtJS 正是这么做的，它还为我们提供了很多优秀的处理器，不像我们的示例代码只是粗糙的 <code>console.log</code> ，它们非常强大，它们正是之前介绍的 <code>Ext.define</code> 诸多功能的实际实现：</p>\n<p><img src=\"classsystem_07.png\" alt=\"classsystem_07\"></p>\n<h2 id=\"就此结束了吗？\"><a href=\"#就此结束了吗？\" class=\"headerlink\" title=\"就此结束了吗？\"></a>就此结束了吗？</h2><p>还不够，我们应该只处理用户指定的处理器，如下面的调用只执行 <code>swim</code> 处理器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.define(<span class=\"string\">'Swimmer'</span>, &#123;</span><br><span class=\"line\">    swim: <span class=\"string\">'very fast!'</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>另外，<code>Ext.define</code> 创建出的类，只是通过字符串静态指定的类名，我们还应该把它放入全局变量中，同时为其处理好命名空间问题，以便可以直接调用它。</p>\n<p>还有一大堆需要实现的 API 方法，还有无数的细节需要处理。</p>\n<p>我对 ExtJS 系统的讲解结束了，而我希望对你仅仅是开始，希望我的分析讲解可以帮你更深入地理解 ExtJS 类系统，更便于你理解它的源码，更便于你使用、扩展它。</p>\n"},{"title":"categories","url":"http://zhangqiang.work/categories/index.html","content":""},{"title":"tags","url":"http://zhangqiang.work/tags/index.html","content":""}]